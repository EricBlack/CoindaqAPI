// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyc.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Proto {
  /// <summary>
  ///*
  /// Kyc认证API
  /// </summary>
  public static partial class KycService
  {
    static readonly string __ServiceName = "proto.KycService";

    static readonly grpc::Marshaller<global::Proto.CreateKycReq> __Marshaller_CreateKycReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CreateKycReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.IdReq> __Marshaller_IdReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.IdReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.KycInfoReply> __Marshaller_KycInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.KycInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.UpdateKycReq> __Marshaller_UpdateKycReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.UpdateKycReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.LatestKycReq> __Marshaller_LatestKycReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.LatestKycReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.FilterReq> __Marshaller_FilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.FilterReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.KycListReply> __Marshaller_KycListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.KycListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CountryInfoReply> __Marshaller_CountryInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CountryInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CountryListReply> __Marshaller_CountryListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CountryListReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.CreateKycReq, global::Proto.Empty> __Method_CreateKyc = new grpc::Method<global::Proto.CreateKycReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateKyc",
        __Marshaller_CreateKycReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.KycInfoReply> __Method_QueryKycInfoById = new grpc::Method<global::Proto.IdReq, global::Proto.KycInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryKycInfoById",
        __Marshaller_IdReq,
        __Marshaller_KycInfoReply);

    static readonly grpc::Method<global::Proto.UpdateKycReq, global::Proto.Empty> __Method_UpdateKycInfo = new grpc::Method<global::Proto.UpdateKycReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateKycInfo",
        __Marshaller_UpdateKycReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.LatestKycReq, global::Proto.KycInfoReply> __Method_QueryKycLastInfo = new grpc::Method<global::Proto.LatestKycReq, global::Proto.KycInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryKycLastInfo",
        __Marshaller_LatestKycReq,
        __Marshaller_KycInfoReply);

    static readonly grpc::Method<global::Proto.FilterReq, global::Proto.KycListReply> __Method_QueryKycInfos = new grpc::Method<global::Proto.FilterReq, global::Proto.KycListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryKycInfos",
        __Marshaller_FilterReq,
        __Marshaller_KycListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.CountryInfoReply> __Method_QueryCountryById = new grpc::Method<global::Proto.IdReq, global::Proto.CountryInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryCountryById",
        __Marshaller_IdReq,
        __Marshaller_CountryInfoReply);

    static readonly grpc::Method<global::Proto.Empty, global::Proto.CountryListReply> __Method_QueryAllCountryInfo = new grpc::Method<global::Proto.Empty, global::Proto.CountryListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryAllCountryInfo",
        __Marshaller_Empty,
        __Marshaller_CountryListReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.KycReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KycService</summary>
    public abstract partial class KycServiceBase
    {
      /// <summary>
      ///*
      /// 创建Kyc记录[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> CreateKyc(global::Proto.CreateKycReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 查询Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.KycInfoReply> QueryKycInfoById(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新Kyc信息[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> UpdateKycInfo(global::Proto.UpdateKycReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 查询最新一条记录[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.KycInfoReply> QueryKycLastInfo(global::Proto.LatestKycReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 筛选Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.KycListReply> QueryKycInfos(global::Proto.FilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 根据Id查询国家信息[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CountryInfoReply> QueryCountryById(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 查询所有国家信息[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CountryListReply> QueryAllCountryInfo(global::Proto.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KycService</summary>
    public partial class KycServiceClient : grpc::ClientBase<KycServiceClient>
    {
      /// <summary>Creates a new client for KycService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KycServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KycService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KycServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KycServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KycServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 创建Kyc记录[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty CreateKyc(global::Proto.CreateKycReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateKyc(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 创建Kyc记录[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty CreateKyc(global::Proto.CreateKycReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateKyc, null, options, request);
      }
      /// <summary>
      ///*
      /// 创建Kyc记录[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> CreateKycAsync(global::Proto.CreateKycReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateKycAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 创建Kyc记录[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> CreateKycAsync(global::Proto.CreateKycReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateKyc, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.KycInfoReply QueryKycInfoById(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryKycInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.KycInfoReply QueryKycInfoById(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryKycInfoById, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.KycInfoReply> QueryKycInfoByIdAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryKycInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.KycInfoReply> QueryKycInfoByIdAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryKycInfoById, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新Kyc信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty UpdateKycInfo(global::Proto.UpdateKycReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateKycInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新Kyc信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty UpdateKycInfo(global::Proto.UpdateKycReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateKycInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新Kyc信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> UpdateKycInfoAsync(global::Proto.UpdateKycReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateKycInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新Kyc信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> UpdateKycInfoAsync(global::Proto.UpdateKycReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateKycInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询最新一条记录[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.KycInfoReply QueryKycLastInfo(global::Proto.LatestKycReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryKycLastInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询最新一条记录[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.KycInfoReply QueryKycLastInfo(global::Proto.LatestKycReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryKycLastInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询最新一条记录[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.KycInfoReply> QueryKycLastInfoAsync(global::Proto.LatestKycReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryKycLastInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询最新一条记录[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.KycInfoReply> QueryKycLastInfoAsync(global::Proto.LatestKycReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryKycLastInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 筛选Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.KycListReply QueryKycInfos(global::Proto.FilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryKycInfos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 筛选Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.KycListReply QueryKycInfos(global::Proto.FilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryKycInfos, null, options, request);
      }
      /// <summary>
      ///*
      /// 筛选Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.KycListReply> QueryKycInfosAsync(global::Proto.FilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryKycInfosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 筛选Kyc信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.KycListReply> QueryKycInfosAsync(global::Proto.FilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryKycInfos, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据Id查询国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CountryInfoReply QueryCountryById(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryCountryById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据Id查询国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CountryInfoReply QueryCountryById(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryCountryById, null, options, request);
      }
      /// <summary>
      ///*
      /// 根据Id查询国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CountryInfoReply> QueryCountryByIdAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryCountryByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 根据Id查询国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CountryInfoReply> QueryCountryByIdAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryCountryById, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询所有国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CountryListReply QueryAllCountryInfo(global::Proto.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryAllCountryInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询所有国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CountryListReply QueryAllCountryInfo(global::Proto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryAllCountryInfo, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询所有国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CountryListReply> QueryAllCountryInfoAsync(global::Proto.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryAllCountryInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询所有国家信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CountryListReply> QueryAllCountryInfoAsync(global::Proto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryAllCountryInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override KycServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KycServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(KycServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateKyc, serviceImpl.CreateKyc)
          .AddMethod(__Method_QueryKycInfoById, serviceImpl.QueryKycInfoById)
          .AddMethod(__Method_UpdateKycInfo, serviceImpl.UpdateKycInfo)
          .AddMethod(__Method_QueryKycLastInfo, serviceImpl.QueryKycLastInfo)
          .AddMethod(__Method_QueryKycInfos, serviceImpl.QueryKycInfos)
          .AddMethod(__Method_QueryCountryById, serviceImpl.QueryCountryById)
          .AddMethod(__Method_QueryAllCountryInfo, serviceImpl.QueryAllCountryInfo).Build();
    }

  }
}
#endregion
