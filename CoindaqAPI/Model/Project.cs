// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from project.proto</summary>
  public static partial class ProjectReflection {

    #region Descriptor
    /// <summary>File descriptor for project.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProjectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wcm9qZWN0LnByb3RvEgVwcm90bxoMY29tbW9uLnByb3RvIjgKDlN0YWdl",
            "RmlsdGVyUmVxEhEKCXByb2plY3RJZBgBIAEoAxITCgtzdGFnZU51bWJlchgC",
            "IAEoBSJ4Cg9Ob3RpY2VGaWx0ZXJSZXESEQoJcHJvamVjdElkGAEgASgDEiUK",
            "Cm5vdGljZVR5cGUYAiABKA4yES5wcm90by5Ob3RpY2VUeXBlEisKC25vdGlj",
            "ZVN0YXRlGAMgASgOMhYucHJvdG8uTm90aWNlU3RhdGVUeXBlIjIKDk5vdGlj",
            "ZVJpZ2h0UmVxEhAKCG5vdGljZUlkGAEgASgDEg4KBnVzZXJJZBgCIAEoAyJr",
            "CgtJY29PcmRlclJlcRIRCglwcm9qZWN0SWQYASABKAMSDgoGdXNlcklkGAIg",
            "ASgDEhAKCHBheUNvdW50GAMgASgDEhMKC3N0YWdlTnVtYmVyGAQgASgFEhIK",
            "CmN1cnJlbmN5SWQYBSABKAkiWAoLVXNlclZvdGVSZXESEAoIbm90aWNlSWQY",
            "ASABKAMSDgoGdXNlcklkGAIgASgDEicKCHZvdGVUeXBlGAMgASgOMhUucHJv",
            "dG8uVm90ZVJlc3VsdFR5cGUibwoWQ2VydGlmaWNhdGlvbkluZm9SZXBseRIK",
            "CgJpZBgBIAEoAxIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJ",
            "EhAKCGltYWdlVXJsGAQgASgJEhQKDHByaW9yaXR5U29ydBgFIAEoBSJSChZD",
            "ZXJ0aWZpY2F0aW9uTGlzdFJlcGx5EjgKEUNlcnRpZmljYXRpb25MaXN0GAEg",
            "AygLMh0ucHJvdG8uQ2VydGlmaWNhdGlvbkluZm9SZXBseSJEChBQcm9qZWN0",
            "U3RhdHVzUmVxEhEKCXByb2plY3RJZBgBIAEoAxIdCgZzdGF0dXMYAiABKA4y",
            "DS5wcm90by5TdGF0dXMiawoOUHJvamVjdEluZm9SZXESEQoJcHJvamVjdElk",
            "GAEgASgDEg8KB3N1bW1hcnkYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkS",
            "DwoHY29tbWFueRgEIAEoCRIPCgdlbmRUaW1lGAUgASgJIj4KFFByb2plY3RJ",
            "bnZlc3RtZW50UmVxEhEKCXByb2plY3RJZBgBIAEoAxITCgtzdGFnZU51bWJl",
            "chgCIAEoBSIjChFVc2VySW52ZXN0bWVudFJlcRIOCgZ1c2VySWQYASABKAMi",
            "egoMTmV3Tm90aWNlUmVxEhAKCHByb2plY0lkGAEgASgDEg0KBXRpdGxlGAIg",
            "ASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEiAKBnN0YXR1cxgEIAEoDjIQLnBy",
            "b3RvLkJvb2xWYWx1ZRISCgpleHBpcmVUaW1lGAUgASgJIkQKDU5vdGljZUlu",
            "Zm9SZXESEQoJcHJvamVjdElkGAEgASgDEiAKBnN0YXR1cxgCIAEoDjIQLnBy",
            "b3RvLkJvb2xWYWx1ZSJ3Cg9Ob3RpY2VVcGRhdGVSZXESCgoCaWQYASABKAMS",
            "DQoFdGl0bGUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSIAoGc3RhdHVz",
            "GAQgASgOMhAucHJvdG8uQm9vbFZhbHVlEhIKCmV4cGlyZVRpbWUYBSABKAki",
            "NQoSU3RhZ2VDb2luRmlsdGVyUmVxEg8KB3N0YWdlSWQYASABKAMSDgoGY29p",
            "bklkGAIgASgJIh0KD05ld1Byb2plY3RSZXBseRIKCgJpZBgBIAEoAyLmAgoQ",
            "UHJvamVjdEluZm9SZXBseRIKCgJpZBgBIAEoAxIPCgdhZG1pbklkGAIgASgD",
            "Eg8KB3N1bW1hcnkYAyABKAkSEwoLdGFyZ2V0VmFsdWUYBCABKAMSEgoKaXNz",
            "dWVDb2luYRgFIAEoCRISCgppc3N1ZUNvaW5iGAYgASgJEhIKCnN0YWdlQ291",
            "bnQYByABKAUSEAoIY2xhc3NpZnkYCCABKAkSEgoKd2hpdGVQYXBlchgJIAEo",
            "CRISCgpvZmZpY2VTaXRlGAogASgJEhgKEGNvbW11bml0eUFkZHJlc3MYCyAB",
            "KAkSHQoGc3RhdHVzGAwgASgOMg0ucHJvdG8uU3RhdHVzEhQKDHByaW9yaXR5",
            "U29ydBgNIAEoBRISCgpjcmVhdGVUaW1lGA4gASgJEhEKCWJlZ2luVGltZRgP",
            "IAEoCRIPCgdlbmRUaW1lGBAgASgJEhIKCnVwZGF0ZVRpbWUYESABKAkiQAoQ",
            "UHJvamVjdExpc3RSZXBseRIsCgtwcm9qZWN0TGlzdBgBIAMoCzIXLnByb3Rv",
            "LlByb2plY3RJbmZvUmVwbHkiqwIKDlN0YWdlSW5mb1JlcGx5EgoKAmlkGAEg",
            "ASgDEhEKCXByb2plY3RJZBgCIAEoAxITCgtzdGFnZU51bWJlchgDIAEoBRIR",
            "CglzdGFnZU5hbWUYBCABKAkSEQoJY29pbkNvdW50GAUgASgFEhMKC3Rhcmdl",
            "dFZhbHVlGAYgASgDEhEKCXNvZnRWYWx1ZRgHIAEoAxIQCghkaXNjb3VudBgI",
            "IAEoCRIVCg1jb21wbGV0ZVZhbHVlGAkgASgDEiIKC3N0YWdlU3RhdHVzGAog",
            "ASgOMg0ucHJvdG8uU3RhdHVzEhEKCWJlZ2luVGltZRgLIAEoCRIPCgdlbmRU",
            "aW1lGAwgASgJEhIKCmNyZWF0ZVRpbWUYDSABKAkSEgoKdXBkYXRlVGltZRgO",
            "IAEoCSI6Cg5TdGFnZUxpc3RSZXBseRIoCglzdGFnZUxpc3QYASADKAsyFS5w",
            "cm90by5TdGFnZUluZm9SZXBseSK1AQoOU3RhZ2VDb2luUmVwbHkSDwoHc3Rh",
            "Z2VJZBgBIAEoAxIOCgZjb2luSWQYAiABKAkSEAoIY29pbk5hbWUYAyABKAkS",
            "FQoNY29tcGxldGVWYWx1ZRgEIAEoAxIQCghtaW5WYWx1ZRgFIAEoAxIQCght",
            "YXhWYWx1ZRgGIAEoAxINCgVwcmljZRgHIAEoAxISCgpjcmVhdGVUaW1lGAgg",
            "ASgJEhIKCnVwZGF0ZVRpbWUYCSABKAkiQgoSU3RhZ2VDb2luTGlzdFJlcGx5",
            "EiwKDXN0YWdlQ29pbkxpc3QYASADKAsyFS5wcm90by5TdGFnZUNvaW5SZXBs",
            "eSLuAQoPSW52ZXN0bWVudFJlcGx5EgoKAmlkGAEgASgDEg4KBnVzZXJJZBgC",
            "IAEoAxIRCglwcm9qZWN0SWQYAyABKAMSEwoLc3RhZ2VOdW1iZXIYBCABKAUS",
            "FwoPaW52ZXN0bWVudFZhbHVlGAUgASgFEhYKDmludmVzdG1lbnRUeXBlGAYg",
            "ASgJEhIKCndhbGxldFBhdGgYByABKAkSKgoQaW52ZXN0bWVudFN0YXR1cxgI",
            "IAEoDjIQLnByb3RvLkJvb2xWYWx1ZRISCgpjcmVhdGVUaW1lGAkgASgJEhIK",
            "CnVwZGF0ZVRpbWUYCiABKAkiRQoTSW52ZXN0bWVudExpc3RSZXBseRIuCg5p",
            "bnZlc3RtZW50TGlzdBgBIAMoCzIWLnByb3RvLkludmVzdG1lbnRSZXBseSK0",
            "AQobUHJvamVjdERlc2NyaXB0aW9uSW5mb1JlcGx5EhEKCXByb2plY3RJZBgB",
            "IAEoAxINCgV0aXRsZRgCIAEoCRITCgtwcm9qZWN0VGV4dBgDIAEoCRIgCgZl",
            "bmFibGUYBCABKA4yEC5wcm90by5Cb29sVmFsdWUSFAoMcHJpb3JpdHlTb3J0",
            "GAUgASgFEhIKCmNyZWF0ZVRpbWUYBiABKAkSEgoKdXBkYXRlVGltZRgHIAEo",
            "CSJhChtQcm9qZWN0RGVzY3JpcHRpb25MaXN0UmVwbHkSQgoWcHJvamVjdERl",
            "c2NyaXB0aW9uTGlzdBgBIAMoCzIiLnByb3RvLlByb2plY3REZXNjcmlwdGlv",
            "bkluZm9SZXBseSLDAQoMTWVtZWJlclJlcGx5EgoKAmlkGAEgASgDEhEKCXBy",
            "b2plY3RJZBgCIAEoAxIMCgRuYW1lGAMgASgJEhAKCHBvc2l0aW9uGAQgASgJ",
            "EhMKC2Rlc2NyaXB0aW9uGAUgASgJEiUKCm1lbWJlclR5cGUYBiABKA4yES5w",
            "cm90by5NZW1iZXJUeXBlEhAKCGltYWdlVXJsGAcgASgJEhQKDHByaW9yaXR5",
            "U29ydBgIIAEoBRIQCghqb2luVGltZRgJIAEoCSI6Cg9NZW1iZXJMaXN0UmVw",
            "bHkSJwoKbWVtYmVyTGlzdBgBIAMoCzITLnByb3RvLk1lbWViZXJSZXBseSK5",
            "AgoPTm90aWNlSW5mb1JlcGx5EhAKCG5vdGljZUlkGAEgASgDEhEKCXByb2pl",
            "Y3RJZBgCIAEoAxINCgV0aXRsZRgDIAEoCRIZChFicmllZkludHJvZHVjdGlv",
            "bhgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIlCgpub3RpY2VUeXBlGAYg",
            "ASgOMhEucHJvdG8uTm90aWNlVHlwZRInCghzZW5kVHlwZRgHIAEoDjIVLnBy",
            "b3RvLk5vdGljZVNlbmRUeXBlEiYKBnN0YXR1cxgIIAEoDjIWLnByb3RvLk5v",
            "dGljZVN0YXRlVHlwZRIOCgZyZWFzb24YCSABKAkSEgoKY3JlYXRlVGltZRgK",
            "IAEoCRISCgpleHBpcmVUaW1lGAsgASgJEhIKCnVwZGF0ZVRpbWUYDCABKAki",
            "QQoTTm90aWNlSW5mb0xpc3RSZXBseRIqCgpub3RpY2VMaXN0GAEgAygLMhYu",
            "cHJvdG8uTm90aWNlSW5mb1JlcGx5IpEDCg9Ob3RpY2VWb3RlUmVwbHkSEAoI",
            "bm90aWNlSWQYASABKAMSEwoLYXBwcm92ZVZvdGUYAiABKAMSFgoOZGlzYXBw",
            "cm92ZVZvdGUYAyABKAMSFgoOYWJzdGVudGlvblZvdGUYBCABKAMSFwoPcGxh",
            "dGZvcm1Wb3RlTWF4GAUgASgDEhoKEnBsYXRmb3JtVm90ZVZvbHVtbhgGIAEo",
            "AxIvChBwbGF0Zm9ybVZvdGVUeXBlGAcgASgOMhUucHJvdG8uVm90ZVJlc3Vs",
            "dFR5cGUSGgoScGxhdGZvcm1Wb3RlUmVhc29uGAggASgJEhgKEHBsYXRmb3Jt",
            "Vm90ZVRpbWUYCSABKAkSKwoKdm90ZVJlc3VsdBgKIAEoDjIXLnByb3RvLk5v",
            "dGljZVJlc3VsdFR5cGUSEgoKY3JlYXRlVGltZRgLIAEoCRISCgp1cGRhdGVU",
            "aW1lGAwgASgJEhEKCWJlZ2luVGltZRgNIAEoCRIPCgdlbmRUaW1lGA4gASgJ",
            "EhIKCnRvdGFsVm90ZXMYDyABKAMihQEKEFZvdGVEZXRhaWxzUmVwbHkSEAoI",
            "bm90aWNlSWQYASABKAMSDgoGdXNlcklkGAIgASgDEicKCHZvdGVUeXBlGAMg",
            "ASgOMhUucHJvdG8uVm90ZVJlc3VsdFR5cGUSEgoKdm90ZVZvbHVtbhgEIAEo",
            "AxISCgpjcmVhdGVUaW1lGAUgASgJIkgKFFZvdGVEZXRhaWxzTGlzdFJlcGx5",
            "EjAKD3ZvdGVEZXRhaWxzTGlzdBgBIAMoCzIXLnByb3RvLlZvdGVEZXRhaWxz",
            "UmVwbHkirwEKDk1lZGlhSW5mb1JlcGx5EhEKCXByb2plY3RJZBgBIAEoAxIN",
            "CgV0aXRsZRgCIAEoCRIPCgdhZGRyZXNzGAMgASgJEh4KBHR5cGUYBCABKA4y",
            "EC5wcm90by5NZWRpYVR5cGUSIAoGZW5hYmxlGAUgASgOMhAucHJvdG8uQm9v",
            "bFZhbHVlEhQKDHByaW9yaXR5U29ydBgGIAEoBRISCgpjcmVhdGVUaW1lGAcg",
            "ASgJIjoKDk1lZGlhTGlzdFJlcGx5EigKCW1lZGlhTGlzdBgBIAMoCzIVLnBy",
            "b3RvLk1lZGlhSW5mb1JlcGx5InkKFVJlY29tbWVuZFByb2plY3RSZXBseRIR",
            "Cglwcm9qZWN0SWQYASABKAMSEAoIaW1hZ2VVcmwYAiABKAkSDwoHc3VtbWFy",
            "eRgDIAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRIVCg1wcm9qZWN0U3RhdHVz",
            "GAUgASgFIk4KGVJlY29tbWVuZFByb2plY3RMaXN0UmVwbHkSMQoLUHJvamVj",
            "dExpc3QYASADKAsyHC5wcm90by5SZWNvbW1lbmRQcm9qZWN0UmVwbHkidAoQ",
            "UHJvamVjdENvaW5SZXBseRIQCghjb2luTmFtZRgBIAEoCRITCgt0YXJnZXRW",
            "YWx1ZRgCIAEoAxIVCg1jb21wbGV0ZVZhbHVlGAMgASgDEhAKCG1pblZhbHVl",
            "GAQgASgDEhAKCG1heFZhbHVlGAUgASgDIqEBChFQcm9qZWN0U3RhZ2VSZXBs",
            "eRIRCglzdGFnZU5hbWUYASABKAkSFAoMZGlzY291bnRJbmZvGAIgASgJEhAK",
            "CGxlZnRUaW1lGAMgASgFEhAKCG1pblZhbHVlGAQgASgDEhAKCG1heFZhbHVl",
            "GAUgASgDEi0KDGNvaW5JbmZvTGlzdBgGIAMoCzIXLnByb3RvLlByb2plY3RD",
            "b2luUmVwbHkiSwoSUHJvamVjdERlc2NyaXB0aW9uEg0KBXRpdGxlGAEgASgJ",
            "Eg8KB2NvbnRlbnQYAiABKAkSFQoNcHJpb3JpdHlfc29ydBgDIAEoBSJrCgpU",
            "ZWFtTWVtYmVyEhAKCGltYWdlVXJsGAEgASgJEgwKBG5hbWUYAiABKAkSEAoI",
            "cG9zaXRpb24YAyABKAkSFAoMcGVyc29uYWxJbmZvGAQgASgJEhUKDXByaW9y",
            "aXR5X3NvcnQYBSABKAUixQIKE1Byb2plY3REZXRhaWxzUmVwbHkSEAoIaW1h",
            "Z2VVcmwYASABKAkSDgoGc3RhdHVzGAIgASgFEg8KB3N1bW1hcnkYAyABKAkS",
            "DgoGY29pbklkGAQgASgJEhAKCGNvaW5OYW1lGAUgASgJEhMKC2Rlc2NyaXB0",
            "aW9uGAYgASgJEhkKEWNlcnRpZmljYXRpb25MaXN0GAcgAygJEiwKDXNlbGxT",
            "dGFnZUxpc3QYCCADKAsyFS5wcm90by5TZWxsU3RhZ2VSZXBseRIxCg5wcm9q",
            "ZWN0Q29udGVudBgJIAMoCzIZLnByb3RvLlByb2plY3REZXNjcmlwdGlvbhIl",
            "CgptZW1iZXJMaXN0GAogAygLMhEucHJvdG8uVGVhbU1lbWJlchIhCgdjYW5K",
            "b2luGAsgASgOMhAucHJvdG8uQm9vbFZhbHVlIn4KDlNlbGxTdGFnZVJlcGx5",
            "EgwKBG5hbWUYASABKAkSDwoHZW5kVGltZRgCIAEoCRIQCghsZWZ0RGF5cxgD",
            "IAEoBRIQCghkaXNjb3VudBgEIAEoCRIpCghjb2luSW5mbxgFIAMoCzIXLnBy",
            "b3RvLlByb2plY3RDb2luUmVwbHkilAEKD1JhaXNlU3RhZ2VSZXBseRIMCgRu",
            "YW1lGAEgASgJEhEKCWJlZ2luVGltZRgCIAEoCRIPCgdlbmRUaW1lGAMgASgJ",
            "EhIKCnRhcmdldEluZm8YBCABKAkSEAoIZGlzY291bnQYBSABKAkSKQoIQ29p",
            "bkxpc3QYBiADKAsyFy5wcm90by5Qcm9qZWN0Q29pblJlcGx5Io4BCg5SYWlz",
            "ZVJ1bGVSZXBseRIUCgxjdXJyZW5jeU5hbWUYASABKAkSEgoKc29mdFRhcmdl",
            "dBgCIAEoAxISCgpoYXJkVGFyZ2V0GAMgASgDEhMKC3RvdGFsVGFyZ2V0GAQg",
            "ASgDEikKCXN0YWdlTGlzdBgFIAMoCzIWLnByb3RvLlJhaXNlU3RhZ2VSZXBs",
            "eSKFAQoSUHJvamVjdE5vdGljZVJlcGx5EhAKCG5vdGljZUlkGAEgASgDEhMK",
            "C25vdGljZVRpdGxlGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEh8KBHR5",
            "cGUYBCABKA4yES5wcm90by5Ob3RpY2VUeXBlEhIKCmNyZWF0ZVRpbWUYBSAB",
            "KAkiRwoWUHJvamVjdE5vdGljZUxpc3RSZXBseRItCgpOb3RpY2VMaXN0GAEg",
            "AygLMhkucHJvdG8uUHJvamVjdE5vdGljZVJlcGx5IrIBCg9Ob3RpY2VOZXdz",
            "UmVwbHkSEwoLcHJvamVjdE5hbWUYASABKAkSEgoKY3JlYXRlVGltZRgCIAEo",
            "CRITCgtub3RpY2VUaXRsZRgDIAEoCRIVCg1ub3RpY2VDb250ZW50GAQgASgJ",
            "EhAKCGltYWdlVXJsGAUgASgJEhIKCmltYWdlV2lkdGgYBiABKAUSEwoLaW1h",
            "Z2VIZWlnaHQYByABKAUSDwoHdXJsU2l0ZRgIIAEoCSLSAwoVTm90aWNlVm90",
            "ZURldGFpbFJlcGx5EhMKC3Byb2plY3ROYW1lGAEgASgJEhIKCmNyZWF0ZVRp",
            "bWUYAiABKAkSEwoLbm90aWNlVGl0bGUYAyABKAkSFQoNbm90aWNlQ29udGVu",
            "dBgEIAEoCRIQCghpbWFnZVVybBgFIAEoCRISCgppbWFnZVdpZHRoGAYgASgF",
            "EhMKC2ltYWdlSGVpZ2h0GAcgASgFEg8KB3VybFNpdGUYCCABKAkSFAoMbXlW",
            "b3RlVm9sdW1uGAkgASgDEikKCm15Vm90ZVR5cGUYCiABKA4yFS5wcm90by5W",
            "b3RlUmVzdWx0VHlwZRIPCgdlbmRUaW1lGAsgASgJEhUKDWFwcHJvdmVWb2x1",
            "bW4YDCABKAMSGAoQZGlzYXBwcm92ZVZvbHVtbhgNIAEoAxIYChBhYnN0ZW5z",
            "aW9uVm9sdW1uGA4gASgDEhEKCXRvdGFsVm90ZRgPIAEoAxIhCgp2b3RlU3Rh",
            "dHVzGBAgASgOMg0ucHJvdG8uU3RhdHVzEi0KDE5vdGljZVJlc3VsdBgRIAEo",
            "DjIXLnByb3RvLk5vdGljZVJlc3VsdFR5cGUSFgoOTm90aWNlQ29tbWVudHMY",
            "EiABKAkiewoISWNvUmVwbHkSFAoMY3VycmVuY3lOYW1lGAEgASgJEhQKDGJh",
            "bGFuY2VWYWx1ZRgCIAEoAxINCgVwcmljZRgDIAEoAxIQCghtaW5WYWx1ZRgE",
            "IAEoAxIQCghtYXhWYWx1ZRgFIAEoAxIQCghkaXNjb3VudBgGIAEoCSIyCg5K",
            "b2luT3JkZXJSZXBseRIgCgdJY29MaXN0GAEgAygLMg8ucHJvdG8uSWNvUmVw",
            "bHkinAEKDEljb0luZm9SZXBseRIOCgZ1c2VySWQYASABKAMSEQoJcHJvamVj",
            "dElkGAIgASgDEg8KB3N0YWdlSWQYAyABKAMSDQoFcHJpY2UYBCABKAMSEQoJ",
            "cGF5QW1vdW50GAUgASgDEhAKCGJhc2VDb2luGAYgASgJEhIKCnRhcmdldENv",
            "aW4YByABKAkSEAoIbG9ja1R5cGUYCCABKAUqNwoJTWVkaWFUeXBlEgwKCE1l",
            "Tm90U2V0EAASDQoJUGhvdG9UeXBlEAESDQoJVmVkaWFUeXBlEAIqMgoGU3Rh",
            "dHVzEgwKCE5vdFN0YXJ0EAASCwoHU3RhcnRlZBABEg0KCUNvbXBsZXRlZBAC",
            "KjUKCk5vdGljZVR5cGUSCwoHTk5vdFNldBAAEgwKCE5ld3NUeXBlEAESDAoI",
            "Vm90ZVR5cGUQAio/Cg5Ob3RpY2VTZW5kVHlwZRILCgdTTm90U2V0EAASCwoH",
            "U2VuZEFsbBABEhMKD1NlbmRQYXJ0aWNpcGFudBACKkkKD05vdGljZVN0YXRl",
            "VHlwZRIQCgxOb3RpY2VTdWJtaXQQABIQCgxTdWJtaXRQYXNzZWQQARISCg5T",
            "dWJtaXRSZWplY3RlZBACKlYKDlZvdGVSZXN1bHRUeXBlEgsKB05vdFZvdGUQ",
            "ABIPCgtBcHByb3ZlVm90ZRABEhIKDkRpc0FwcHJvdmVWb3RlEAISEgoOQWJz",
            "dGVudGlvblZvdGUQAypDChBOb3RpY2VSZXN1bHRUeXBlEgwKCE5yTm90U2V0",
            "EAASEQoNTm90aWNlU3VjY2VzcxABEg4KCk5vdGljZUZhaWwQAio+CgpNZW1i",
            "ZXJUeXBlEgoKBk1VblNldBAAEgkKBUFkbWluEAESCwoHUGFydG5lchACEgwK",
            "CEludmVzdG9yEAMywQ0KDlByb2plY3RTZXJ2aWNlEjsKEFF1ZXJ5UHJvamVj",
            "dEJ5SWQSDC5wcm90by5JZFJlcRoXLnByb3RvLlByb2plY3RJbmZvUmVwbHki",
            "ABJICh1RdWVyeVVzZXJQYXJ0aWNpcGF0aW9uUHJvamVjdBIMLnByb3RvLklk",
            "UmVxGhcucHJvdG8uUHJvamVjdExpc3RSZXBseSIAEj8KFlF1ZXJ5UHJvamVj",
            "dFBob3Rvc0luZm8SDC5wcm90by5JZFJlcRoVLnByb3RvLk1lZGlhTGlzdFJl",
            "cGx5IgASPwoWUXVlcnlQcm9qZWN0VmlkZW9zSW5mbxIMLnByb3RvLklkUmVx",
            "GhUucHJvdG8uTWVkaWFMaXN0UmVwbHkiABJRChtRdWVyeVByb2plY3REZXNj",
            "cmlwdGlvbkluZm8SDC5wcm90by5JZFJlcRoiLnByb3RvLlByb2plY3REZXNj",
            "cmlwdGlvbkxpc3RSZXBseSIAEk4KHVF1ZXJ5UHJvamVjdENlcnRpZmljYXRp",
            "b25JbmZvEgwucHJvdG8uSWRSZXEaHS5wcm90by5DZXJ0aWZpY2F0aW9uTGlz",
            "dFJlcGx5IgASQQoXUXVlcnlQcm9qZWN0TWVtYmVyc0luZm8SDC5wcm90by5J",
            "ZFJlcRoWLnByb3RvLk1lbWJlckxpc3RSZXBseSIAEj8KFlF1ZXJ5UHJvamVj",
            "dFN0YWdlc0luZm8SDC5wcm90by5JZFJlcRoVLnByb3RvLlN0YWdlTGlzdFJl",
            "cGx5IgASSAoWRmlsdGVyUHJvamVjdFN0YWdlSW5mbxIVLnByb3RvLlN0YWdl",
            "RmlsdGVyUmVxGhUucHJvdG8uU3RhZ2VJbmZvUmVwbHkiABI/ChJRdWVyeVN0",
            "YWdlQ29pbkluZm8SDC5wcm90by5JZFJlcRoZLnByb3RvLlN0YWdlQ29pbkxp",
            "c3RSZXBseSIAEkkKE0ZpbHRlclN0YWdlQ29pbkluZm8SGS5wcm90by5TdGFn",
            "ZUNvaW5GaWx0ZXJSZXEaFS5wcm90by5TdGFnZUNvaW5SZXBseSIAElMKG1F1",
            "ZXJ5UHJvamVjdE5vdGljZXNCeUZpbHRlchIWLnByb3RvLk5vdGljZUZpbHRl",
            "clJlcRoaLnByb3RvLk5vdGljZUluZm9MaXN0UmVwbHkiABJEChpRdWVyeVBy",
            "b2plY3ROb3RpY2VWb3RlSW5mbxIMLnByb3RvLklkUmVxGhYucHJvdG8uTm90",
            "aWNlVm90ZVJlcGx5IgASQwoWQ2hlY2tVc2VyQ2FuVm90ZU5vdGljZRIVLnBy",
            "b3RvLk5vdGljZVJpZ2h0UmVxGhAucHJvdG8uQm9vbFJlcGx5IgASNAoOVXNl",
            "ck5vdGljZVZvdGUSEi5wcm90by5Vc2VyVm90ZVJlcRoMLnByb3RvLkVtcHR5",
            "IgASOwoOSm9pblByb2plY3RJY28SEi5wcm90by5JY29PcmRlclJlcRoTLnBy",
            "b3RvLkljb0luZm9SZXBseSIAEjoKFkNoZWNrVXNlckt5Y1N0YXR1c0luZm8S",
            "DC5wcm90by5JZFJlcRoQLnByb3RvLkJvb2xSZXBseSIAEk4KGlF1ZXJ5UmVj",
            "b21tZW5kUHJvamVjdHNJbmZvEgwucHJvdG8uRW1wdHkaIC5wcm90by5SZWNv",
            "bW1lbmRQcm9qZWN0TGlzdFJlcGx5IgASTQoZUXVlcnlVc2VySm9pblByb2pl",
            "Y3RzSW5mbxIMLnByb3RvLklkUmVxGiAucHJvdG8uUmVjb21tZW5kUHJvamVj",
            "dExpc3RSZXBseSIAEkUKF1F1ZXJ5UHJvamVjdERldGFpbHNJbmZvEgwucHJv",
            "dG8uSWRSZXEaGi5wcm90by5Qcm9qZWN0RGV0YWlsc1JlcGx5IgASSAofUXVl",
            "cnlSYWlzZUludmVzdG1lbnREZXRhaWxzSW5mbxIMLnByb3RvLklkUmVxGhUu",
            "cHJvdG8uUmFpc2VSdWxlUmVwbHkiABJIChdRdWVyeVByb2plY3ROb3RpY2Vz",
            "SW5mbxIMLnByb3RvLklkUmVxGh0ucHJvdG8uUHJvamVjdE5vdGljZUxpc3RS",
            "ZXBseSIAEksKIVF1ZXJ5UHJvamVjdE5vdGljZU5ld3NEZXRhaWxzSW5mbxIM",
            "LnByb3RvLklkUmVxGhYucHJvdG8uTm90aWNlTmV3c1JlcGx5IgASUwoaUXVl",
            "cnlOb3RpY2VWb3RlRGV0YWlsc0luZm8SFS5wcm90by5Ob3RpY2VSaWdodFJl",
            "cRocLnByb3RvLk5vdGljZVZvdGVEZXRhaWxSZXBseSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.MediaType), typeof(global::Proto.Status), typeof(global::Proto.NoticeType), typeof(global::Proto.NoticeSendType), typeof(global::Proto.NoticeStateType), typeof(global::Proto.VoteResultType), typeof(global::Proto.NoticeResultType), typeof(global::Proto.MemberType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.StageFilterReq), global::Proto.StageFilterReq.Parser, new[]{ "ProjectId", "StageNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeFilterReq), global::Proto.NoticeFilterReq.Parser, new[]{ "ProjectId", "NoticeType", "NoticeState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeRightReq), global::Proto.NoticeRightReq.Parser, new[]{ "NoticeId", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.IcoOrderReq), global::Proto.IcoOrderReq.Parser, new[]{ "ProjectId", "UserId", "PayCount", "StageNumber", "CurrencyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserVoteReq), global::Proto.UserVoteReq.Parser, new[]{ "NoticeId", "UserId", "VoteType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.CertificationInfoReply), global::Proto.CertificationInfoReply.Parser, new[]{ "Id", "Name", "Description", "ImageUrl", "PrioritySort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.CertificationListReply), global::Proto.CertificationListReply.Parser, new[]{ "CertificationList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectStatusReq), global::Proto.ProjectStatusReq.Parser, new[]{ "ProjectId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectInfoReq), global::Proto.ProjectInfoReq.Parser, new[]{ "ProjectId", "Summary", "Description", "Commany", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectInvestmentReq), global::Proto.ProjectInvestmentReq.Parser, new[]{ "ProjectId", "StageNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserInvestmentReq), global::Proto.UserInvestmentReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NewNoticeReq), global::Proto.NewNoticeReq.Parser, new[]{ "ProjecId", "Title", "Description", "Status", "ExpireTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeInfoReq), global::Proto.NoticeInfoReq.Parser, new[]{ "ProjectId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeUpdateReq), global::Proto.NoticeUpdateReq.Parser, new[]{ "Id", "Title", "Description", "Status", "ExpireTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.StageCoinFilterReq), global::Proto.StageCoinFilterReq.Parser, new[]{ "StageId", "CoinId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NewProjectReply), global::Proto.NewProjectReply.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectInfoReply), global::Proto.ProjectInfoReply.Parser, new[]{ "Id", "AdminId", "Summary", "TargetValue", "IssueCoina", "IssueCoinb", "StageCount", "Classify", "WhitePaper", "OfficeSite", "CommunityAddress", "Status", "PrioritySort", "CreateTime", "BeginTime", "EndTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectListReply), global::Proto.ProjectListReply.Parser, new[]{ "ProjectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.StageInfoReply), global::Proto.StageInfoReply.Parser, new[]{ "Id", "ProjectId", "StageNumber", "StageName", "CoinCount", "TargetValue", "SoftValue", "Discount", "CompleteValue", "StageStatus", "BeginTime", "EndTime", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.StageListReply), global::Proto.StageListReply.Parser, new[]{ "StageList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.StageCoinReply), global::Proto.StageCoinReply.Parser, new[]{ "StageId", "CoinId", "CoinName", "CompleteValue", "MinValue", "MaxValue", "Price", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.StageCoinListReply), global::Proto.StageCoinListReply.Parser, new[]{ "StageCoinList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.InvestmentReply), global::Proto.InvestmentReply.Parser, new[]{ "Id", "UserId", "ProjectId", "StageNumber", "InvestmentValue", "InvestmentType", "WalletPath", "InvestmentStatus", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.InvestmentListReply), global::Proto.InvestmentListReply.Parser, new[]{ "InvestmentList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectDescriptionInfoReply), global::Proto.ProjectDescriptionInfoReply.Parser, new[]{ "ProjectId", "Title", "ProjectText", "Enable", "PrioritySort", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectDescriptionListReply), global::Proto.ProjectDescriptionListReply.Parser, new[]{ "ProjectDescriptionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MemeberReply), global::Proto.MemeberReply.Parser, new[]{ "Id", "ProjectId", "Name", "Position", "Description", "MemberType", "ImageUrl", "PrioritySort", "JoinTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MemberListReply), global::Proto.MemberListReply.Parser, new[]{ "MemberList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeInfoReply), global::Proto.NoticeInfoReply.Parser, new[]{ "NoticeId", "ProjectId", "Title", "BriefIntroduction", "Description", "NoticeType", "SendType", "Status", "Reason", "CreateTime", "ExpireTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeInfoListReply), global::Proto.NoticeInfoListReply.Parser, new[]{ "NoticeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeVoteReply), global::Proto.NoticeVoteReply.Parser, new[]{ "NoticeId", "ApproveVote", "DisapproveVote", "AbstentionVote", "PlatformVoteMax", "PlatformVoteVolumn", "PlatformVoteType", "PlatformVoteReason", "PlatformVoteTime", "VoteResult", "CreateTime", "UpdateTime", "BeginTime", "EndTime", "TotalVotes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.VoteDetailsReply), global::Proto.VoteDetailsReply.Parser, new[]{ "NoticeId", "UserId", "VoteType", "VoteVolumn", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.VoteDetailsListReply), global::Proto.VoteDetailsListReply.Parser, new[]{ "VoteDetailsList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MediaInfoReply), global::Proto.MediaInfoReply.Parser, new[]{ "ProjectId", "Title", "Address", "Type", "Enable", "PrioritySort", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MediaListReply), global::Proto.MediaListReply.Parser, new[]{ "MediaList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RecommendProjectReply), global::Proto.RecommendProjectReply.Parser, new[]{ "ProjectId", "ImageUrl", "Summary", "Description", "ProjectStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RecommendProjectListReply), global::Proto.RecommendProjectListReply.Parser, new[]{ "ProjectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectCoinReply), global::Proto.ProjectCoinReply.Parser, new[]{ "CoinName", "TargetValue", "CompleteValue", "MinValue", "MaxValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectStageReply), global::Proto.ProjectStageReply.Parser, new[]{ "StageName", "DiscountInfo", "LeftTime", "MinValue", "MaxValue", "CoinInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectDescription), global::Proto.ProjectDescription.Parser, new[]{ "Title", "Content", "PrioritySort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TeamMember), global::Proto.TeamMember.Parser, new[]{ "ImageUrl", "Name", "Position", "PersonalInfo", "PrioritySort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectDetailsReply), global::Proto.ProjectDetailsReply.Parser, new[]{ "ImageUrl", "Status", "Summary", "CoinId", "CoinName", "Description", "CertificationList", "SellStageList", "ProjectContent", "MemberList", "CanJoin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.SellStageReply), global::Proto.SellStageReply.Parser, new[]{ "Name", "EndTime", "LeftDays", "Discount", "CoinInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RaiseStageReply), global::Proto.RaiseStageReply.Parser, new[]{ "Name", "BeginTime", "EndTime", "TargetInfo", "Discount", "CoinList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RaiseRuleReply), global::Proto.RaiseRuleReply.Parser, new[]{ "CurrencyName", "SoftTarget", "HardTarget", "TotalTarget", "StageList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectNoticeReply), global::Proto.ProjectNoticeReply.Parser, new[]{ "NoticeId", "NoticeTitle", "Description", "Type", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ProjectNoticeListReply), global::Proto.ProjectNoticeListReply.Parser, new[]{ "NoticeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeNewsReply), global::Proto.NoticeNewsReply.Parser, new[]{ "ProjectName", "CreateTime", "NoticeTitle", "NoticeContent", "ImageUrl", "ImageWidth", "ImageHeight", "UrlSite" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.NoticeVoteDetailReply), global::Proto.NoticeVoteDetailReply.Parser, new[]{ "ProjectName", "CreateTime", "NoticeTitle", "NoticeContent", "ImageUrl", "ImageWidth", "ImageHeight", "UrlSite", "MyVoteVolumn", "MyVoteType", "EndTime", "ApproveVolumn", "DisapproveVolumn", "AbstensionVolumn", "TotalVote", "VoteStatus", "NoticeResult", "NoticeComments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.IcoReply), global::Proto.IcoReply.Parser, new[]{ "CurrencyName", "BalanceValue", "Price", "MinValue", "MaxValue", "Discount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.JoinOrderReply), global::Proto.JoinOrderReply.Parser, new[]{ "IcoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.IcoInfoReply), global::Proto.IcoInfoReply.Parser, new[]{ "UserId", "ProjectId", "StageId", "Price", "PayAmount", "BaseCoin", "TargetCoin", "LockType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///媒体信息类型
  /// </summary>
  public enum MediaType {
    /// <summary>
    ///未设置
    /// </summary>
    [pbr::OriginalName("MeNotSet")] MeNotSet = 0,
    /// <summary>
    ///图片类型
    /// </summary>
    [pbr::OriginalName("PhotoType")] PhotoType = 1,
    /// <summary>
    ///视频类型
    /// </summary>
    [pbr::OriginalName("VediaType")] VediaType = 2,
  }

  /// <summary>
  ///项目状态类型
  /// </summary>
  public enum Status {
    /// <summary>
    ///未开始
    /// </summary>
    [pbr::OriginalName("NotStart")] NotStart = 0,
    /// <summary>
    ///已启动
    /// </summary>
    [pbr::OriginalName("Started")] Started = 1,
    /// <summary>
    ///已完成
    /// </summary>
    [pbr::OriginalName("Completed")] Completed = 2,
  }

  /// <summary>
  ///公告类型
  /// </summary>
  public enum NoticeType {
    /// <summary>
    ///未设置
    /// </summary>
    [pbr::OriginalName("NNotSet")] NnotSet = 0,
    /// <summary>
    ///普通公告类型
    /// </summary>
    [pbr::OriginalName("NewsType")] NewsType = 1,
    /// <summary>
    ///投票公告类型
    /// </summary>
    [pbr::OriginalName("VoteType")] VoteType = 2,
  }

  /// <summary>
  ///公告发送类型
  /// </summary>
  public enum NoticeSendType {
    /// <summary>
    ///未设置
    /// </summary>
    [pbr::OriginalName("SNotSet")] SnotSet = 0,
    /// <summary>
    ///发送所有人
    /// </summary>
    [pbr::OriginalName("SendAll")] SendAll = 1,
    /// <summary>
    ///发送参与者
    /// </summary>
    [pbr::OriginalName("SendParticipant")] SendParticipant = 2,
  }

  /// <summary>
  ///Notice审核状态
  /// </summary>
  public enum NoticeStateType {
    /// <summary>
    ///审核中
    /// </summary>
    [pbr::OriginalName("NoticeSubmit")] NoticeSubmit = 0,
    /// <summary>
    ///审核通过
    /// </summary>
    [pbr::OriginalName("SubmitPassed")] SubmitPassed = 1,
    /// <summary>
    ///审核拒绝
    /// </summary>
    [pbr::OriginalName("SubmitRejected")] SubmitRejected = 2,
  }

  /// <summary>
  ///投票类型
  /// </summary>
  public enum VoteResultType {
    /// <summary>
    ///未投票
    /// </summary>
    [pbr::OriginalName("NotVote")] NotVote = 0,
    /// <summary>
    ///赞成票
    /// </summary>
    [pbr::OriginalName("ApproveVote")] ApproveVote = 1,
    /// <summary>
    ///反对票
    /// </summary>
    [pbr::OriginalName("DisApproveVote")] DisApproveVote = 2,
    /// <summary>
    ///弃权票
    /// </summary>
    [pbr::OriginalName("AbstentionVote")] AbstentionVote = 3,
  }

  public enum NoticeResultType {
    /// <summary>
    ///未设置
    /// </summary>
    [pbr::OriginalName("NrNotSet")] NrNotSet = 0,
    /// <summary>
    ///提案通过
    /// </summary>
    [pbr::OriginalName("NoticeSuccess")] NoticeSuccess = 1,
    /// <summary>
    ///提案失败
    /// </summary>
    [pbr::OriginalName("NoticeFail")] NoticeFail = 2,
  }

  /// <summary>
  ///项目人员类型
  /// </summary>
  public enum MemberType {
    [pbr::OriginalName("MUnSet")] MunSet = 0,
    /// <summary>
    ///管理员
    /// </summary>
    [pbr::OriginalName("Admin")] Admin = 1,
    /// <summary>
    ///合伙人
    /// </summary>
    [pbr::OriginalName("Partner")] Partner = 2,
    /// <summary>
    ///投资者
    /// </summary>
    [pbr::OriginalName("Investor")] Investor = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///Request Information
  /// </summary>
  public sealed partial class StageFilterReq : pb::IMessage<StageFilterReq> {
    private static readonly pb::MessageParser<StageFilterReq> _parser = new pb::MessageParser<StageFilterReq>(() => new StageFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageFilterReq(StageFilterReq other) : this() {
      projectId_ = other.projectId_;
      stageNumber_ = other.stageNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageFilterReq Clone() {
      return new StageFilterReq(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "stageNumber" field.</summary>
    public const int StageNumberFieldNumber = 2;
    private int stageNumber_;
    /// <summary>
    ///阶段序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageNumber {
      get { return stageNumber_; }
      set {
        stageNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (StageNumber != other.StageNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (StageNumber != 0) hash ^= StageNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (StageNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StageNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (StageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.StageNumber != 0) {
        StageNumber = other.StageNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 16: {
            StageNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告筛选
  /// </summary>
  public sealed partial class NoticeFilterReq : pb::IMessage<NoticeFilterReq> {
    private static readonly pb::MessageParser<NoticeFilterReq> _parser = new pb::MessageParser<NoticeFilterReq>(() => new NoticeFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeFilterReq(NoticeFilterReq other) : this() {
      projectId_ = other.projectId_;
      noticeType_ = other.noticeType_;
      noticeState_ = other.noticeState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeFilterReq Clone() {
      return new NoticeFilterReq(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "noticeType" field.</summary>
    public const int NoticeTypeFieldNumber = 2;
    private global::Proto.NoticeType noticeType_ = 0;
    /// <summary>
    ///公告类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeType NoticeType {
      get { return noticeType_; }
      set {
        noticeType_ = value;
      }
    }

    /// <summary>Field number for the "noticeState" field.</summary>
    public const int NoticeStateFieldNumber = 3;
    private global::Proto.NoticeStateType noticeState_ = 0;
    /// <summary>
    ///公告状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeStateType NoticeState {
      get { return noticeState_; }
      set {
        noticeState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (NoticeType != other.NoticeType) return false;
      if (NoticeState != other.NoticeState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (NoticeType != 0) hash ^= NoticeType.GetHashCode();
      if (NoticeState != 0) hash ^= NoticeState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (NoticeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NoticeType);
      }
      if (NoticeState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) NoticeState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (NoticeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NoticeType);
      }
      if (NoticeState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NoticeState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.NoticeType != 0) {
        NoticeType = other.NoticeType;
      }
      if (other.NoticeState != 0) {
        NoticeState = other.NoticeState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 16: {
            noticeType_ = (global::Proto.NoticeType) input.ReadEnum();
            break;
          }
          case 24: {
            noticeState_ = (global::Proto.NoticeStateType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告权限
  /// </summary>
  public sealed partial class NoticeRightReq : pb::IMessage<NoticeRightReq> {
    private static readonly pb::MessageParser<NoticeRightReq> _parser = new pb::MessageParser<NoticeRightReq>(() => new NoticeRightReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeRightReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeRightReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeRightReq(NoticeRightReq other) : this() {
      noticeId_ = other.noticeId_;
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeRightReq Clone() {
      return new NoticeRightReq(this);
    }

    /// <summary>Field number for the "noticeId" field.</summary>
    public const int NoticeIdFieldNumber = 1;
    private long noticeId_;
    /// <summary>
    ///公告Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NoticeId {
      get { return noticeId_; }
      set {
        noticeId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeRightReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeRightReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoticeId != other.NoticeId) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoticeId != 0L) hash ^= NoticeId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoticeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NoticeId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoticeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeRightReq other) {
      if (other == null) {
        return;
      }
      if (other.NoticeId != 0L) {
        NoticeId = other.NoticeId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NoticeId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Ico订单信息
  /// </summary>
  public sealed partial class IcoOrderReq : pb::IMessage<IcoOrderReq> {
    private static readonly pb::MessageParser<IcoOrderReq> _parser = new pb::MessageParser<IcoOrderReq>(() => new IcoOrderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IcoOrderReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoOrderReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoOrderReq(IcoOrderReq other) : this() {
      projectId_ = other.projectId_;
      userId_ = other.userId_;
      payCount_ = other.payCount_;
      stageNumber_ = other.stageNumber_;
      currencyId_ = other.currencyId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoOrderReq Clone() {
      return new IcoOrderReq(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "payCount" field.</summary>
    public const int PayCountFieldNumber = 3;
    private long payCount_;
    /// <summary>
    ///花费数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayCount {
      get { return payCount_; }
      set {
        payCount_ = value;
      }
    }

    /// <summary>Field number for the "stageNumber" field.</summary>
    public const int StageNumberFieldNumber = 4;
    private int stageNumber_;
    /// <summary>
    ///购买阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageNumber {
      get { return stageNumber_; }
      set {
        stageNumber_ = value;
      }
    }

    /// <summary>Field number for the "currencyId" field.</summary>
    public const int CurrencyIdFieldNumber = 5;
    private string currencyId_ = "";
    /// <summary>
    ///货币Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IcoOrderReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IcoOrderReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (UserId != other.UserId) return false;
      if (PayCount != other.PayCount) return false;
      if (StageNumber != other.StageNumber) return false;
      if (CurrencyId != other.CurrencyId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (PayCount != 0L) hash ^= PayCount.GetHashCode();
      if (StageNumber != 0) hash ^= StageNumber.GetHashCode();
      if (CurrencyId.Length != 0) hash ^= CurrencyId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (PayCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PayCount);
      }
      if (StageNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StageNumber);
      }
      if (CurrencyId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrencyId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (PayCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayCount);
      }
      if (StageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageNumber);
      }
      if (CurrencyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IcoOrderReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.PayCount != 0L) {
        PayCount = other.PayCount;
      }
      if (other.StageNumber != 0) {
        StageNumber = other.StageNumber;
      }
      if (other.CurrencyId.Length != 0) {
        CurrencyId = other.CurrencyId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            PayCount = input.ReadInt64();
            break;
          }
          case 32: {
            StageNumber = input.ReadInt32();
            break;
          }
          case 42: {
            CurrencyId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///投票信息
  /// </summary>
  public sealed partial class UserVoteReq : pb::IMessage<UserVoteReq> {
    private static readonly pb::MessageParser<UserVoteReq> _parser = new pb::MessageParser<UserVoteReq>(() => new UserVoteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserVoteReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserVoteReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserVoteReq(UserVoteReq other) : this() {
      noticeId_ = other.noticeId_;
      userId_ = other.userId_;
      voteType_ = other.voteType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserVoteReq Clone() {
      return new UserVoteReq(this);
    }

    /// <summary>Field number for the "noticeId" field.</summary>
    public const int NoticeIdFieldNumber = 1;
    private long noticeId_;
    /// <summary>
    ///公告Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NoticeId {
      get { return noticeId_; }
      set {
        noticeId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "voteType" field.</summary>
    public const int VoteTypeFieldNumber = 3;
    private global::Proto.VoteResultType voteType_ = 0;
    /// <summary>
    ///投票类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.VoteResultType VoteType {
      get { return voteType_; }
      set {
        voteType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserVoteReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserVoteReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoticeId != other.NoticeId) return false;
      if (UserId != other.UserId) return false;
      if (VoteType != other.VoteType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoticeId != 0L) hash ^= NoticeId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (VoteType != 0) hash ^= VoteType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoticeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NoticeId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (VoteType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VoteType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoticeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (VoteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VoteType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserVoteReq other) {
      if (other == null) {
        return;
      }
      if (other.NoticeId != 0L) {
        NoticeId = other.NoticeId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.VoteType != 0) {
        VoteType = other.VoteType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NoticeId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            voteType_ = (global::Proto.VoteResultType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勋章信息
  /// </summary>
  public sealed partial class CertificationInfoReply : pb::IMessage<CertificationInfoReply> {
    private static readonly pb::MessageParser<CertificationInfoReply> _parser = new pb::MessageParser<CertificationInfoReply>(() => new CertificationInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CertificationInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificationInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificationInfoReply(CertificationInfoReply other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      imageUrl_ = other.imageUrl_;
      prioritySort_ = other.prioritySort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificationInfoReply Clone() {
      return new CertificationInfoReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///勋章名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///勋章描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 4;
    private string imageUrl_ = "";
    /// <summary>
    ///勋章图标链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prioritySort" field.</summary>
    public const int PrioritySortFieldNumber = 5;
    private int prioritySort_;
    /// <summary>
    ///勋章排序优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CertificationInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CertificationInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (PrioritySort != other.PrioritySort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ImageUrl);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PrioritySort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CertificationInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ImageUrl = input.ReadString();
            break;
          }
          case 40: {
            PrioritySort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Certification List info
  /// </summary>
  public sealed partial class CertificationListReply : pb::IMessage<CertificationListReply> {
    private static readonly pb::MessageParser<CertificationListReply> _parser = new pb::MessageParser<CertificationListReply>(() => new CertificationListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CertificationListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificationListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificationListReply(CertificationListReply other) : this() {
      certificationList_ = other.certificationList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificationListReply Clone() {
      return new CertificationListReply(this);
    }

    /// <summary>Field number for the "CertificationList" field.</summary>
    public const int CertificationListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.CertificationInfoReply> _repeated_certificationList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.CertificationInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.CertificationInfoReply> certificationList_ = new pbc::RepeatedField<global::Proto.CertificationInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.CertificationInfoReply> CertificationList {
      get { return certificationList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CertificationListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CertificationListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!certificationList_.Equals(other.certificationList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= certificationList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      certificationList_.WriteTo(output, _repeated_certificationList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += certificationList_.CalculateSize(_repeated_certificationList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CertificationListReply other) {
      if (other == null) {
        return;
      }
      certificationList_.Add(other.certificationList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            certificationList_.AddEntriesFrom(input, _repeated_certificationList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectStatusReq : pb::IMessage<ProjectStatusReq> {
    private static readonly pb::MessageParser<ProjectStatusReq> _parser = new pb::MessageParser<ProjectStatusReq>(() => new ProjectStatusReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectStatusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectStatusReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectStatusReq(ProjectStatusReq other) : this() {
      projectId_ = other.projectId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectStatusReq Clone() {
      return new ProjectStatusReq(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Proto.Status status_ = 0;
    /// <summary>
    ///项目状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectStatusReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectStatusReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectStatusReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 16: {
            status_ = (global::Proto.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectInfoReq : pb::IMessage<ProjectInfoReq> {
    private static readonly pb::MessageParser<ProjectInfoReq> _parser = new pb::MessageParser<ProjectInfoReq>(() => new ProjectInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfoReq(ProjectInfoReq other) : this() {
      projectId_ = other.projectId_;
      summary_ = other.summary_;
      description_ = other.description_;
      commany_ = other.commany_;
      endTime_ = other.endTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfoReq Clone() {
      return new ProjectInfoReq(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 2;
    private string summary_ = "";
    /// <summary>
    ///项目概览
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Summary {
      get { return summary_; }
      set {
        summary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///项目具体描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commany" field.</summary>
    public const int CommanyFieldNumber = 4;
    private string commany_ = "";
    /// <summary>
    ///公司名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Commany {
      get { return commany_; }
      set {
        commany_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private string endTime_ = "";
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Summary != other.Summary) return false;
      if (Description != other.Description) return false;
      if (Commany != other.Commany) return false;
      if (EndTime != other.EndTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (Summary.Length != 0) hash ^= Summary.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Commany.Length != 0) hash ^= Commany.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (Summary.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Summary);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Commany.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Commany);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (Summary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Summary);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Commany.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Commany);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.Summary.Length != 0) {
        Summary = other.Summary;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Commany.Length != 0) {
        Commany = other.Commany;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 18: {
            Summary = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Commany = input.ReadString();
            break;
          }
          case 42: {
            EndTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectInvestmentReq : pb::IMessage<ProjectInvestmentReq> {
    private static readonly pb::MessageParser<ProjectInvestmentReq> _parser = new pb::MessageParser<ProjectInvestmentReq>(() => new ProjectInvestmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectInvestmentReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInvestmentReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInvestmentReq(ProjectInvestmentReq other) : this() {
      projectId_ = other.projectId_;
      stageNumber_ = other.stageNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInvestmentReq Clone() {
      return new ProjectInvestmentReq(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "stageNumber" field.</summary>
    public const int StageNumberFieldNumber = 2;
    private int stageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageNumber {
      get { return stageNumber_; }
      set {
        stageNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectInvestmentReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectInvestmentReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (StageNumber != other.StageNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (StageNumber != 0) hash ^= StageNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (StageNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StageNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (StageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectInvestmentReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.StageNumber != 0) {
        StageNumber = other.StageNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 16: {
            StageNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInvestmentReq : pb::IMessage<UserInvestmentReq> {
    private static readonly pb::MessageParser<UserInvestmentReq> _parser = new pb::MessageParser<UserInvestmentReq>(() => new UserInvestmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInvestmentReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInvestmentReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInvestmentReq(UserInvestmentReq other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInvestmentReq Clone() {
      return new UserInvestmentReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInvestmentReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInvestmentReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInvestmentReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///NoticeNews
  /// </summary>
  public sealed partial class NewNoticeReq : pb::IMessage<NewNoticeReq> {
    private static readonly pb::MessageParser<NewNoticeReq> _parser = new pb::MessageParser<NewNoticeReq>(() => new NewNoticeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewNoticeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewNoticeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewNoticeReq(NewNoticeReq other) : this() {
      projecId_ = other.projecId_;
      title_ = other.title_;
      description_ = other.description_;
      status_ = other.status_;
      expireTime_ = other.expireTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewNoticeReq Clone() {
      return new NewNoticeReq(this);
    }

    /// <summary>Field number for the "projecId" field.</summary>
    public const int ProjecIdFieldNumber = 1;
    private long projecId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjecId {
      get { return projecId_; }
      set {
        projecId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Proto.BoolValue status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 5;
    private string expireTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewNoticeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewNoticeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjecId != other.ProjecId) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (Status != other.Status) return false;
      if (ExpireTime != other.ExpireTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjecId != 0L) hash ^= ProjecId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ExpireTime.Length != 0) hash ^= ExpireTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjecId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjecId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (ExpireTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ExpireTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjecId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjecId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ExpireTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpireTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewNoticeReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjecId != 0L) {
        ProjecId = other.ProjecId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ExpireTime.Length != 0) {
        ExpireTime = other.ExpireTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjecId = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            status_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 42: {
            ExpireTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeInfoReq : pb::IMessage<NoticeInfoReq> {
    private static readonly pb::MessageParser<NoticeInfoReq> _parser = new pb::MessageParser<NoticeInfoReq>(() => new NoticeInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoReq(NoticeInfoReq other) : this() {
      projectId_ = other.projectId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoReq Clone() {
      return new NoticeInfoReq(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Proto.BoolValue status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 16: {
            status_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeUpdateReq : pb::IMessage<NoticeUpdateReq> {
    private static readonly pb::MessageParser<NoticeUpdateReq> _parser = new pb::MessageParser<NoticeUpdateReq>(() => new NoticeUpdateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeUpdateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUpdateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUpdateReq(NoticeUpdateReq other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      description_ = other.description_;
      status_ = other.status_;
      expireTime_ = other.expireTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUpdateReq Clone() {
      return new NoticeUpdateReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Proto.BoolValue status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 5;
    private string expireTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeUpdateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeUpdateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (Status != other.Status) return false;
      if (ExpireTime != other.ExpireTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ExpireTime.Length != 0) hash ^= ExpireTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (ExpireTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ExpireTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ExpireTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpireTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeUpdateReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ExpireTime.Length != 0) {
        ExpireTime = other.ExpireTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            status_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 42: {
            ExpireTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StageCoinFilterReq : pb::IMessage<StageCoinFilterReq> {
    private static readonly pb::MessageParser<StageCoinFilterReq> _parser = new pb::MessageParser<StageCoinFilterReq>(() => new StageCoinFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageCoinFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinFilterReq(StageCoinFilterReq other) : this() {
      stageId_ = other.stageId_;
      coinId_ = other.coinId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinFilterReq Clone() {
      return new StageCoinFilterReq(this);
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 1;
    private long stageId_;
    /// <summary>
    ///Stage Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "coinId" field.</summary>
    public const int CoinIdFieldNumber = 2;
    private string coinId_ = "";
    /// <summary>
    ///Coin Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinId {
      get { return coinId_; }
      set {
        coinId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageCoinFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageCoinFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageId != other.StageId) return false;
      if (CoinId != other.CoinId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StageId != 0L) hash ^= StageId.GetHashCode();
      if (CoinId.Length != 0) hash ^= CoinId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StageId);
      }
      if (CoinId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CoinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StageId);
      }
      if (CoinId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageCoinFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.StageId != 0L) {
        StageId = other.StageId;
      }
      if (other.CoinId.Length != 0) {
        CoinId = other.CoinId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageId = input.ReadInt64();
            break;
          }
          case 18: {
            CoinId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewProjectReply : pb::IMessage<NewProjectReply> {
    private static readonly pb::MessageParser<NewProjectReply> _parser = new pb::MessageParser<NewProjectReply>(() => new NewProjectReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewProjectReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewProjectReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewProjectReply(NewProjectReply other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewProjectReply Clone() {
      return new NewProjectReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewProjectReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewProjectReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewProjectReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectInfoReply : pb::IMessage<ProjectInfoReply> {
    private static readonly pb::MessageParser<ProjectInfoReply> _parser = new pb::MessageParser<ProjectInfoReply>(() => new ProjectInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfoReply(ProjectInfoReply other) : this() {
      id_ = other.id_;
      adminId_ = other.adminId_;
      summary_ = other.summary_;
      targetValue_ = other.targetValue_;
      issueCoina_ = other.issueCoina_;
      issueCoinb_ = other.issueCoinb_;
      stageCount_ = other.stageCount_;
      classify_ = other.classify_;
      whitePaper_ = other.whitePaper_;
      officeSite_ = other.officeSite_;
      communityAddress_ = other.communityAddress_;
      status_ = other.status_;
      prioritySort_ = other.prioritySort_;
      createTime_ = other.createTime_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfoReply Clone() {
      return new ProjectInfoReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "adminId" field.</summary>
    public const int AdminIdFieldNumber = 2;
    private long adminId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AdminId {
      get { return adminId_; }
      set {
        adminId_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 3;
    private string summary_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Summary {
      get { return summary_; }
      set {
        summary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetValue" field.</summary>
    public const int TargetValueFieldNumber = 4;
    private long targetValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetValue {
      get { return targetValue_; }
      set {
        targetValue_ = value;
      }
    }

    /// <summary>Field number for the "issueCoina" field.</summary>
    public const int IssueCoinaFieldNumber = 5;
    private string issueCoina_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IssueCoina {
      get { return issueCoina_; }
      set {
        issueCoina_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issueCoinb" field.</summary>
    public const int IssueCoinbFieldNumber = 6;
    private string issueCoinb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IssueCoinb {
      get { return issueCoinb_; }
      set {
        issueCoinb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stageCount" field.</summary>
    public const int StageCountFieldNumber = 7;
    private int stageCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageCount {
      get { return stageCount_; }
      set {
        stageCount_ = value;
      }
    }

    /// <summary>Field number for the "classify" field.</summary>
    public const int ClassifyFieldNumber = 8;
    private string classify_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Classify {
      get { return classify_; }
      set {
        classify_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "whitePaper" field.</summary>
    public const int WhitePaperFieldNumber = 9;
    private string whitePaper_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WhitePaper {
      get { return whitePaper_; }
      set {
        whitePaper_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "officeSite" field.</summary>
    public const int OfficeSiteFieldNumber = 10;
    private string officeSite_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OfficeSite {
      get { return officeSite_; }
      set {
        officeSite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "communityAddress" field.</summary>
    public const int CommunityAddressFieldNumber = 11;
    private string communityAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommunityAddress {
      get { return communityAddress_; }
      set {
        communityAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 12;
    private global::Proto.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "prioritySort" field.</summary>
    public const int PrioritySortFieldNumber = 13;
    private int prioritySort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 14;
    private string createTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 15;
    private string beginTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 16;
    private string endTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 17;
    private string updateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AdminId != other.AdminId) return false;
      if (Summary != other.Summary) return false;
      if (TargetValue != other.TargetValue) return false;
      if (IssueCoina != other.IssueCoina) return false;
      if (IssueCoinb != other.IssueCoinb) return false;
      if (StageCount != other.StageCount) return false;
      if (Classify != other.Classify) return false;
      if (WhitePaper != other.WhitePaper) return false;
      if (OfficeSite != other.OfficeSite) return false;
      if (CommunityAddress != other.CommunityAddress) return false;
      if (Status != other.Status) return false;
      if (PrioritySort != other.PrioritySort) return false;
      if (CreateTime != other.CreateTime) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (AdminId != 0L) hash ^= AdminId.GetHashCode();
      if (Summary.Length != 0) hash ^= Summary.GetHashCode();
      if (TargetValue != 0L) hash ^= TargetValue.GetHashCode();
      if (IssueCoina.Length != 0) hash ^= IssueCoina.GetHashCode();
      if (IssueCoinb.Length != 0) hash ^= IssueCoinb.GetHashCode();
      if (StageCount != 0) hash ^= StageCount.GetHashCode();
      if (Classify.Length != 0) hash ^= Classify.GetHashCode();
      if (WhitePaper.Length != 0) hash ^= WhitePaper.GetHashCode();
      if (OfficeSite.Length != 0) hash ^= OfficeSite.GetHashCode();
      if (CommunityAddress.Length != 0) hash ^= CommunityAddress.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (BeginTime.Length != 0) hash ^= BeginTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (AdminId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AdminId);
      }
      if (Summary.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Summary);
      }
      if (TargetValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TargetValue);
      }
      if (IssueCoina.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IssueCoina);
      }
      if (IssueCoinb.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IssueCoinb);
      }
      if (StageCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StageCount);
      }
      if (Classify.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Classify);
      }
      if (WhitePaper.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WhitePaper);
      }
      if (OfficeSite.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OfficeSite);
      }
      if (CommunityAddress.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CommunityAddress);
      }
      if (Status != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Status);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PrioritySort);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CreateTime);
      }
      if (BeginTime.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(BeginTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(EndTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (AdminId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AdminId);
      }
      if (Summary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Summary);
      }
      if (TargetValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetValue);
      }
      if (IssueCoina.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueCoina);
      }
      if (IssueCoinb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueCoinb);
      }
      if (StageCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageCount);
      }
      if (Classify.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Classify);
      }
      if (WhitePaper.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WhitePaper);
      }
      if (OfficeSite.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OfficeSite);
      }
      if (CommunityAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommunityAddress);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (BeginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeginTime);
      }
      if (EndTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (UpdateTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.AdminId != 0L) {
        AdminId = other.AdminId;
      }
      if (other.Summary.Length != 0) {
        Summary = other.Summary;
      }
      if (other.TargetValue != 0L) {
        TargetValue = other.TargetValue;
      }
      if (other.IssueCoina.Length != 0) {
        IssueCoina = other.IssueCoina;
      }
      if (other.IssueCoinb.Length != 0) {
        IssueCoinb = other.IssueCoinb;
      }
      if (other.StageCount != 0) {
        StageCount = other.StageCount;
      }
      if (other.Classify.Length != 0) {
        Classify = other.Classify;
      }
      if (other.WhitePaper.Length != 0) {
        WhitePaper = other.WhitePaper;
      }
      if (other.OfficeSite.Length != 0) {
        OfficeSite = other.OfficeSite;
      }
      if (other.CommunityAddress.Length != 0) {
        CommunityAddress = other.CommunityAddress;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.BeginTime.Length != 0) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            AdminId = input.ReadInt64();
            break;
          }
          case 26: {
            Summary = input.ReadString();
            break;
          }
          case 32: {
            TargetValue = input.ReadInt64();
            break;
          }
          case 42: {
            IssueCoina = input.ReadString();
            break;
          }
          case 50: {
            IssueCoinb = input.ReadString();
            break;
          }
          case 56: {
            StageCount = input.ReadInt32();
            break;
          }
          case 66: {
            Classify = input.ReadString();
            break;
          }
          case 74: {
            WhitePaper = input.ReadString();
            break;
          }
          case 82: {
            OfficeSite = input.ReadString();
            break;
          }
          case 90: {
            CommunityAddress = input.ReadString();
            break;
          }
          case 96: {
            status_ = (global::Proto.Status) input.ReadEnum();
            break;
          }
          case 104: {
            PrioritySort = input.ReadInt32();
            break;
          }
          case 114: {
            CreateTime = input.ReadString();
            break;
          }
          case 122: {
            BeginTime = input.ReadString();
            break;
          }
          case 130: {
            EndTime = input.ReadString();
            break;
          }
          case 138: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectListReply : pb::IMessage<ProjectListReply> {
    private static readonly pb::MessageParser<ProjectListReply> _parser = new pb::MessageParser<ProjectListReply>(() => new ProjectListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectListReply(ProjectListReply other) : this() {
      projectList_ = other.projectList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectListReply Clone() {
      return new ProjectListReply(this);
    }

    /// <summary>Field number for the "projectList" field.</summary>
    public const int ProjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.ProjectInfoReply> _repeated_projectList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.ProjectInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.ProjectInfoReply> projectList_ = new pbc::RepeatedField<global::Proto.ProjectInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ProjectInfoReply> ProjectList {
      get { return projectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!projectList_.Equals(other.projectList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= projectList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      projectList_.WriteTo(output, _repeated_projectList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += projectList_.CalculateSize(_repeated_projectList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectListReply other) {
      if (other == null) {
        return;
      }
      projectList_.Add(other.projectList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            projectList_.AddEntriesFrom(input, _repeated_projectList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///项目阶段信息
  /// </summary>
  public sealed partial class StageInfoReply : pb::IMessage<StageInfoReply> {
    private static readonly pb::MessageParser<StageInfoReply> _parser = new pb::MessageParser<StageInfoReply>(() => new StageInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageInfoReply(StageInfoReply other) : this() {
      id_ = other.id_;
      projectId_ = other.projectId_;
      stageNumber_ = other.stageNumber_;
      stageName_ = other.stageName_;
      coinCount_ = other.coinCount_;
      targetValue_ = other.targetValue_;
      softValue_ = other.softValue_;
      discount_ = other.discount_;
      completeValue_ = other.completeValue_;
      stageStatus_ = other.stageStatus_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageInfoReply Clone() {
      return new StageInfoReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "stageNumber" field.</summary>
    public const int StageNumberFieldNumber = 3;
    private int stageNumber_;
    /// <summary>
    ///阶段序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageNumber {
      get { return stageNumber_; }
      set {
        stageNumber_ = value;
      }
    }

    /// <summary>Field number for the "stageName" field.</summary>
    public const int StageNameFieldNumber = 4;
    private string stageName_ = "";
    /// <summary>
    ///阶段名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StageName {
      get { return stageName_; }
      set {
        stageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinCount" field.</summary>
    public const int CoinCountFieldNumber = 5;
    private int coinCount_;
    /// <summary>
    ///募集币种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinCount {
      get { return coinCount_; }
      set {
        coinCount_ = value;
      }
    }

    /// <summary>Field number for the "targetValue" field.</summary>
    public const int TargetValueFieldNumber = 6;
    private long targetValue_;
    /// <summary>
    ///募资总额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetValue {
      get { return targetValue_; }
      set {
        targetValue_ = value;
      }
    }

    /// <summary>Field number for the "softValue" field.</summary>
    public const int SoftValueFieldNumber = 7;
    private long softValue_;
    /// <summary>
    ///募资软顶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoftValue {
      get { return softValue_; }
      set {
        softValue_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 8;
    private string discount_ = "";
    /// <summary>
    ///折扣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Discount {
      get { return discount_; }
      set {
        discount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completeValue" field.</summary>
    public const int CompleteValueFieldNumber = 9;
    private long completeValue_;
    /// <summary>
    ///完成金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompleteValue {
      get { return completeValue_; }
      set {
        completeValue_ = value;
      }
    }

    /// <summary>Field number for the "stageStatus" field.</summary>
    public const int StageStatusFieldNumber = 10;
    private global::Proto.Status stageStatus_ = 0;
    /// <summary>
    ///阶段状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Status StageStatus {
      get { return stageStatus_; }
      set {
        stageStatus_ = value;
      }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 11;
    private string beginTime_ = "";
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 12;
    private string endTime_ = "";
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 13;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 14;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ProjectId != other.ProjectId) return false;
      if (StageNumber != other.StageNumber) return false;
      if (StageName != other.StageName) return false;
      if (CoinCount != other.CoinCount) return false;
      if (TargetValue != other.TargetValue) return false;
      if (SoftValue != other.SoftValue) return false;
      if (Discount != other.Discount) return false;
      if (CompleteValue != other.CompleteValue) return false;
      if (StageStatus != other.StageStatus) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (StageNumber != 0) hash ^= StageNumber.GetHashCode();
      if (StageName.Length != 0) hash ^= StageName.GetHashCode();
      if (CoinCount != 0) hash ^= CoinCount.GetHashCode();
      if (TargetValue != 0L) hash ^= TargetValue.GetHashCode();
      if (SoftValue != 0L) hash ^= SoftValue.GetHashCode();
      if (Discount.Length != 0) hash ^= Discount.GetHashCode();
      if (CompleteValue != 0L) hash ^= CompleteValue.GetHashCode();
      if (StageStatus != 0) hash ^= StageStatus.GetHashCode();
      if (BeginTime.Length != 0) hash ^= BeginTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ProjectId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ProjectId);
      }
      if (StageNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StageNumber);
      }
      if (StageName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StageName);
      }
      if (CoinCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CoinCount);
      }
      if (TargetValue != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TargetValue);
      }
      if (SoftValue != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SoftValue);
      }
      if (Discount.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Discount);
      }
      if (CompleteValue != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CompleteValue);
      }
      if (StageStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) StageStatus);
      }
      if (BeginTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(BeginTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(EndTime);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (StageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageNumber);
      }
      if (StageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageName);
      }
      if (CoinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinCount);
      }
      if (TargetValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetValue);
      }
      if (SoftValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoftValue);
      }
      if (Discount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Discount);
      }
      if (CompleteValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompleteValue);
      }
      if (StageStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StageStatus);
      }
      if (BeginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeginTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.StageNumber != 0) {
        StageNumber = other.StageNumber;
      }
      if (other.StageName.Length != 0) {
        StageName = other.StageName;
      }
      if (other.CoinCount != 0) {
        CoinCount = other.CoinCount;
      }
      if (other.TargetValue != 0L) {
        TargetValue = other.TargetValue;
      }
      if (other.SoftValue != 0L) {
        SoftValue = other.SoftValue;
      }
      if (other.Discount.Length != 0) {
        Discount = other.Discount;
      }
      if (other.CompleteValue != 0L) {
        CompleteValue = other.CompleteValue;
      }
      if (other.StageStatus != 0) {
        StageStatus = other.StageStatus;
      }
      if (other.BeginTime.Length != 0) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 24: {
            StageNumber = input.ReadInt32();
            break;
          }
          case 34: {
            StageName = input.ReadString();
            break;
          }
          case 40: {
            CoinCount = input.ReadInt32();
            break;
          }
          case 48: {
            TargetValue = input.ReadInt64();
            break;
          }
          case 56: {
            SoftValue = input.ReadInt64();
            break;
          }
          case 66: {
            Discount = input.ReadString();
            break;
          }
          case 72: {
            CompleteValue = input.ReadInt64();
            break;
          }
          case 80: {
            stageStatus_ = (global::Proto.Status) input.ReadEnum();
            break;
          }
          case 90: {
            BeginTime = input.ReadString();
            break;
          }
          case 98: {
            EndTime = input.ReadString();
            break;
          }
          case 106: {
            CreateTime = input.ReadString();
            break;
          }
          case 114: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///项目阶段列表信息
  /// </summary>
  public sealed partial class StageListReply : pb::IMessage<StageListReply> {
    private static readonly pb::MessageParser<StageListReply> _parser = new pb::MessageParser<StageListReply>(() => new StageListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageListReply(StageListReply other) : this() {
      stageList_ = other.stageList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageListReply Clone() {
      return new StageListReply(this);
    }

    /// <summary>Field number for the "stageList" field.</summary>
    public const int StageListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.StageInfoReply> _repeated_stageList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.StageInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.StageInfoReply> stageList_ = new pbc::RepeatedField<global::Proto.StageInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.StageInfoReply> StageList {
      get { return stageList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stageList_.Equals(other.stageList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stageList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stageList_.WriteTo(output, _repeated_stageList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stageList_.CalculateSize(_repeated_stageList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageListReply other) {
      if (other == null) {
        return;
      }
      stageList_.Add(other.stageList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stageList_.AddEntriesFrom(input, _repeated_stageList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///募集币种信息
  /// </summary>
  public sealed partial class StageCoinReply : pb::IMessage<StageCoinReply> {
    private static readonly pb::MessageParser<StageCoinReply> _parser = new pb::MessageParser<StageCoinReply>(() => new StageCoinReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageCoinReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinReply(StageCoinReply other) : this() {
      stageId_ = other.stageId_;
      coinId_ = other.coinId_;
      coinName_ = other.coinName_;
      completeValue_ = other.completeValue_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
      price_ = other.price_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinReply Clone() {
      return new StageCoinReply(this);
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 1;
    private long stageId_;
    /// <summary>
    ///Stage Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "coinId" field.</summary>
    public const int CoinIdFieldNumber = 2;
    private string coinId_ = "";
    /// <summary>
    ///Coin Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinId {
      get { return coinId_; }
      set {
        coinId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinName" field.</summary>
    public const int CoinNameFieldNumber = 3;
    private string coinName_ = "";
    /// <summary>
    ///Coin Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinName {
      get { return coinName_; }
      set {
        coinName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "completeValue" field.</summary>
    public const int CompleteValueFieldNumber = 4;
    private long completeValue_;
    /// <summary>
    ///募集金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompleteValue {
      get { return completeValue_; }
      set {
        completeValue_ = value;
      }
    }

    /// <summary>Field number for the "minValue" field.</summary>
    public const int MinValueFieldNumber = 5;
    private long minValue_;
    /// <summary>
    ///投资最小金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 6;
    private long maxValue_;
    /// <summary>
    ///投资最大金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 7;
    private long price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 8;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 9;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageCoinReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageCoinReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageId != other.StageId) return false;
      if (CoinId != other.CoinId) return false;
      if (CoinName != other.CoinName) return false;
      if (CompleteValue != other.CompleteValue) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      if (Price != other.Price) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StageId != 0L) hash ^= StageId.GetHashCode();
      if (CoinId.Length != 0) hash ^= CoinId.GetHashCode();
      if (CoinName.Length != 0) hash ^= CoinName.GetHashCode();
      if (CompleteValue != 0L) hash ^= CompleteValue.GetHashCode();
      if (MinValue != 0L) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0L) hash ^= MaxValue.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StageId);
      }
      if (CoinId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CoinId);
      }
      if (CoinName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CoinName);
      }
      if (CompleteValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CompleteValue);
      }
      if (MinValue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MinValue);
      }
      if (MaxValue != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxValue);
      }
      if (Price != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Price);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StageId);
      }
      if (CoinId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinId);
      }
      if (CoinName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinName);
      }
      if (CompleteValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompleteValue);
      }
      if (MinValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinValue);
      }
      if (MaxValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxValue);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageCoinReply other) {
      if (other == null) {
        return;
      }
      if (other.StageId != 0L) {
        StageId = other.StageId;
      }
      if (other.CoinId.Length != 0) {
        CoinId = other.CoinId;
      }
      if (other.CoinName.Length != 0) {
        CoinName = other.CoinName;
      }
      if (other.CompleteValue != 0L) {
        CompleteValue = other.CompleteValue;
      }
      if (other.MinValue != 0L) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0L) {
        MaxValue = other.MaxValue;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageId = input.ReadInt64();
            break;
          }
          case 18: {
            CoinId = input.ReadString();
            break;
          }
          case 26: {
            CoinName = input.ReadString();
            break;
          }
          case 32: {
            CompleteValue = input.ReadInt64();
            break;
          }
          case 40: {
            MinValue = input.ReadInt64();
            break;
          }
          case 48: {
            MaxValue = input.ReadInt64();
            break;
          }
          case 56: {
            Price = input.ReadInt64();
            break;
          }
          case 66: {
            CreateTime = input.ReadString();
            break;
          }
          case 74: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StageCoinListReply : pb::IMessage<StageCoinListReply> {
    private static readonly pb::MessageParser<StageCoinListReply> _parser = new pb::MessageParser<StageCoinListReply>(() => new StageCoinListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageCoinListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinListReply(StageCoinListReply other) : this() {
      stageCoinList_ = other.stageCoinList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCoinListReply Clone() {
      return new StageCoinListReply(this);
    }

    /// <summary>Field number for the "stageCoinList" field.</summary>
    public const int StageCoinListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.StageCoinReply> _repeated_stageCoinList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.StageCoinReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.StageCoinReply> stageCoinList_ = new pbc::RepeatedField<global::Proto.StageCoinReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.StageCoinReply> StageCoinList {
      get { return stageCoinList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageCoinListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageCoinListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stageCoinList_.Equals(other.stageCoinList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stageCoinList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stageCoinList_.WriteTo(output, _repeated_stageCoinList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stageCoinList_.CalculateSize(_repeated_stageCoinList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageCoinListReply other) {
      if (other == null) {
        return;
      }
      stageCoinList_.Add(other.stageCoinList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stageCoinList_.AddEntriesFrom(input, _repeated_stageCoinList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvestmentReply : pb::IMessage<InvestmentReply> {
    private static readonly pb::MessageParser<InvestmentReply> _parser = new pb::MessageParser<InvestmentReply>(() => new InvestmentReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvestmentReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestmentReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestmentReply(InvestmentReply other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      projectId_ = other.projectId_;
      stageNumber_ = other.stageNumber_;
      investmentValue_ = other.investmentValue_;
      investmentType_ = other.investmentType_;
      walletPath_ = other.walletPath_;
      investmentStatus_ = other.investmentStatus_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestmentReply Clone() {
      return new InvestmentReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 3;
    private long projectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "stageNumber" field.</summary>
    public const int StageNumberFieldNumber = 4;
    private int stageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageNumber {
      get { return stageNumber_; }
      set {
        stageNumber_ = value;
      }
    }

    /// <summary>Field number for the "investmentValue" field.</summary>
    public const int InvestmentValueFieldNumber = 5;
    private int investmentValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvestmentValue {
      get { return investmentValue_; }
      set {
        investmentValue_ = value;
      }
    }

    /// <summary>Field number for the "investmentType" field.</summary>
    public const int InvestmentTypeFieldNumber = 6;
    private string investmentType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvestmentType {
      get { return investmentType_; }
      set {
        investmentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "walletPath" field.</summary>
    public const int WalletPathFieldNumber = 7;
    private string walletPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WalletPath {
      get { return walletPath_; }
      set {
        walletPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "investmentStatus" field.</summary>
    public const int InvestmentStatusFieldNumber = 8;
    private global::Proto.BoolValue investmentStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue InvestmentStatus {
      get { return investmentStatus_; }
      set {
        investmentStatus_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private string createTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 10;
    private string updateTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvestmentReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvestmentReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (ProjectId != other.ProjectId) return false;
      if (StageNumber != other.StageNumber) return false;
      if (InvestmentValue != other.InvestmentValue) return false;
      if (InvestmentType != other.InvestmentType) return false;
      if (WalletPath != other.WalletPath) return false;
      if (InvestmentStatus != other.InvestmentStatus) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (StageNumber != 0) hash ^= StageNumber.GetHashCode();
      if (InvestmentValue != 0) hash ^= InvestmentValue.GetHashCode();
      if (InvestmentType.Length != 0) hash ^= InvestmentType.GetHashCode();
      if (WalletPath.Length != 0) hash ^= WalletPath.GetHashCode();
      if (InvestmentStatus != 0) hash ^= InvestmentStatus.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (ProjectId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ProjectId);
      }
      if (StageNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StageNumber);
      }
      if (InvestmentValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InvestmentValue);
      }
      if (InvestmentType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(InvestmentType);
      }
      if (WalletPath.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WalletPath);
      }
      if (InvestmentStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) InvestmentStatus);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (StageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageNumber);
      }
      if (InvestmentValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvestmentValue);
      }
      if (InvestmentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvestmentType);
      }
      if (WalletPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WalletPath);
      }
      if (InvestmentStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InvestmentStatus);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvestmentReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.StageNumber != 0) {
        StageNumber = other.StageNumber;
      }
      if (other.InvestmentValue != 0) {
        InvestmentValue = other.InvestmentValue;
      }
      if (other.InvestmentType.Length != 0) {
        InvestmentType = other.InvestmentType;
      }
      if (other.WalletPath.Length != 0) {
        WalletPath = other.WalletPath;
      }
      if (other.InvestmentStatus != 0) {
        InvestmentStatus = other.InvestmentStatus;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 32: {
            StageNumber = input.ReadInt32();
            break;
          }
          case 40: {
            InvestmentValue = input.ReadInt32();
            break;
          }
          case 50: {
            InvestmentType = input.ReadString();
            break;
          }
          case 58: {
            WalletPath = input.ReadString();
            break;
          }
          case 64: {
            investmentStatus_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 74: {
            CreateTime = input.ReadString();
            break;
          }
          case 82: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvestmentListReply : pb::IMessage<InvestmentListReply> {
    private static readonly pb::MessageParser<InvestmentListReply> _parser = new pb::MessageParser<InvestmentListReply>(() => new InvestmentListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvestmentListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestmentListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestmentListReply(InvestmentListReply other) : this() {
      investmentList_ = other.investmentList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvestmentListReply Clone() {
      return new InvestmentListReply(this);
    }

    /// <summary>Field number for the "investmentList" field.</summary>
    public const int InvestmentListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.InvestmentReply> _repeated_investmentList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.InvestmentReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.InvestmentReply> investmentList_ = new pbc::RepeatedField<global::Proto.InvestmentReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.InvestmentReply> InvestmentList {
      get { return investmentList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvestmentListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvestmentListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!investmentList_.Equals(other.investmentList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= investmentList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      investmentList_.WriteTo(output, _repeated_investmentList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += investmentList_.CalculateSize(_repeated_investmentList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvestmentListReply other) {
      if (other == null) {
        return;
      }
      investmentList_.Add(other.investmentList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            investmentList_.AddEntriesFrom(input, _repeated_investmentList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///项目描述信息
  /// </summary>
  public sealed partial class ProjectDescriptionInfoReply : pb::IMessage<ProjectDescriptionInfoReply> {
    private static readonly pb::MessageParser<ProjectDescriptionInfoReply> _parser = new pb::MessageParser<ProjectDescriptionInfoReply>(() => new ProjectDescriptionInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectDescriptionInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescriptionInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescriptionInfoReply(ProjectDescriptionInfoReply other) : this() {
      projectId_ = other.projectId_;
      title_ = other.title_;
      projectText_ = other.projectText_;
      enable_ = other.enable_;
      prioritySort_ = other.prioritySort_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescriptionInfoReply Clone() {
      return new ProjectDescriptionInfoReply(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    ///段落标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectText" field.</summary>
    public const int ProjectTextFieldNumber = 3;
    private string projectText_ = "";
    /// <summary>
    ///段落内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectText {
      get { return projectText_; }
      set {
        projectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 4;
    private global::Proto.BoolValue enable_ = 0;
    /// <summary>
    ///是否删除，不显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "prioritySort" field.</summary>
    public const int PrioritySortFieldNumber = 5;
    private int prioritySort_;
    /// <summary>
    ///段落排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectDescriptionInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectDescriptionInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Title != other.Title) return false;
      if (ProjectText != other.ProjectText) return false;
      if (Enable != other.Enable) return false;
      if (PrioritySort != other.PrioritySort) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (ProjectText.Length != 0) hash ^= ProjectText.GetHashCode();
      if (Enable != 0) hash ^= Enable.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (ProjectText.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProjectText);
      }
      if (Enable != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Enable);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PrioritySort);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (ProjectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectText);
      }
      if (Enable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Enable);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectDescriptionInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.ProjectText.Length != 0) {
        ProjectText = other.ProjectText;
      }
      if (other.Enable != 0) {
        Enable = other.Enable;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            ProjectText = input.ReadString();
            break;
          }
          case 32: {
            enable_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 40: {
            PrioritySort = input.ReadInt32();
            break;
          }
          case 50: {
            CreateTime = input.ReadString();
            break;
          }
          case 58: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectDescriptionListReply : pb::IMessage<ProjectDescriptionListReply> {
    private static readonly pb::MessageParser<ProjectDescriptionListReply> _parser = new pb::MessageParser<ProjectDescriptionListReply>(() => new ProjectDescriptionListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectDescriptionListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescriptionListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescriptionListReply(ProjectDescriptionListReply other) : this() {
      projectDescriptionList_ = other.projectDescriptionList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescriptionListReply Clone() {
      return new ProjectDescriptionListReply(this);
    }

    /// <summary>Field number for the "projectDescriptionList" field.</summary>
    public const int ProjectDescriptionListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.ProjectDescriptionInfoReply> _repeated_projectDescriptionList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.ProjectDescriptionInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.ProjectDescriptionInfoReply> projectDescriptionList_ = new pbc::RepeatedField<global::Proto.ProjectDescriptionInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ProjectDescriptionInfoReply> ProjectDescriptionList {
      get { return projectDescriptionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectDescriptionListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectDescriptionListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!projectDescriptionList_.Equals(other.projectDescriptionList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= projectDescriptionList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      projectDescriptionList_.WriteTo(output, _repeated_projectDescriptionList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += projectDescriptionList_.CalculateSize(_repeated_projectDescriptionList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectDescriptionListReply other) {
      if (other == null) {
        return;
      }
      projectDescriptionList_.Add(other.projectDescriptionList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            projectDescriptionList_.AddEntriesFrom(input, _repeated_projectDescriptionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///项目成员信息
  /// </summary>
  public sealed partial class MemeberReply : pb::IMessage<MemeberReply> {
    private static readonly pb::MessageParser<MemeberReply> _parser = new pb::MessageParser<MemeberReply>(() => new MemeberReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemeberReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemeberReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemeberReply(MemeberReply other) : this() {
      id_ = other.id_;
      projectId_ = other.projectId_;
      name_ = other.name_;
      position_ = other.position_;
      description_ = other.description_;
      memberType_ = other.memberType_;
      imageUrl_ = other.imageUrl_;
      prioritySort_ = other.prioritySort_;
      joinTime_ = other.joinTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemeberReply Clone() {
      return new MemeberReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///成员姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private string position_ = "";
    /// <summary>
    ///成员职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///成员信息描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memberType" field.</summary>
    public const int MemberTypeFieldNumber = 6;
    private global::Proto.MemberType memberType_ = 0;
    /// <summary>
    ///成员类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MemberType MemberType {
      get { return memberType_; }
      set {
        memberType_ = value;
      }
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 7;
    private string imageUrl_ = "";
    /// <summary>
    ///成员头像Url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prioritySort" field.</summary>
    public const int PrioritySortFieldNumber = 8;
    private int prioritySort_;
    /// <summary>
    ///成员排序优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    /// <summary>Field number for the "joinTime" field.</summary>
    public const int JoinTimeFieldNumber = 9;
    private string joinTime_ = "";
    /// <summary>
    ///成员加入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JoinTime {
      get { return joinTime_; }
      set {
        joinTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemeberReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemeberReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ProjectId != other.ProjectId) return false;
      if (Name != other.Name) return false;
      if (Position != other.Position) return false;
      if (Description != other.Description) return false;
      if (MemberType != other.MemberType) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (PrioritySort != other.PrioritySort) return false;
      if (JoinTime != other.JoinTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Position.Length != 0) hash ^= Position.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (MemberType != 0) hash ^= MemberType.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      if (JoinTime.Length != 0) hash ^= JoinTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ProjectId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ProjectId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Position);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (MemberType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MemberType);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ImageUrl);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PrioritySort);
      }
      if (JoinTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(JoinTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Position);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (MemberType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MemberType);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      if (JoinTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JoinTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemeberReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Position.Length != 0) {
        Position = other.Position;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.MemberType != 0) {
        MemberType = other.MemberType;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
      if (other.JoinTime.Length != 0) {
        JoinTime = other.JoinTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Position = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 48: {
            memberType_ = (global::Proto.MemberType) input.ReadEnum();
            break;
          }
          case 58: {
            ImageUrl = input.ReadString();
            break;
          }
          case 64: {
            PrioritySort = input.ReadInt32();
            break;
          }
          case 74: {
            JoinTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberListReply : pb::IMessage<MemberListReply> {
    private static readonly pb::MessageParser<MemberListReply> _parser = new pb::MessageParser<MemberListReply>(() => new MemberListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListReply(MemberListReply other) : this() {
      memberList_ = other.memberList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListReply Clone() {
      return new MemberListReply(this);
    }

    /// <summary>Field number for the "memberList" field.</summary>
    public const int MemberListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.MemeberReply> _repeated_memberList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.MemeberReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.MemeberReply> memberList_ = new pbc::RepeatedField<global::Proto.MemeberReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.MemeberReply> MemberList {
      get { return memberList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!memberList_.Equals(other.memberList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= memberList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      memberList_.WriteTo(output, _repeated_memberList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += memberList_.CalculateSize(_repeated_memberList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberListReply other) {
      if (other == null) {
        return;
      }
      memberList_.Add(other.memberList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            memberList_.AddEntriesFrom(input, _repeated_memberList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告信息
  /// </summary>
  public sealed partial class NoticeInfoReply : pb::IMessage<NoticeInfoReply> {
    private static readonly pb::MessageParser<NoticeInfoReply> _parser = new pb::MessageParser<NoticeInfoReply>(() => new NoticeInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoReply(NoticeInfoReply other) : this() {
      noticeId_ = other.noticeId_;
      projectId_ = other.projectId_;
      title_ = other.title_;
      briefIntroduction_ = other.briefIntroduction_;
      description_ = other.description_;
      noticeType_ = other.noticeType_;
      sendType_ = other.sendType_;
      status_ = other.status_;
      reason_ = other.reason_;
      createTime_ = other.createTime_;
      expireTime_ = other.expireTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoReply Clone() {
      return new NoticeInfoReply(this);
    }

    /// <summary>Field number for the "noticeId" field.</summary>
    public const int NoticeIdFieldNumber = 1;
    private long noticeId_;
    /// <summary>
    ///公告Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NoticeId {
      get { return noticeId_; }
      set {
        noticeId_ = value;
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    ///公告名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "briefIntroduction" field.</summary>
    public const int BriefIntroductionFieldNumber = 4;
    private string briefIntroduction_ = "";
    /// <summary>
    ///公告简要介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BriefIntroduction {
      get { return briefIntroduction_; }
      set {
        briefIntroduction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///公告详细描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "noticeType" field.</summary>
    public const int NoticeTypeFieldNumber = 6;
    private global::Proto.NoticeType noticeType_ = 0;
    /// <summary>
    ///公告类型，普通公告或投票类型公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeType NoticeType {
      get { return noticeType_; }
      set {
        noticeType_ = value;
      }
    }

    /// <summary>Field number for the "sendType" field.</summary>
    public const int SendTypeFieldNumber = 7;
    private global::Proto.NoticeSendType sendType_ = 0;
    /// <summary>
    ///公告发送类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeSendType SendType {
      get { return sendType_; }
      set {
        sendType_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::Proto.NoticeStateType status_ = 0;
    /// <summary>
    ///公告审核状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeStateType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 9;
    private string reason_ = "";
    /// <summary>
    ///公告审核原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 10;
    private string createTime_ = "";
    /// <summary>
    ///公告创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 11;
    private string expireTime_ = "";
    /// <summary>
    ///公告过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 12;
    private string updateTime_ = "";
    /// <summary>
    ///公告更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoticeId != other.NoticeId) return false;
      if (ProjectId != other.ProjectId) return false;
      if (Title != other.Title) return false;
      if (BriefIntroduction != other.BriefIntroduction) return false;
      if (Description != other.Description) return false;
      if (NoticeType != other.NoticeType) return false;
      if (SendType != other.SendType) return false;
      if (Status != other.Status) return false;
      if (Reason != other.Reason) return false;
      if (CreateTime != other.CreateTime) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoticeId != 0L) hash ^= NoticeId.GetHashCode();
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (BriefIntroduction.Length != 0) hash ^= BriefIntroduction.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (NoticeType != 0) hash ^= NoticeType.GetHashCode();
      if (SendType != 0) hash ^= SendType.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (ExpireTime.Length != 0) hash ^= ExpireTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoticeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NoticeId);
      }
      if (ProjectId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ProjectId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (BriefIntroduction.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BriefIntroduction);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (NoticeType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) NoticeType);
      }
      if (SendType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) SendType);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Status);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Reason);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CreateTime);
      }
      if (ExpireTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExpireTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoticeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeId);
      }
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (BriefIntroduction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BriefIntroduction);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (NoticeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NoticeType);
      }
      if (SendType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SendType);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (ExpireTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpireTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.NoticeId != 0L) {
        NoticeId = other.NoticeId;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.BriefIntroduction.Length != 0) {
        BriefIntroduction = other.BriefIntroduction;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.NoticeType != 0) {
        NoticeType = other.NoticeType;
      }
      if (other.SendType != 0) {
        SendType = other.SendType;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.ExpireTime.Length != 0) {
        ExpireTime = other.ExpireTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NoticeId = input.ReadInt64();
            break;
          }
          case 16: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            BriefIntroduction = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 48: {
            noticeType_ = (global::Proto.NoticeType) input.ReadEnum();
            break;
          }
          case 56: {
            sendType_ = (global::Proto.NoticeSendType) input.ReadEnum();
            break;
          }
          case 64: {
            status_ = (global::Proto.NoticeStateType) input.ReadEnum();
            break;
          }
          case 74: {
            Reason = input.ReadString();
            break;
          }
          case 82: {
            CreateTime = input.ReadString();
            break;
          }
          case 90: {
            ExpireTime = input.ReadString();
            break;
          }
          case 98: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeInfoListReply : pb::IMessage<NoticeInfoListReply> {
    private static readonly pb::MessageParser<NoticeInfoListReply> _parser = new pb::MessageParser<NoticeInfoListReply>(() => new NoticeInfoListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeInfoListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoListReply(NoticeInfoListReply other) : this() {
      noticeList_ = other.noticeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeInfoListReply Clone() {
      return new NoticeInfoListReply(this);
    }

    /// <summary>Field number for the "noticeList" field.</summary>
    public const int NoticeListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.NoticeInfoReply> _repeated_noticeList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.NoticeInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.NoticeInfoReply> noticeList_ = new pbc::RepeatedField<global::Proto.NoticeInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.NoticeInfoReply> NoticeList {
      get { return noticeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeInfoListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeInfoListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!noticeList_.Equals(other.noticeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= noticeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      noticeList_.WriteTo(output, _repeated_noticeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += noticeList_.CalculateSize(_repeated_noticeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeInfoListReply other) {
      if (other == null) {
        return;
      }
      noticeList_.Add(other.noticeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            noticeList_.AddEntriesFrom(input, _repeated_noticeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提案投票信息
  /// </summary>
  public sealed partial class NoticeVoteReply : pb::IMessage<NoticeVoteReply> {
    private static readonly pb::MessageParser<NoticeVoteReply> _parser = new pb::MessageParser<NoticeVoteReply>(() => new NoticeVoteReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeVoteReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeVoteReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeVoteReply(NoticeVoteReply other) : this() {
      noticeId_ = other.noticeId_;
      approveVote_ = other.approveVote_;
      disapproveVote_ = other.disapproveVote_;
      abstentionVote_ = other.abstentionVote_;
      platformVoteMax_ = other.platformVoteMax_;
      platformVoteVolumn_ = other.platformVoteVolumn_;
      platformVoteType_ = other.platformVoteType_;
      platformVoteReason_ = other.platformVoteReason_;
      platformVoteTime_ = other.platformVoteTime_;
      voteResult_ = other.voteResult_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      totalVotes_ = other.totalVotes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeVoteReply Clone() {
      return new NoticeVoteReply(this);
    }

    /// <summary>Field number for the "noticeId" field.</summary>
    public const int NoticeIdFieldNumber = 1;
    private long noticeId_;
    /// <summary>
    ///提案Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NoticeId {
      get { return noticeId_; }
      set {
        noticeId_ = value;
      }
    }

    /// <summary>Field number for the "approveVote" field.</summary>
    public const int ApproveVoteFieldNumber = 2;
    private long approveVote_;
    /// <summary>
    ///赞成票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApproveVote {
      get { return approveVote_; }
      set {
        approveVote_ = value;
      }
    }

    /// <summary>Field number for the "disapproveVote" field.</summary>
    public const int DisapproveVoteFieldNumber = 3;
    private long disapproveVote_;
    /// <summary>
    ///反对票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DisapproveVote {
      get { return disapproveVote_; }
      set {
        disapproveVote_ = value;
      }
    }

    /// <summary>Field number for the "abstentionVote" field.</summary>
    public const int AbstentionVoteFieldNumber = 4;
    private long abstentionVote_;
    /// <summary>
    ///弃权票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AbstentionVote {
      get { return abstentionVote_; }
      set {
        abstentionVote_ = value;
      }
    }

    /// <summary>Field number for the "platformVoteMax" field.</summary>
    public const int PlatformVoteMaxFieldNumber = 5;
    private long platformVoteMax_;
    /// <summary>
    ///平台最高投票额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlatformVoteMax {
      get { return platformVoteMax_; }
      set {
        platformVoteMax_ = value;
      }
    }

    /// <summary>Field number for the "platformVoteVolumn" field.</summary>
    public const int PlatformVoteVolumnFieldNumber = 6;
    private long platformVoteVolumn_;
    /// <summary>
    ///平台实际投票额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlatformVoteVolumn {
      get { return platformVoteVolumn_; }
      set {
        platformVoteVolumn_ = value;
      }
    }

    /// <summary>Field number for the "platformVoteType" field.</summary>
    public const int PlatformVoteTypeFieldNumber = 7;
    private global::Proto.VoteResultType platformVoteType_ = 0;
    /// <summary>
    ///平台投票类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.VoteResultType PlatformVoteType {
      get { return platformVoteType_; }
      set {
        platformVoteType_ = value;
      }
    }

    /// <summary>Field number for the "platformVoteReason" field.</summary>
    public const int PlatformVoteReasonFieldNumber = 8;
    private string platformVoteReason_ = "";
    /// <summary>
    ///平台投票原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformVoteReason {
      get { return platformVoteReason_; }
      set {
        platformVoteReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platformVoteTime" field.</summary>
    public const int PlatformVoteTimeFieldNumber = 9;
    private string platformVoteTime_ = "";
    /// <summary>
    ///平台投票时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformVoteTime {
      get { return platformVoteTime_; }
      set {
        platformVoteTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voteResult" field.</summary>
    public const int VoteResultFieldNumber = 10;
    private global::Proto.NoticeResultType voteResult_ = 0;
    /// <summary>
    ///平台投票结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeResultType VoteResult {
      get { return voteResult_; }
      set {
        voteResult_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 11;
    private string createTime_ = "";
    /// <summary>
    ///投票创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 12;
    private string updateTime_ = "";
    /// <summary>
    ///投票更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 13;
    private string beginTime_ = "";
    /// <summary>
    ///投票开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 14;
    private string endTime_ = "";
    /// <summary>
    ///投票结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalVotes" field.</summary>
    public const int TotalVotesFieldNumber = 15;
    private long totalVotes_;
    /// <summary>
    ///提案总票数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalVotes {
      get { return totalVotes_; }
      set {
        totalVotes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeVoteReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeVoteReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoticeId != other.NoticeId) return false;
      if (ApproveVote != other.ApproveVote) return false;
      if (DisapproveVote != other.DisapproveVote) return false;
      if (AbstentionVote != other.AbstentionVote) return false;
      if (PlatformVoteMax != other.PlatformVoteMax) return false;
      if (PlatformVoteVolumn != other.PlatformVoteVolumn) return false;
      if (PlatformVoteType != other.PlatformVoteType) return false;
      if (PlatformVoteReason != other.PlatformVoteReason) return false;
      if (PlatformVoteTime != other.PlatformVoteTime) return false;
      if (VoteResult != other.VoteResult) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (TotalVotes != other.TotalVotes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoticeId != 0L) hash ^= NoticeId.GetHashCode();
      if (ApproveVote != 0L) hash ^= ApproveVote.GetHashCode();
      if (DisapproveVote != 0L) hash ^= DisapproveVote.GetHashCode();
      if (AbstentionVote != 0L) hash ^= AbstentionVote.GetHashCode();
      if (PlatformVoteMax != 0L) hash ^= PlatformVoteMax.GetHashCode();
      if (PlatformVoteVolumn != 0L) hash ^= PlatformVoteVolumn.GetHashCode();
      if (PlatformVoteType != 0) hash ^= PlatformVoteType.GetHashCode();
      if (PlatformVoteReason.Length != 0) hash ^= PlatformVoteReason.GetHashCode();
      if (PlatformVoteTime.Length != 0) hash ^= PlatformVoteTime.GetHashCode();
      if (VoteResult != 0) hash ^= VoteResult.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      if (BeginTime.Length != 0) hash ^= BeginTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (TotalVotes != 0L) hash ^= TotalVotes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoticeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NoticeId);
      }
      if (ApproveVote != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ApproveVote);
      }
      if (DisapproveVote != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DisapproveVote);
      }
      if (AbstentionVote != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AbstentionVote);
      }
      if (PlatformVoteMax != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PlatformVoteMax);
      }
      if (PlatformVoteVolumn != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PlatformVoteVolumn);
      }
      if (PlatformVoteType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PlatformVoteType);
      }
      if (PlatformVoteReason.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PlatformVoteReason);
      }
      if (PlatformVoteTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PlatformVoteTime);
      }
      if (VoteResult != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) VoteResult);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UpdateTime);
      }
      if (BeginTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(BeginTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(EndTime);
      }
      if (TotalVotes != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(TotalVotes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoticeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeId);
      }
      if (ApproveVote != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApproveVote);
      }
      if (DisapproveVote != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DisapproveVote);
      }
      if (AbstentionVote != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AbstentionVote);
      }
      if (PlatformVoteMax != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlatformVoteMax);
      }
      if (PlatformVoteVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlatformVoteVolumn);
      }
      if (PlatformVoteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlatformVoteType);
      }
      if (PlatformVoteReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformVoteReason);
      }
      if (PlatformVoteTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformVoteTime);
      }
      if (VoteResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VoteResult);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      if (BeginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeginTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (TotalVotes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalVotes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeVoteReply other) {
      if (other == null) {
        return;
      }
      if (other.NoticeId != 0L) {
        NoticeId = other.NoticeId;
      }
      if (other.ApproveVote != 0L) {
        ApproveVote = other.ApproveVote;
      }
      if (other.DisapproveVote != 0L) {
        DisapproveVote = other.DisapproveVote;
      }
      if (other.AbstentionVote != 0L) {
        AbstentionVote = other.AbstentionVote;
      }
      if (other.PlatformVoteMax != 0L) {
        PlatformVoteMax = other.PlatformVoteMax;
      }
      if (other.PlatformVoteVolumn != 0L) {
        PlatformVoteVolumn = other.PlatformVoteVolumn;
      }
      if (other.PlatformVoteType != 0) {
        PlatformVoteType = other.PlatformVoteType;
      }
      if (other.PlatformVoteReason.Length != 0) {
        PlatformVoteReason = other.PlatformVoteReason;
      }
      if (other.PlatformVoteTime.Length != 0) {
        PlatformVoteTime = other.PlatformVoteTime;
      }
      if (other.VoteResult != 0) {
        VoteResult = other.VoteResult;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
      if (other.BeginTime.Length != 0) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.TotalVotes != 0L) {
        TotalVotes = other.TotalVotes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NoticeId = input.ReadInt64();
            break;
          }
          case 16: {
            ApproveVote = input.ReadInt64();
            break;
          }
          case 24: {
            DisapproveVote = input.ReadInt64();
            break;
          }
          case 32: {
            AbstentionVote = input.ReadInt64();
            break;
          }
          case 40: {
            PlatformVoteMax = input.ReadInt64();
            break;
          }
          case 48: {
            PlatformVoteVolumn = input.ReadInt64();
            break;
          }
          case 56: {
            platformVoteType_ = (global::Proto.VoteResultType) input.ReadEnum();
            break;
          }
          case 66: {
            PlatformVoteReason = input.ReadString();
            break;
          }
          case 74: {
            PlatformVoteTime = input.ReadString();
            break;
          }
          case 80: {
            voteResult_ = (global::Proto.NoticeResultType) input.ReadEnum();
            break;
          }
          case 90: {
            CreateTime = input.ReadString();
            break;
          }
          case 98: {
            UpdateTime = input.ReadString();
            break;
          }
          case 106: {
            BeginTime = input.ReadString();
            break;
          }
          case 114: {
            EndTime = input.ReadString();
            break;
          }
          case 120: {
            TotalVotes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提案用户投票详情
  /// </summary>
  public sealed partial class VoteDetailsReply : pb::IMessage<VoteDetailsReply> {
    private static readonly pb::MessageParser<VoteDetailsReply> _parser = new pb::MessageParser<VoteDetailsReply>(() => new VoteDetailsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteDetailsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteDetailsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteDetailsReply(VoteDetailsReply other) : this() {
      noticeId_ = other.noticeId_;
      userId_ = other.userId_;
      voteType_ = other.voteType_;
      voteVolumn_ = other.voteVolumn_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteDetailsReply Clone() {
      return new VoteDetailsReply(this);
    }

    /// <summary>Field number for the "noticeId" field.</summary>
    public const int NoticeIdFieldNumber = 1;
    private long noticeId_;
    /// <summary>
    ///公告Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NoticeId {
      get { return noticeId_; }
      set {
        noticeId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "voteType" field.</summary>
    public const int VoteTypeFieldNumber = 3;
    private global::Proto.VoteResultType voteType_ = 0;
    /// <summary>
    ///投票类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.VoteResultType VoteType {
      get { return voteType_; }
      set {
        voteType_ = value;
      }
    }

    /// <summary>Field number for the "voteVolumn" field.</summary>
    public const int VoteVolumnFieldNumber = 4;
    private long voteVolumn_;
    /// <summary>
    ///投票数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VoteVolumn {
      get { return voteVolumn_; }
      set {
        voteVolumn_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteDetailsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteDetailsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoticeId != other.NoticeId) return false;
      if (UserId != other.UserId) return false;
      if (VoteType != other.VoteType) return false;
      if (VoteVolumn != other.VoteVolumn) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoticeId != 0L) hash ^= NoticeId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (VoteType != 0) hash ^= VoteType.GetHashCode();
      if (VoteVolumn != 0L) hash ^= VoteVolumn.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoticeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NoticeId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (VoteType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VoteType);
      }
      if (VoteVolumn != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(VoteVolumn);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoticeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (VoteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VoteType);
      }
      if (VoteVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VoteVolumn);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteDetailsReply other) {
      if (other == null) {
        return;
      }
      if (other.NoticeId != 0L) {
        NoticeId = other.NoticeId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.VoteType != 0) {
        VoteType = other.VoteType;
      }
      if (other.VoteVolumn != 0L) {
        VoteVolumn = other.VoteVolumn;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NoticeId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            voteType_ = (global::Proto.VoteResultType) input.ReadEnum();
            break;
          }
          case 32: {
            VoteVolumn = input.ReadInt64();
            break;
          }
          case 42: {
            CreateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VoteDetailsListReply : pb::IMessage<VoteDetailsListReply> {
    private static readonly pb::MessageParser<VoteDetailsListReply> _parser = new pb::MessageParser<VoteDetailsListReply>(() => new VoteDetailsListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteDetailsListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteDetailsListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteDetailsListReply(VoteDetailsListReply other) : this() {
      voteDetailsList_ = other.voteDetailsList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteDetailsListReply Clone() {
      return new VoteDetailsListReply(this);
    }

    /// <summary>Field number for the "voteDetailsList" field.</summary>
    public const int VoteDetailsListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.VoteDetailsReply> _repeated_voteDetailsList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.VoteDetailsReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.VoteDetailsReply> voteDetailsList_ = new pbc::RepeatedField<global::Proto.VoteDetailsReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.VoteDetailsReply> VoteDetailsList {
      get { return voteDetailsList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteDetailsListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteDetailsListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!voteDetailsList_.Equals(other.voteDetailsList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= voteDetailsList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      voteDetailsList_.WriteTo(output, _repeated_voteDetailsList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += voteDetailsList_.CalculateSize(_repeated_voteDetailsList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteDetailsListReply other) {
      if (other == null) {
        return;
      }
      voteDetailsList_.Add(other.voteDetailsList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            voteDetailsList_.AddEntriesFrom(input, _repeated_voteDetailsList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///媒体信息
  /// </summary>
  public sealed partial class MediaInfoReply : pb::IMessage<MediaInfoReply> {
    private static readonly pb::MessageParser<MediaInfoReply> _parser = new pb::MessageParser<MediaInfoReply>(() => new MediaInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaInfoReply(MediaInfoReply other) : this() {
      projectId_ = other.projectId_;
      title_ = other.title_;
      address_ = other.address_;
      type_ = other.type_;
      enable_ = other.enable_;
      prioritySort_ = other.prioritySort_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaInfoReply Clone() {
      return new MediaInfoReply(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    ///媒体标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private string address_ = "";
    /// <summary>
    ///媒体Url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Proto.MediaType type_ = 0;
    /// <summary>
    ///媒体类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MediaType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 5;
    private global::Proto.BoolValue enable_ = 0;
    /// <summary>
    ///是否显示，删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "prioritySort" field.</summary>
    public const int PrioritySortFieldNumber = 6;
    private int prioritySort_;
    /// <summary>
    ///排序优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Title != other.Title) return false;
      if (Address != other.Address) return false;
      if (Type != other.Type) return false;
      if (Enable != other.Enable) return false;
      if (PrioritySort != other.PrioritySort) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Enable != 0) hash ^= Enable.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Enable != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Enable);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PrioritySort);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Enable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Enable);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Enable != 0) {
        Enable = other.Enable;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::Proto.MediaType) input.ReadEnum();
            break;
          }
          case 40: {
            enable_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 48: {
            PrioritySort = input.ReadInt32();
            break;
          }
          case 58: {
            CreateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MediaListReply : pb::IMessage<MediaListReply> {
    private static readonly pb::MessageParser<MediaListReply> _parser = new pb::MessageParser<MediaListReply>(() => new MediaListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaListReply(MediaListReply other) : this() {
      mediaList_ = other.mediaList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaListReply Clone() {
      return new MediaListReply(this);
    }

    /// <summary>Field number for the "mediaList" field.</summary>
    public const int MediaListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.MediaInfoReply> _repeated_mediaList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.MediaInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.MediaInfoReply> mediaList_ = new pbc::RepeatedField<global::Proto.MediaInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.MediaInfoReply> MediaList {
      get { return mediaList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mediaList_.Equals(other.mediaList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mediaList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mediaList_.WriteTo(output, _repeated_mediaList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mediaList_.CalculateSize(_repeated_mediaList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaListReply other) {
      if (other == null) {
        return;
      }
      mediaList_.Add(other.mediaList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mediaList_.AddEntriesFrom(input, _repeated_mediaList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推荐项目
  /// </summary>
  public sealed partial class RecommendProjectReply : pb::IMessage<RecommendProjectReply> {
    private static readonly pb::MessageParser<RecommendProjectReply> _parser = new pb::MessageParser<RecommendProjectReply>(() => new RecommendProjectReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecommendProjectReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendProjectReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendProjectReply(RecommendProjectReply other) : this() {
      projectId_ = other.projectId_;
      imageUrl_ = other.imageUrl_;
      summary_ = other.summary_;
      description_ = other.description_;
      projectStatus_ = other.projectStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendProjectReply Clone() {
      return new RecommendProjectReply(this);
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private long projectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 2;
    private string imageUrl_ = "";
    /// <summary>
    ///项目图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 3;
    private string summary_ = "";
    /// <summary>
    ///项目名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Summary {
      get { return summary_; }
      set {
        summary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    ///项目描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectStatus" field.</summary>
    public const int ProjectStatusFieldNumber = 5;
    private int projectStatus_;
    /// <summary>
    ///项目状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProjectStatus {
      get { return projectStatus_; }
      set {
        projectStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecommendProjectReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecommendProjectReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (Summary != other.Summary) return false;
      if (Description != other.Description) return false;
      if (ProjectStatus != other.ProjectStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (Summary.Length != 0) hash ^= Summary.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ProjectStatus != 0) hash ^= ProjectStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProjectId);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImageUrl);
      }
      if (Summary.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Summary);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (ProjectStatus != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ProjectStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (Summary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Summary);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ProjectStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecommendProjectReply other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.Summary.Length != 0) {
        Summary = other.Summary;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ProjectStatus != 0) {
        ProjectStatus = other.ProjectStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 18: {
            ImageUrl = input.ReadString();
            break;
          }
          case 26: {
            Summary = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            ProjectStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecommendProjectListReply : pb::IMessage<RecommendProjectListReply> {
    private static readonly pb::MessageParser<RecommendProjectListReply> _parser = new pb::MessageParser<RecommendProjectListReply>(() => new RecommendProjectListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecommendProjectListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendProjectListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendProjectListReply(RecommendProjectListReply other) : this() {
      projectList_ = other.projectList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecommendProjectListReply Clone() {
      return new RecommendProjectListReply(this);
    }

    /// <summary>Field number for the "ProjectList" field.</summary>
    public const int ProjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.RecommendProjectReply> _repeated_projectList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.RecommendProjectReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.RecommendProjectReply> projectList_ = new pbc::RepeatedField<global::Proto.RecommendProjectReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.RecommendProjectReply> ProjectList {
      get { return projectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecommendProjectListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecommendProjectListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!projectList_.Equals(other.projectList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= projectList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      projectList_.WriteTo(output, _repeated_projectList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += projectList_.CalculateSize(_repeated_projectList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecommendProjectListReply other) {
      if (other == null) {
        return;
      }
      projectList_.Add(other.projectList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            projectList_.AddEntriesFrom(input, _repeated_projectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectCoinReply : pb::IMessage<ProjectCoinReply> {
    private static readonly pb::MessageParser<ProjectCoinReply> _parser = new pb::MessageParser<ProjectCoinReply>(() => new ProjectCoinReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectCoinReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectCoinReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectCoinReply(ProjectCoinReply other) : this() {
      coinName_ = other.coinName_;
      targetValue_ = other.targetValue_;
      completeValue_ = other.completeValue_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectCoinReply Clone() {
      return new ProjectCoinReply(this);
    }

    /// <summary>Field number for the "coinName" field.</summary>
    public const int CoinNameFieldNumber = 1;
    private string coinName_ = "";
    /// <summary>
    ///货币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinName {
      get { return coinName_; }
      set {
        coinName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetValue" field.</summary>
    public const int TargetValueFieldNumber = 2;
    private long targetValue_;
    /// <summary>
    ///募集金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetValue {
      get { return targetValue_; }
      set {
        targetValue_ = value;
      }
    }

    /// <summary>Field number for the "completeValue" field.</summary>
    public const int CompleteValueFieldNumber = 3;
    private long completeValue_;
    /// <summary>
    ///完成金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompleteValue {
      get { return completeValue_; }
      set {
        completeValue_ = value;
      }
    }

    /// <summary>Field number for the "minValue" field.</summary>
    public const int MinValueFieldNumber = 4;
    private long minValue_;
    /// <summary>
    ///限制最小金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 5;
    private long maxValue_;
    /// <summary>
    ///限制最大金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectCoinReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectCoinReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CoinName != other.CoinName) return false;
      if (TargetValue != other.TargetValue) return false;
      if (CompleteValue != other.CompleteValue) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CoinName.Length != 0) hash ^= CoinName.GetHashCode();
      if (TargetValue != 0L) hash ^= TargetValue.GetHashCode();
      if (CompleteValue != 0L) hash ^= CompleteValue.GetHashCode();
      if (MinValue != 0L) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0L) hash ^= MaxValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CoinName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CoinName);
      }
      if (TargetValue != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetValue);
      }
      if (CompleteValue != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompleteValue);
      }
      if (MinValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MinValue);
      }
      if (MaxValue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CoinName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinName);
      }
      if (TargetValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetValue);
      }
      if (CompleteValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompleteValue);
      }
      if (MinValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinValue);
      }
      if (MaxValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectCoinReply other) {
      if (other == null) {
        return;
      }
      if (other.CoinName.Length != 0) {
        CoinName = other.CoinName;
      }
      if (other.TargetValue != 0L) {
        TargetValue = other.TargetValue;
      }
      if (other.CompleteValue != 0L) {
        CompleteValue = other.CompleteValue;
      }
      if (other.MinValue != 0L) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0L) {
        MaxValue = other.MaxValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CoinName = input.ReadString();
            break;
          }
          case 16: {
            TargetValue = input.ReadInt64();
            break;
          }
          case 24: {
            CompleteValue = input.ReadInt64();
            break;
          }
          case 32: {
            MinValue = input.ReadInt64();
            break;
          }
          case 40: {
            MaxValue = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectStageReply : pb::IMessage<ProjectStageReply> {
    private static readonly pb::MessageParser<ProjectStageReply> _parser = new pb::MessageParser<ProjectStageReply>(() => new ProjectStageReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectStageReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectStageReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectStageReply(ProjectStageReply other) : this() {
      stageName_ = other.stageName_;
      discountInfo_ = other.discountInfo_;
      leftTime_ = other.leftTime_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
      coinInfoList_ = other.coinInfoList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectStageReply Clone() {
      return new ProjectStageReply(this);
    }

    /// <summary>Field number for the "stageName" field.</summary>
    public const int StageNameFieldNumber = 1;
    private string stageName_ = "";
    /// <summary>
    ///阶段名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StageName {
      get { return stageName_; }
      set {
        stageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discountInfo" field.</summary>
    public const int DiscountInfoFieldNumber = 2;
    private string discountInfo_ = "";
    /// <summary>
    ///折扣信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiscountInfo {
      get { return discountInfo_; }
      set {
        discountInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leftTime" field.</summary>
    public const int LeftTimeFieldNumber = 3;
    private int leftTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    /// <summary>Field number for the "minValue" field.</summary>
    public const int MinValueFieldNumber = 4;
    private long minValue_;
    /// <summary>
    ///最小投资金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 5;
    private long maxValue_;
    /// <summary>
    ///最大投资金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "coinInfoList" field.</summary>
    public const int CoinInfoListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Proto.ProjectCoinReply> _repeated_coinInfoList_codec
        = pb::FieldCodec.ForMessage(50, global::Proto.ProjectCoinReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.ProjectCoinReply> coinInfoList_ = new pbc::RepeatedField<global::Proto.ProjectCoinReply>();
    /// <summary>
    ///数字货币种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ProjectCoinReply> CoinInfoList {
      get { return coinInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectStageReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectStageReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageName != other.StageName) return false;
      if (DiscountInfo != other.DiscountInfo) return false;
      if (LeftTime != other.LeftTime) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      if(!coinInfoList_.Equals(other.coinInfoList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StageName.Length != 0) hash ^= StageName.GetHashCode();
      if (DiscountInfo.Length != 0) hash ^= DiscountInfo.GetHashCode();
      if (LeftTime != 0) hash ^= LeftTime.GetHashCode();
      if (MinValue != 0L) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0L) hash ^= MaxValue.GetHashCode();
      hash ^= coinInfoList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StageName);
      }
      if (DiscountInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DiscountInfo);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftTime);
      }
      if (MinValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MinValue);
      }
      if (MaxValue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxValue);
      }
      coinInfoList_.WriteTo(output, _repeated_coinInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageName);
      }
      if (DiscountInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscountInfo);
      }
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      if (MinValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinValue);
      }
      if (MaxValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxValue);
      }
      size += coinInfoList_.CalculateSize(_repeated_coinInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectStageReply other) {
      if (other == null) {
        return;
      }
      if (other.StageName.Length != 0) {
        StageName = other.StageName;
      }
      if (other.DiscountInfo.Length != 0) {
        DiscountInfo = other.DiscountInfo;
      }
      if (other.LeftTime != 0) {
        LeftTime = other.LeftTime;
      }
      if (other.MinValue != 0L) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0L) {
        MaxValue = other.MaxValue;
      }
      coinInfoList_.Add(other.coinInfoList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StageName = input.ReadString();
            break;
          }
          case 18: {
            DiscountInfo = input.ReadString();
            break;
          }
          case 24: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 32: {
            MinValue = input.ReadInt64();
            break;
          }
          case 40: {
            MaxValue = input.ReadInt64();
            break;
          }
          case 50: {
            coinInfoList_.AddEntriesFrom(input, _repeated_coinInfoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectDescription : pb::IMessage<ProjectDescription> {
    private static readonly pb::MessageParser<ProjectDescription> _parser = new pb::MessageParser<ProjectDescription>(() => new ProjectDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescription(ProjectDescription other) : this() {
      title_ = other.title_;
      content_ = other.content_;
      prioritySort_ = other.prioritySort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDescription Clone() {
      return new ProjectDescription(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority_sort" field.</summary>
    public const int PrioritySortFieldNumber = 3;
    private int prioritySort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (PrioritySort != other.PrioritySort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PrioritySort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectDescription other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            PrioritySort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamMember : pb::IMessage<TeamMember> {
    private static readonly pb::MessageParser<TeamMember> _parser = new pb::MessageParser<TeamMember>(() => new TeamMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMember(TeamMember other) : this() {
      imageUrl_ = other.imageUrl_;
      name_ = other.name_;
      position_ = other.position_;
      personalInfo_ = other.personalInfo_;
      prioritySort_ = other.prioritySort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMember Clone() {
      return new TeamMember(this);
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 1;
    private string imageUrl_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private string position_ = "";
    /// <summary>
    ///职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "personalInfo" field.</summary>
    public const int PersonalInfoFieldNumber = 4;
    private string personalInfo_ = "";
    /// <summary>
    ///个人介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PersonalInfo {
      get { return personalInfo_; }
      set {
        personalInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority_sort" field.</summary>
    public const int PrioritySortFieldNumber = 5;
    private int prioritySort_;
    /// <summary>
    ///排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageUrl != other.ImageUrl) return false;
      if (Name != other.Name) return false;
      if (Position != other.Position) return false;
      if (PersonalInfo != other.PersonalInfo) return false;
      if (PrioritySort != other.PrioritySort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Position.Length != 0) hash ^= Position.GetHashCode();
      if (PersonalInfo.Length != 0) hash ^= PersonalInfo.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageUrl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Position);
      }
      if (PersonalInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PersonalInfo);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PrioritySort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Position);
      }
      if (PersonalInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PersonalInfo);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMember other) {
      if (other == null) {
        return;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Position.Length != 0) {
        Position = other.Position;
      }
      if (other.PersonalInfo.Length != 0) {
        PersonalInfo = other.PersonalInfo;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ImageUrl = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Position = input.ReadString();
            break;
          }
          case 34: {
            PersonalInfo = input.ReadString();
            break;
          }
          case 40: {
            PrioritySort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectDetailsReply : pb::IMessage<ProjectDetailsReply> {
    private static readonly pb::MessageParser<ProjectDetailsReply> _parser = new pb::MessageParser<ProjectDetailsReply>(() => new ProjectDetailsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectDetailsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDetailsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDetailsReply(ProjectDetailsReply other) : this() {
      imageUrl_ = other.imageUrl_;
      status_ = other.status_;
      summary_ = other.summary_;
      coinId_ = other.coinId_;
      coinName_ = other.coinName_;
      description_ = other.description_;
      certificationList_ = other.certificationList_.Clone();
      sellStageList_ = other.sellStageList_.Clone();
      projectContent_ = other.projectContent_.Clone();
      memberList_ = other.memberList_.Clone();
      canJoin_ = other.canJoin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectDetailsReply Clone() {
      return new ProjectDetailsReply(this);
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 1;
    private string imageUrl_ = "";
    /// <summary>
    ///项目图片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///项目状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 3;
    private string summary_ = "";
    /// <summary>
    ///项目名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Summary {
      get { return summary_; }
      set {
        summary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinId" field.</summary>
    public const int CoinIdFieldNumber = 4;
    private string coinId_ = "";
    /// <summary>
    ///项目币Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinId {
      get { return coinId_; }
      set {
        coinId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinName" field.</summary>
    public const int CoinNameFieldNumber = 5;
    private string coinName_ = "";
    /// <summary>
    ///项目币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinName {
      get { return coinName_; }
      set {
        coinName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    /// <summary>
    ///项目描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "certificationList" field.</summary>
    public const int CertificationListFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_certificationList_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> certificationList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///勋章信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CertificationList {
      get { return certificationList_; }
    }

    /// <summary>Field number for the "sellStageList" field.</summary>
    public const int SellStageListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Proto.SellStageReply> _repeated_sellStageList_codec
        = pb::FieldCodec.ForMessage(66, global::Proto.SellStageReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.SellStageReply> sellStageList_ = new pbc::RepeatedField<global::Proto.SellStageReply>();
    /// <summary>
    ///预售期信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.SellStageReply> SellStageList {
      get { return sellStageList_; }
    }

    /// <summary>Field number for the "projectContent" field.</summary>
    public const int ProjectContentFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Proto.ProjectDescription> _repeated_projectContent_codec
        = pb::FieldCodec.ForMessage(74, global::Proto.ProjectDescription.Parser);
    private readonly pbc::RepeatedField<global::Proto.ProjectDescription> projectContent_ = new pbc::RepeatedField<global::Proto.ProjectDescription>();
    /// <summary>
    ///介绍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ProjectDescription> ProjectContent {
      get { return projectContent_; }
    }

    /// <summary>Field number for the "memberList" field.</summary>
    public const int MemberListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Proto.TeamMember> _repeated_memberList_codec
        = pb::FieldCodec.ForMessage(82, global::Proto.TeamMember.Parser);
    private readonly pbc::RepeatedField<global::Proto.TeamMember> memberList_ = new pbc::RepeatedField<global::Proto.TeamMember>();
    /// <summary>
    ///团队成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.TeamMember> MemberList {
      get { return memberList_; }
    }

    /// <summary>Field number for the "canJoin" field.</summary>
    public const int CanJoinFieldNumber = 11;
    private global::Proto.BoolValue canJoin_ = 0;
    /// <summary>
    ///是否可以参与
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue CanJoin {
      get { return canJoin_; }
      set {
        canJoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectDetailsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectDetailsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageUrl != other.ImageUrl) return false;
      if (Status != other.Status) return false;
      if (Summary != other.Summary) return false;
      if (CoinId != other.CoinId) return false;
      if (CoinName != other.CoinName) return false;
      if (Description != other.Description) return false;
      if(!certificationList_.Equals(other.certificationList_)) return false;
      if(!sellStageList_.Equals(other.sellStageList_)) return false;
      if(!projectContent_.Equals(other.projectContent_)) return false;
      if(!memberList_.Equals(other.memberList_)) return false;
      if (CanJoin != other.CanJoin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Summary.Length != 0) hash ^= Summary.GetHashCode();
      if (CoinId.Length != 0) hash ^= CoinId.GetHashCode();
      if (CoinName.Length != 0) hash ^= CoinName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= certificationList_.GetHashCode();
      hash ^= sellStageList_.GetHashCode();
      hash ^= projectContent_.GetHashCode();
      hash ^= memberList_.GetHashCode();
      if (CanJoin != 0) hash ^= CanJoin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageUrl);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Summary.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Summary);
      }
      if (CoinId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CoinId);
      }
      if (CoinName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CoinName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      certificationList_.WriteTo(output, _repeated_certificationList_codec);
      sellStageList_.WriteTo(output, _repeated_sellStageList_codec);
      projectContent_.WriteTo(output, _repeated_projectContent_codec);
      memberList_.WriteTo(output, _repeated_memberList_codec);
      if (CanJoin != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) CanJoin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Summary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Summary);
      }
      if (CoinId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinId);
      }
      if (CoinName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += certificationList_.CalculateSize(_repeated_certificationList_codec);
      size += sellStageList_.CalculateSize(_repeated_sellStageList_codec);
      size += projectContent_.CalculateSize(_repeated_projectContent_codec);
      size += memberList_.CalculateSize(_repeated_memberList_codec);
      if (CanJoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CanJoin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectDetailsReply other) {
      if (other == null) {
        return;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Summary.Length != 0) {
        Summary = other.Summary;
      }
      if (other.CoinId.Length != 0) {
        CoinId = other.CoinId;
      }
      if (other.CoinName.Length != 0) {
        CoinName = other.CoinName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      certificationList_.Add(other.certificationList_);
      sellStageList_.Add(other.sellStageList_);
      projectContent_.Add(other.projectContent_);
      memberList_.Add(other.memberList_);
      if (other.CanJoin != 0) {
        CanJoin = other.CanJoin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ImageUrl = input.ReadString();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            Summary = input.ReadString();
            break;
          }
          case 34: {
            CoinId = input.ReadString();
            break;
          }
          case 42: {
            CoinName = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            certificationList_.AddEntriesFrom(input, _repeated_certificationList_codec);
            break;
          }
          case 66: {
            sellStageList_.AddEntriesFrom(input, _repeated_sellStageList_codec);
            break;
          }
          case 74: {
            projectContent_.AddEntriesFrom(input, _repeated_projectContent_codec);
            break;
          }
          case 82: {
            memberList_.AddEntriesFrom(input, _repeated_memberList_codec);
            break;
          }
          case 88: {
            canJoin_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///预售期时间
  /// </summary>
  public sealed partial class SellStageReply : pb::IMessage<SellStageReply> {
    private static readonly pb::MessageParser<SellStageReply> _parser = new pb::MessageParser<SellStageReply>(() => new SellStageReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellStageReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellStageReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellStageReply(SellStageReply other) : this() {
      name_ = other.name_;
      endTime_ = other.endTime_;
      leftDays_ = other.leftDays_;
      discount_ = other.discount_;
      coinInfo_ = other.coinInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellStageReply Clone() {
      return new SellStageReply(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///阶段名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private string endTime_ = "";
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leftDays" field.</summary>
    public const int LeftDaysFieldNumber = 3;
    private int leftDays_;
    /// <summary>
    ///剩余天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftDays {
      get { return leftDays_; }
      set {
        leftDays_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 4;
    private string discount_ = "";
    /// <summary>
    ///折扣信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Discount {
      get { return discount_; }
      set {
        discount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinInfo" field.</summary>
    public const int CoinInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.ProjectCoinReply> _repeated_coinInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.ProjectCoinReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.ProjectCoinReply> coinInfo_ = new pbc::RepeatedField<global::Proto.ProjectCoinReply>();
    /// <summary>
    ///募币信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ProjectCoinReply> CoinInfo {
      get { return coinInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellStageReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellStageReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (EndTime != other.EndTime) return false;
      if (LeftDays != other.LeftDays) return false;
      if (Discount != other.Discount) return false;
      if(!coinInfo_.Equals(other.coinInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (LeftDays != 0) hash ^= LeftDays.GetHashCode();
      if (Discount.Length != 0) hash ^= Discount.GetHashCode();
      hash ^= coinInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndTime);
      }
      if (LeftDays != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeftDays);
      }
      if (Discount.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Discount);
      }
      coinInfo_.WriteTo(output, _repeated_coinInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (LeftDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftDays);
      }
      if (Discount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Discount);
      }
      size += coinInfo_.CalculateSize(_repeated_coinInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellStageReply other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.LeftDays != 0) {
        LeftDays = other.LeftDays;
      }
      if (other.Discount.Length != 0) {
        Discount = other.Discount;
      }
      coinInfo_.Add(other.coinInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            EndTime = input.ReadString();
            break;
          }
          case 24: {
            LeftDays = input.ReadInt32();
            break;
          }
          case 34: {
            Discount = input.ReadString();
            break;
          }
          case 42: {
            coinInfo_.AddEntriesFrom(input, _repeated_coinInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///募集阶段
  /// </summary>
  public sealed partial class RaiseStageReply : pb::IMessage<RaiseStageReply> {
    private static readonly pb::MessageParser<RaiseStageReply> _parser = new pb::MessageParser<RaiseStageReply>(() => new RaiseStageReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaiseStageReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaiseStageReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaiseStageReply(RaiseStageReply other) : this() {
      name_ = other.name_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      targetInfo_ = other.targetInfo_;
      discount_ = other.discount_;
      coinList_ = other.coinList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaiseStageReply Clone() {
      return new RaiseStageReply(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///阶段名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beginTime" field.</summary>
    public const int BeginTimeFieldNumber = 2;
    private string beginTime_ = "";
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private string endTime_ = "";
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetInfo" field.</summary>
    public const int TargetInfoFieldNumber = 4;
    private string targetInfo_ = "";
    /// <summary>
    ///募集目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetInfo {
      get { return targetInfo_; }
      set {
        targetInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 5;
    private string discount_ = "";
    /// <summary>
    ///折扣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Discount {
      get { return discount_; }
      set {
        discount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CoinList" field.</summary>
    public const int CoinListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Proto.ProjectCoinReply> _repeated_coinList_codec
        = pb::FieldCodec.ForMessage(50, global::Proto.ProjectCoinReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.ProjectCoinReply> coinList_ = new pbc::RepeatedField<global::Proto.ProjectCoinReply>();
    /// <summary>
    ///募集币种信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ProjectCoinReply> CoinList {
      get { return coinList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaiseStageReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaiseStageReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      if (TargetInfo != other.TargetInfo) return false;
      if (Discount != other.Discount) return false;
      if(!coinList_.Equals(other.coinList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BeginTime.Length != 0) hash ^= BeginTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (TargetInfo.Length != 0) hash ^= TargetInfo.GetHashCode();
      if (Discount.Length != 0) hash ^= Discount.GetHashCode();
      hash ^= coinList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (BeginTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BeginTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EndTime);
      }
      if (TargetInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TargetInfo);
      }
      if (Discount.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Discount);
      }
      coinList_.WriteTo(output, _repeated_coinList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BeginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeginTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (TargetInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetInfo);
      }
      if (Discount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Discount);
      }
      size += coinList_.CalculateSize(_repeated_coinList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaiseStageReply other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BeginTime.Length != 0) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.TargetInfo.Length != 0) {
        TargetInfo = other.TargetInfo;
      }
      if (other.Discount.Length != 0) {
        Discount = other.Discount;
      }
      coinList_.Add(other.coinList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            BeginTime = input.ReadString();
            break;
          }
          case 26: {
            EndTime = input.ReadString();
            break;
          }
          case 34: {
            TargetInfo = input.ReadString();
            break;
          }
          case 42: {
            Discount = input.ReadString();
            break;
          }
          case 50: {
            coinList_.AddEntriesFrom(input, _repeated_coinList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///募集细则
  /// </summary>
  public sealed partial class RaiseRuleReply : pb::IMessage<RaiseRuleReply> {
    private static readonly pb::MessageParser<RaiseRuleReply> _parser = new pb::MessageParser<RaiseRuleReply>(() => new RaiseRuleReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaiseRuleReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaiseRuleReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaiseRuleReply(RaiseRuleReply other) : this() {
      currencyName_ = other.currencyName_;
      softTarget_ = other.softTarget_;
      hardTarget_ = other.hardTarget_;
      totalTarget_ = other.totalTarget_;
      stageList_ = other.stageList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaiseRuleReply Clone() {
      return new RaiseRuleReply(this);
    }

    /// <summary>Field number for the "currencyName" field.</summary>
    public const int CurrencyNameFieldNumber = 1;
    private string currencyName_ = "";
    /// <summary>
    ///代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyName {
      get { return currencyName_; }
      set {
        currencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "softTarget" field.</summary>
    public const int SoftTargetFieldNumber = 2;
    private long softTarget_;
    /// <summary>
    ///软顶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoftTarget {
      get { return softTarget_; }
      set {
        softTarget_ = value;
      }
    }

    /// <summary>Field number for the "hardTarget" field.</summary>
    public const int HardTargetFieldNumber = 3;
    private long hardTarget_;
    /// <summary>
    ///硬顶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HardTarget {
      get { return hardTarget_; }
      set {
        hardTarget_ = value;
      }
    }

    /// <summary>Field number for the "totalTarget" field.</summary>
    public const int TotalTargetFieldNumber = 4;
    private long totalTarget_;
    /// <summary>
    ///募资总额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalTarget {
      get { return totalTarget_; }
      set {
        totalTarget_ = value;
      }
    }

    /// <summary>Field number for the "stageList" field.</summary>
    public const int StageListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.RaiseStageReply> _repeated_stageList_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.RaiseStageReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.RaiseStageReply> stageList_ = new pbc::RepeatedField<global::Proto.RaiseStageReply>();
    /// <summary>
    ///募集阶段集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.RaiseStageReply> StageList {
      get { return stageList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaiseRuleReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaiseRuleReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyName != other.CurrencyName) return false;
      if (SoftTarget != other.SoftTarget) return false;
      if (HardTarget != other.HardTarget) return false;
      if (TotalTarget != other.TotalTarget) return false;
      if(!stageList_.Equals(other.stageList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyName.Length != 0) hash ^= CurrencyName.GetHashCode();
      if (SoftTarget != 0L) hash ^= SoftTarget.GetHashCode();
      if (HardTarget != 0L) hash ^= HardTarget.GetHashCode();
      if (TotalTarget != 0L) hash ^= TotalTarget.GetHashCode();
      hash ^= stageList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrencyName);
      }
      if (SoftTarget != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SoftTarget);
      }
      if (HardTarget != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HardTarget);
      }
      if (TotalTarget != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalTarget);
      }
      stageList_.WriteTo(output, _repeated_stageList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyName);
      }
      if (SoftTarget != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoftTarget);
      }
      if (HardTarget != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HardTarget);
      }
      if (TotalTarget != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalTarget);
      }
      size += stageList_.CalculateSize(_repeated_stageList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaiseRuleReply other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyName.Length != 0) {
        CurrencyName = other.CurrencyName;
      }
      if (other.SoftTarget != 0L) {
        SoftTarget = other.SoftTarget;
      }
      if (other.HardTarget != 0L) {
        HardTarget = other.HardTarget;
      }
      if (other.TotalTarget != 0L) {
        TotalTarget = other.TotalTarget;
      }
      stageList_.Add(other.stageList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrencyName = input.ReadString();
            break;
          }
          case 16: {
            SoftTarget = input.ReadInt64();
            break;
          }
          case 24: {
            HardTarget = input.ReadInt64();
            break;
          }
          case 32: {
            TotalTarget = input.ReadInt64();
            break;
          }
          case 42: {
            stageList_.AddEntriesFrom(input, _repeated_stageList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告
  /// </summary>
  public sealed partial class ProjectNoticeReply : pb::IMessage<ProjectNoticeReply> {
    private static readonly pb::MessageParser<ProjectNoticeReply> _parser = new pb::MessageParser<ProjectNoticeReply>(() => new ProjectNoticeReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectNoticeReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectNoticeReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectNoticeReply(ProjectNoticeReply other) : this() {
      noticeId_ = other.noticeId_;
      noticeTitle_ = other.noticeTitle_;
      description_ = other.description_;
      type_ = other.type_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectNoticeReply Clone() {
      return new ProjectNoticeReply(this);
    }

    /// <summary>Field number for the "noticeId" field.</summary>
    public const int NoticeIdFieldNumber = 1;
    private long noticeId_;
    /// <summary>
    ///公告Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NoticeId {
      get { return noticeId_; }
      set {
        noticeId_ = value;
      }
    }

    /// <summary>Field number for the "noticeTitle" field.</summary>
    public const int NoticeTitleFieldNumber = 2;
    private string noticeTitle_ = "";
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoticeTitle {
      get { return noticeTitle_; }
      set {
        noticeTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Proto.NoticeType type_ = 0;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectNoticeReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectNoticeReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NoticeId != other.NoticeId) return false;
      if (NoticeTitle != other.NoticeTitle) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoticeId != 0L) hash ^= NoticeId.GetHashCode();
      if (NoticeTitle.Length != 0) hash ^= NoticeTitle.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoticeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NoticeId);
      }
      if (NoticeTitle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NoticeTitle);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoticeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoticeId);
      }
      if (NoticeTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoticeTitle);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectNoticeReply other) {
      if (other == null) {
        return;
      }
      if (other.NoticeId != 0L) {
        NoticeId = other.NoticeId;
      }
      if (other.NoticeTitle.Length != 0) {
        NoticeTitle = other.NoticeTitle;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NoticeId = input.ReadInt64();
            break;
          }
          case 18: {
            NoticeTitle = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::Proto.NoticeType) input.ReadEnum();
            break;
          }
          case 42: {
            CreateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectNoticeListReply : pb::IMessage<ProjectNoticeListReply> {
    private static readonly pb::MessageParser<ProjectNoticeListReply> _parser = new pb::MessageParser<ProjectNoticeListReply>(() => new ProjectNoticeListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectNoticeListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectNoticeListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectNoticeListReply(ProjectNoticeListReply other) : this() {
      noticeList_ = other.noticeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectNoticeListReply Clone() {
      return new ProjectNoticeListReply(this);
    }

    /// <summary>Field number for the "NoticeList" field.</summary>
    public const int NoticeListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.ProjectNoticeReply> _repeated_noticeList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.ProjectNoticeReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.ProjectNoticeReply> noticeList_ = new pbc::RepeatedField<global::Proto.ProjectNoticeReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.ProjectNoticeReply> NoticeList {
      get { return noticeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectNoticeListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectNoticeListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!noticeList_.Equals(other.noticeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= noticeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      noticeList_.WriteTo(output, _repeated_noticeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += noticeList_.CalculateSize(_repeated_noticeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectNoticeListReply other) {
      if (other == null) {
        return;
      }
      noticeList_.Add(other.noticeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            noticeList_.AddEntriesFrom(input, _repeated_noticeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///项目详情公告
  /// </summary>
  public sealed partial class NoticeNewsReply : pb::IMessage<NoticeNewsReply> {
    private static readonly pb::MessageParser<NoticeNewsReply> _parser = new pb::MessageParser<NoticeNewsReply>(() => new NoticeNewsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeNewsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeNewsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeNewsReply(NoticeNewsReply other) : this() {
      projectName_ = other.projectName_;
      createTime_ = other.createTime_;
      noticeTitle_ = other.noticeTitle_;
      noticeContent_ = other.noticeContent_;
      imageUrl_ = other.imageUrl_;
      imageWidth_ = other.imageWidth_;
      imageHeight_ = other.imageHeight_;
      urlSite_ = other.urlSite_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeNewsReply Clone() {
      return new NoticeNewsReply(this);
    }

    /// <summary>Field number for the "projectName" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    ///项目名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 2;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "noticeTitle" field.</summary>
    public const int NoticeTitleFieldNumber = 3;
    private string noticeTitle_ = "";
    /// <summary>
    ///投票标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoticeTitle {
      get { return noticeTitle_; }
      set {
        noticeTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "noticeContent" field.</summary>
    public const int NoticeContentFieldNumber = 4;
    private string noticeContent_ = "";
    /// <summary>
    ///投票内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoticeContent {
      get { return noticeContent_; }
      set {
        noticeContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 5;
    private string imageUrl_ = "";
    /// <summary>
    ///图片Url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageWidth" field.</summary>
    public const int ImageWidthFieldNumber = 6;
    private int imageWidth_;
    /// <summary>
    ///图片宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageWidth {
      get { return imageWidth_; }
      set {
        imageWidth_ = value;
      }
    }

    /// <summary>Field number for the "imageHeight" field.</summary>
    public const int ImageHeightFieldNumber = 7;
    private int imageHeight_;
    /// <summary>
    ///图片高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageHeight {
      get { return imageHeight_; }
      set {
        imageHeight_ = value;
      }
    }

    /// <summary>Field number for the "urlSite" field.</summary>
    public const int UrlSiteFieldNumber = 8;
    private string urlSite_ = "";
    /// <summary>
    ///网页链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlSite {
      get { return urlSite_; }
      set {
        urlSite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeNewsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeNewsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (CreateTime != other.CreateTime) return false;
      if (NoticeTitle != other.NoticeTitle) return false;
      if (NoticeContent != other.NoticeContent) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (ImageWidth != other.ImageWidth) return false;
      if (ImageHeight != other.ImageHeight) return false;
      if (UrlSite != other.UrlSite) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (NoticeTitle.Length != 0) hash ^= NoticeTitle.GetHashCode();
      if (NoticeContent.Length != 0) hash ^= NoticeContent.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (ImageWidth != 0) hash ^= ImageWidth.GetHashCode();
      if (ImageHeight != 0) hash ^= ImageHeight.GetHashCode();
      if (UrlSite.Length != 0) hash ^= UrlSite.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CreateTime);
      }
      if (NoticeTitle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NoticeTitle);
      }
      if (NoticeContent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NoticeContent);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ImageUrl);
      }
      if (ImageWidth != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImageWidth);
      }
      if (ImageHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImageHeight);
      }
      if (UrlSite.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UrlSite);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (NoticeTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoticeTitle);
      }
      if (NoticeContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoticeContent);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (ImageWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageWidth);
      }
      if (ImageHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageHeight);
      }
      if (UrlSite.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlSite);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeNewsReply other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.NoticeTitle.Length != 0) {
        NoticeTitle = other.NoticeTitle;
      }
      if (other.NoticeContent.Length != 0) {
        NoticeContent = other.NoticeContent;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.ImageWidth != 0) {
        ImageWidth = other.ImageWidth;
      }
      if (other.ImageHeight != 0) {
        ImageHeight = other.ImageHeight;
      }
      if (other.UrlSite.Length != 0) {
        UrlSite = other.UrlSite;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            CreateTime = input.ReadString();
            break;
          }
          case 26: {
            NoticeTitle = input.ReadString();
            break;
          }
          case 34: {
            NoticeContent = input.ReadString();
            break;
          }
          case 42: {
            ImageUrl = input.ReadString();
            break;
          }
          case 48: {
            ImageWidth = input.ReadInt32();
            break;
          }
          case 56: {
            ImageHeight = input.ReadInt32();
            break;
          }
          case 66: {
            UrlSite = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeVoteDetailReply : pb::IMessage<NoticeVoteDetailReply> {
    private static readonly pb::MessageParser<NoticeVoteDetailReply> _parser = new pb::MessageParser<NoticeVoteDetailReply>(() => new NoticeVoteDetailReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeVoteDetailReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeVoteDetailReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeVoteDetailReply(NoticeVoteDetailReply other) : this() {
      projectName_ = other.projectName_;
      createTime_ = other.createTime_;
      noticeTitle_ = other.noticeTitle_;
      noticeContent_ = other.noticeContent_;
      imageUrl_ = other.imageUrl_;
      imageWidth_ = other.imageWidth_;
      imageHeight_ = other.imageHeight_;
      urlSite_ = other.urlSite_;
      myVoteVolumn_ = other.myVoteVolumn_;
      myVoteType_ = other.myVoteType_;
      endTime_ = other.endTime_;
      approveVolumn_ = other.approveVolumn_;
      disapproveVolumn_ = other.disapproveVolumn_;
      abstensionVolumn_ = other.abstensionVolumn_;
      totalVote_ = other.totalVote_;
      voteStatus_ = other.voteStatus_;
      noticeResult_ = other.noticeResult_;
      noticeComments_ = other.noticeComments_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeVoteDetailReply Clone() {
      return new NoticeVoteDetailReply(this);
    }

    /// <summary>Field number for the "projectName" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    ///项目名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 2;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "noticeTitle" field.</summary>
    public const int NoticeTitleFieldNumber = 3;
    private string noticeTitle_ = "";
    /// <summary>
    ///投票标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoticeTitle {
      get { return noticeTitle_; }
      set {
        noticeTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "noticeContent" field.</summary>
    public const int NoticeContentFieldNumber = 4;
    private string noticeContent_ = "";
    /// <summary>
    ///投票内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoticeContent {
      get { return noticeContent_; }
      set {
        noticeContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 5;
    private string imageUrl_ = "";
    /// <summary>
    ///图片Url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageWidth" field.</summary>
    public const int ImageWidthFieldNumber = 6;
    private int imageWidth_;
    /// <summary>
    ///图片宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageWidth {
      get { return imageWidth_; }
      set {
        imageWidth_ = value;
      }
    }

    /// <summary>Field number for the "imageHeight" field.</summary>
    public const int ImageHeightFieldNumber = 7;
    private int imageHeight_;
    /// <summary>
    ///图片高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImageHeight {
      get { return imageHeight_; }
      set {
        imageHeight_ = value;
      }
    }

    /// <summary>Field number for the "urlSite" field.</summary>
    public const int UrlSiteFieldNumber = 8;
    private string urlSite_ = "";
    /// <summary>
    ///网页链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlSite {
      get { return urlSite_; }
      set {
        urlSite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "myVoteVolumn" field.</summary>
    public const int MyVoteVolumnFieldNumber = 9;
    private long myVoteVolumn_;
    /// <summary>
    ///我的投票数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MyVoteVolumn {
      get { return myVoteVolumn_; }
      set {
        myVoteVolumn_ = value;
      }
    }

    /// <summary>Field number for the "myVoteType" field.</summary>
    public const int MyVoteTypeFieldNumber = 10;
    private global::Proto.VoteResultType myVoteType_ = 0;
    /// <summary>
    ///我的投票类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.VoteResultType MyVoteType {
      get { return myVoteType_; }
      set {
        myVoteType_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 11;
    private string endTime_ = "";
    /// <summary>
    ///截止时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "approveVolumn" field.</summary>
    public const int ApproveVolumnFieldNumber = 12;
    private long approveVolumn_;
    /// <summary>
    ///赞成票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApproveVolumn {
      get { return approveVolumn_; }
      set {
        approveVolumn_ = value;
      }
    }

    /// <summary>Field number for the "disapproveVolumn" field.</summary>
    public const int DisapproveVolumnFieldNumber = 13;
    private long disapproveVolumn_;
    /// <summary>
    ///反对票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DisapproveVolumn {
      get { return disapproveVolumn_; }
      set {
        disapproveVolumn_ = value;
      }
    }

    /// <summary>Field number for the "abstensionVolumn" field.</summary>
    public const int AbstensionVolumnFieldNumber = 14;
    private long abstensionVolumn_;
    /// <summary>
    ///弃权票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AbstensionVolumn {
      get { return abstensionVolumn_; }
      set {
        abstensionVolumn_ = value;
      }
    }

    /// <summary>Field number for the "totalVote" field.</summary>
    public const int TotalVoteFieldNumber = 15;
    private long totalVote_;
    /// <summary>
    ///总投票额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalVote {
      get { return totalVote_; }
      set {
        totalVote_ = value;
      }
    }

    /// <summary>Field number for the "voteStatus" field.</summary>
    public const int VoteStatusFieldNumber = 16;
    private global::Proto.Status voteStatus_ = 0;
    /// <summary>
    ///提案投票状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Status VoteStatus {
      get { return voteStatus_; }
      set {
        voteStatus_ = value;
      }
    }

    /// <summary>Field number for the "NoticeResult" field.</summary>
    public const int NoticeResultFieldNumber = 17;
    private global::Proto.NoticeResultType noticeResult_ = 0;
    /// <summary>
    ///提案投票结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.NoticeResultType NoticeResult {
      get { return noticeResult_; }
      set {
        noticeResult_ = value;
      }
    }

    /// <summary>Field number for the "NoticeComments" field.</summary>
    public const int NoticeCommentsFieldNumber = 18;
    private string noticeComments_ = "";
    /// <summary>
    ///提案投票说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoticeComments {
      get { return noticeComments_; }
      set {
        noticeComments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeVoteDetailReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeVoteDetailReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (CreateTime != other.CreateTime) return false;
      if (NoticeTitle != other.NoticeTitle) return false;
      if (NoticeContent != other.NoticeContent) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (ImageWidth != other.ImageWidth) return false;
      if (ImageHeight != other.ImageHeight) return false;
      if (UrlSite != other.UrlSite) return false;
      if (MyVoteVolumn != other.MyVoteVolumn) return false;
      if (MyVoteType != other.MyVoteType) return false;
      if (EndTime != other.EndTime) return false;
      if (ApproveVolumn != other.ApproveVolumn) return false;
      if (DisapproveVolumn != other.DisapproveVolumn) return false;
      if (AbstensionVolumn != other.AbstensionVolumn) return false;
      if (TotalVote != other.TotalVote) return false;
      if (VoteStatus != other.VoteStatus) return false;
      if (NoticeResult != other.NoticeResult) return false;
      if (NoticeComments != other.NoticeComments) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (NoticeTitle.Length != 0) hash ^= NoticeTitle.GetHashCode();
      if (NoticeContent.Length != 0) hash ^= NoticeContent.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (ImageWidth != 0) hash ^= ImageWidth.GetHashCode();
      if (ImageHeight != 0) hash ^= ImageHeight.GetHashCode();
      if (UrlSite.Length != 0) hash ^= UrlSite.GetHashCode();
      if (MyVoteVolumn != 0L) hash ^= MyVoteVolumn.GetHashCode();
      if (MyVoteType != 0) hash ^= MyVoteType.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (ApproveVolumn != 0L) hash ^= ApproveVolumn.GetHashCode();
      if (DisapproveVolumn != 0L) hash ^= DisapproveVolumn.GetHashCode();
      if (AbstensionVolumn != 0L) hash ^= AbstensionVolumn.GetHashCode();
      if (TotalVote != 0L) hash ^= TotalVote.GetHashCode();
      if (VoteStatus != 0) hash ^= VoteStatus.GetHashCode();
      if (NoticeResult != 0) hash ^= NoticeResult.GetHashCode();
      if (NoticeComments.Length != 0) hash ^= NoticeComments.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CreateTime);
      }
      if (NoticeTitle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NoticeTitle);
      }
      if (NoticeContent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NoticeContent);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ImageUrl);
      }
      if (ImageWidth != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImageWidth);
      }
      if (ImageHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImageHeight);
      }
      if (UrlSite.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UrlSite);
      }
      if (MyVoteVolumn != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MyVoteVolumn);
      }
      if (MyVoteType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) MyVoteType);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(EndTime);
      }
      if (ApproveVolumn != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(ApproveVolumn);
      }
      if (DisapproveVolumn != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(DisapproveVolumn);
      }
      if (AbstensionVolumn != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(AbstensionVolumn);
      }
      if (TotalVote != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(TotalVote);
      }
      if (VoteStatus != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) VoteStatus);
      }
      if (NoticeResult != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) NoticeResult);
      }
      if (NoticeComments.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(NoticeComments);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (NoticeTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoticeTitle);
      }
      if (NoticeContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoticeContent);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (ImageWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageWidth);
      }
      if (ImageHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageHeight);
      }
      if (UrlSite.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlSite);
      }
      if (MyVoteVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MyVoteVolumn);
      }
      if (MyVoteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MyVoteType);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (ApproveVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApproveVolumn);
      }
      if (DisapproveVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DisapproveVolumn);
      }
      if (AbstensionVolumn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AbstensionVolumn);
      }
      if (TotalVote != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalVote);
      }
      if (VoteStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VoteStatus);
      }
      if (NoticeResult != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NoticeResult);
      }
      if (NoticeComments.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NoticeComments);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeVoteDetailReply other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.NoticeTitle.Length != 0) {
        NoticeTitle = other.NoticeTitle;
      }
      if (other.NoticeContent.Length != 0) {
        NoticeContent = other.NoticeContent;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.ImageWidth != 0) {
        ImageWidth = other.ImageWidth;
      }
      if (other.ImageHeight != 0) {
        ImageHeight = other.ImageHeight;
      }
      if (other.UrlSite.Length != 0) {
        UrlSite = other.UrlSite;
      }
      if (other.MyVoteVolumn != 0L) {
        MyVoteVolumn = other.MyVoteVolumn;
      }
      if (other.MyVoteType != 0) {
        MyVoteType = other.MyVoteType;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.ApproveVolumn != 0L) {
        ApproveVolumn = other.ApproveVolumn;
      }
      if (other.DisapproveVolumn != 0L) {
        DisapproveVolumn = other.DisapproveVolumn;
      }
      if (other.AbstensionVolumn != 0L) {
        AbstensionVolumn = other.AbstensionVolumn;
      }
      if (other.TotalVote != 0L) {
        TotalVote = other.TotalVote;
      }
      if (other.VoteStatus != 0) {
        VoteStatus = other.VoteStatus;
      }
      if (other.NoticeResult != 0) {
        NoticeResult = other.NoticeResult;
      }
      if (other.NoticeComments.Length != 0) {
        NoticeComments = other.NoticeComments;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            CreateTime = input.ReadString();
            break;
          }
          case 26: {
            NoticeTitle = input.ReadString();
            break;
          }
          case 34: {
            NoticeContent = input.ReadString();
            break;
          }
          case 42: {
            ImageUrl = input.ReadString();
            break;
          }
          case 48: {
            ImageWidth = input.ReadInt32();
            break;
          }
          case 56: {
            ImageHeight = input.ReadInt32();
            break;
          }
          case 66: {
            UrlSite = input.ReadString();
            break;
          }
          case 72: {
            MyVoteVolumn = input.ReadInt64();
            break;
          }
          case 80: {
            myVoteType_ = (global::Proto.VoteResultType) input.ReadEnum();
            break;
          }
          case 90: {
            EndTime = input.ReadString();
            break;
          }
          case 96: {
            ApproveVolumn = input.ReadInt64();
            break;
          }
          case 104: {
            DisapproveVolumn = input.ReadInt64();
            break;
          }
          case 112: {
            AbstensionVolumn = input.ReadInt64();
            break;
          }
          case 120: {
            TotalVote = input.ReadInt64();
            break;
          }
          case 128: {
            voteStatus_ = (global::Proto.Status) input.ReadEnum();
            break;
          }
          case 136: {
            noticeResult_ = (global::Proto.NoticeResultType) input.ReadEnum();
            break;
          }
          case 146: {
            NoticeComments = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IcoReply : pb::IMessage<IcoReply> {
    private static readonly pb::MessageParser<IcoReply> _parser = new pb::MessageParser<IcoReply>(() => new IcoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IcoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoReply(IcoReply other) : this() {
      currencyName_ = other.currencyName_;
      balanceValue_ = other.balanceValue_;
      price_ = other.price_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
      discount_ = other.discount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoReply Clone() {
      return new IcoReply(this);
    }

    /// <summary>Field number for the "currencyName" field.</summary>
    public const int CurrencyNameFieldNumber = 1;
    private string currencyName_ = "";
    /// <summary>
    ///投资币种
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyName {
      get { return currencyName_; }
      set {
        currencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balanceValue" field.</summary>
    public const int BalanceValueFieldNumber = 2;
    private long balanceValue_;
    /// <summary>
    ///可用余额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceValue {
      get { return balanceValue_; }
      set {
        balanceValue_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private long price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "minValue" field.</summary>
    public const int MinValueFieldNumber = 4;
    private long minValue_;
    /// <summary>
    ///最小限额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 5;
    private long maxValue_;
    /// <summary>
    ///最大限额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 6;
    private string discount_ = "";
    /// <summary>
    ///折扣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Discount {
      get { return discount_; }
      set {
        discount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IcoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IcoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyName != other.CurrencyName) return false;
      if (BalanceValue != other.BalanceValue) return false;
      if (Price != other.Price) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      if (Discount != other.Discount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyName.Length != 0) hash ^= CurrencyName.GetHashCode();
      if (BalanceValue != 0L) hash ^= BalanceValue.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (MinValue != 0L) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0L) hash ^= MaxValue.GetHashCode();
      if (Discount.Length != 0) hash ^= Discount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrencyName);
      }
      if (BalanceValue != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BalanceValue);
      }
      if (Price != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Price);
      }
      if (MinValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MinValue);
      }
      if (MaxValue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxValue);
      }
      if (Discount.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Discount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyName);
      }
      if (BalanceValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceValue);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (MinValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinValue);
      }
      if (MaxValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxValue);
      }
      if (Discount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Discount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IcoReply other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyName.Length != 0) {
        CurrencyName = other.CurrencyName;
      }
      if (other.BalanceValue != 0L) {
        BalanceValue = other.BalanceValue;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.MinValue != 0L) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0L) {
        MaxValue = other.MaxValue;
      }
      if (other.Discount.Length != 0) {
        Discount = other.Discount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CurrencyName = input.ReadString();
            break;
          }
          case 16: {
            BalanceValue = input.ReadInt64();
            break;
          }
          case 24: {
            Price = input.ReadInt64();
            break;
          }
          case 32: {
            MinValue = input.ReadInt64();
            break;
          }
          case 40: {
            MaxValue = input.ReadInt64();
            break;
          }
          case 50: {
            Discount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinOrderReply : pb::IMessage<JoinOrderReply> {
    private static readonly pb::MessageParser<JoinOrderReply> _parser = new pb::MessageParser<JoinOrderReply>(() => new JoinOrderReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinOrderReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOrderReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOrderReply(JoinOrderReply other) : this() {
      icoList_ = other.icoList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOrderReply Clone() {
      return new JoinOrderReply(this);
    }

    /// <summary>Field number for the "IcoList" field.</summary>
    public const int IcoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.IcoReply> _repeated_icoList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.IcoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.IcoReply> icoList_ = new pbc::RepeatedField<global::Proto.IcoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.IcoReply> IcoList {
      get { return icoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinOrderReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinOrderReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icoList_.Equals(other.icoList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icoList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      icoList_.WriteTo(output, _repeated_icoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icoList_.CalculateSize(_repeated_icoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinOrderReply other) {
      if (other == null) {
        return;
      }
      icoList_.Add(other.icoList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            icoList_.AddEntriesFrom(input, _repeated_icoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IcoInfoReply : pb::IMessage<IcoInfoReply> {
    private static readonly pb::MessageParser<IcoInfoReply> _parser = new pb::MessageParser<IcoInfoReply>(() => new IcoInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IcoInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.ProjectReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoInfoReply(IcoInfoReply other) : this() {
      userId_ = other.userId_;
      projectId_ = other.projectId_;
      stageId_ = other.stageId_;
      price_ = other.price_;
      payAmount_ = other.payAmount_;
      baseCoin_ = other.baseCoin_;
      targetCoin_ = other.targetCoin_;
      lockType_ = other.lockType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IcoInfoReply Clone() {
      return new IcoInfoReply(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "projectId" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private long projectId_;
    /// <summary>
    ///项目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProjectId {
      get { return projectId_; }
      set {
        projectId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 3;
    private long stageId_;
    /// <summary>
    ///阶段Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private long price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "payAmount" field.</summary>
    public const int PayAmountFieldNumber = 5;
    private long payAmount_;
    /// <summary>
    ///付出数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayAmount {
      get { return payAmount_; }
      set {
        payAmount_ = value;
      }
    }

    /// <summary>Field number for the "baseCoin" field.</summary>
    public const int BaseCoinFieldNumber = 6;
    private string baseCoin_ = "";
    /// <summary>
    ///付出货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseCoin {
      get { return baseCoin_; }
      set {
        baseCoin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetCoin" field.</summary>
    public const int TargetCoinFieldNumber = 7;
    private string targetCoin_ = "";
    /// <summary>
    ///获得币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetCoin {
      get { return targetCoin_; }
      set {
        targetCoin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lockType" field.</summary>
    public const int LockTypeFieldNumber = 8;
    private int lockType_;
    /// <summary>
    ///锁定状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockType {
      get { return lockType_; }
      set {
        lockType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IcoInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IcoInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ProjectId != other.ProjectId) return false;
      if (StageId != other.StageId) return false;
      if (Price != other.Price) return false;
      if (PayAmount != other.PayAmount) return false;
      if (BaseCoin != other.BaseCoin) return false;
      if (TargetCoin != other.TargetCoin) return false;
      if (LockType != other.LockType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (ProjectId != 0L) hash ^= ProjectId.GetHashCode();
      if (StageId != 0L) hash ^= StageId.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (PayAmount != 0L) hash ^= PayAmount.GetHashCode();
      if (BaseCoin.Length != 0) hash ^= BaseCoin.GetHashCode();
      if (TargetCoin.Length != 0) hash ^= TargetCoin.GetHashCode();
      if (LockType != 0) hash ^= LockType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (ProjectId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ProjectId);
      }
      if (StageId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StageId);
      }
      if (Price != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Price);
      }
      if (PayAmount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PayAmount);
      }
      if (BaseCoin.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BaseCoin);
      }
      if (TargetCoin.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TargetCoin);
      }
      if (LockType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LockType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ProjectId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProjectId);
      }
      if (StageId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StageId);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (PayAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayAmount);
      }
      if (BaseCoin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseCoin);
      }
      if (TargetCoin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetCoin);
      }
      if (LockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IcoInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.ProjectId != 0L) {
        ProjectId = other.ProjectId;
      }
      if (other.StageId != 0L) {
        StageId = other.StageId;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.PayAmount != 0L) {
        PayAmount = other.PayAmount;
      }
      if (other.BaseCoin.Length != 0) {
        BaseCoin = other.BaseCoin;
      }
      if (other.TargetCoin.Length != 0) {
        TargetCoin = other.TargetCoin;
      }
      if (other.LockType != 0) {
        LockType = other.LockType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            ProjectId = input.ReadInt64();
            break;
          }
          case 24: {
            StageId = input.ReadInt64();
            break;
          }
          case 32: {
            Price = input.ReadInt64();
            break;
          }
          case 40: {
            PayAmount = input.ReadInt64();
            break;
          }
          case 50: {
            BaseCoin = input.ReadString();
            break;
          }
          case 58: {
            TargetCoin = input.ReadString();
            break;
          }
          case 64: {
            LockType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
