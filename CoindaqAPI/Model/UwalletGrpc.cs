// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uwallet.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Proto {
  /// <summary>
  ///*
  /// User Wallet Service Grpc API
  /// </summary>
  public static partial class UserWalletService
  {
    static readonly string __ServiceName = "proto.UserWalletService";

    static readonly grpc::Marshaller<global::Proto.UserCoinAddressReq> __Marshaller_UserCoinAddressReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.UserCoinAddressReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.UserCoinListReply> __Marshaller_UserCoinListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.UserCoinListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.WalletAddressReq> __Marshaller_WalletAddressReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.WalletAddressReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.WalletAddressListReply> __Marshaller_WalletAddressListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.WalletAddressListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.IdReq> __Marshaller_IdReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.IdReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.UserBalanceListReply> __Marshaller_UserBalanceListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.UserBalanceListReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.UserCoinAddressReq, global::Proto.Empty> __Method_BindUserCoinAddress = new grpc::Method<global::Proto.UserCoinAddressReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BindUserCoinAddress",
        __Marshaller_UserCoinAddressReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.UserCoinAddressReq, global::Proto.UserCoinListReply> __Method_QueryUserCoinAddress = new grpc::Method<global::Proto.UserCoinAddressReq, global::Proto.UserCoinListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryUserCoinAddress",
        __Marshaller_UserCoinAddressReq,
        __Marshaller_UserCoinListReply);

    static readonly grpc::Method<global::Proto.WalletAddressReq, global::Proto.Empty> __Method_AddWalletAddress = new grpc::Method<global::Proto.WalletAddressReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddWalletAddress",
        __Marshaller_WalletAddressReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.WalletAddressReq, global::Proto.WalletAddressListReply> __Method_QueryUserWalletAddress = new grpc::Method<global::Proto.WalletAddressReq, global::Proto.WalletAddressListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryUserWalletAddress",
        __Marshaller_WalletAddressReq,
        __Marshaller_WalletAddressListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.Empty> __Method_DeleteUserWalletAddress = new grpc::Method<global::Proto.IdReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUserWalletAddress",
        __Marshaller_IdReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.UserCoinAddressReq, global::Proto.UserBalanceListReply> __Method_QueryUserBalanceByFilter = new grpc::Method<global::Proto.UserCoinAddressReq, global::Proto.UserBalanceListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryUserBalanceByFilter",
        __Marshaller_UserCoinAddressReq,
        __Marshaller_UserBalanceListReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.UwalletReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserWalletService</summary>
    public abstract partial class UserWalletServiceBase
    {
      /// <summary>
      ///绑定用户充币地址[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> BindUserCoinAddress(global::Proto.UserCoinAddressReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询用户充币地址[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.UserCoinListReply> QueryUserCoinAddress(global::Proto.UserCoinAddressReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///添加用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> AddWalletAddress(global::Proto.WalletAddressReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询用户钱包地址[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.WalletAddressListReply> QueryUserWalletAddress(global::Proto.WalletAddressReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///删除用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> DeleteUserWalletAddress(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///平台钱包信息查询
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.UserBalanceListReply> QueryUserBalanceByFilter(global::Proto.UserCoinAddressReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserWalletService</summary>
    public partial class UserWalletServiceClient : grpc::ClientBase<UserWalletServiceClient>
    {
      /// <summary>Creates a new client for UserWalletService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserWalletServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserWalletService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserWalletServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserWalletServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserWalletServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///绑定用户充币地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty BindUserCoinAddress(global::Proto.UserCoinAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BindUserCoinAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///绑定用户充币地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty BindUserCoinAddress(global::Proto.UserCoinAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BindUserCoinAddress, null, options, request);
      }
      /// <summary>
      ///绑定用户充币地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> BindUserCoinAddressAsync(global::Proto.UserCoinAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BindUserCoinAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///绑定用户充币地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> BindUserCoinAddressAsync(global::Proto.UserCoinAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BindUserCoinAddress, null, options, request);
      }
      /// <summary>
      ///查询用户充币地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.UserCoinListReply QueryUserCoinAddress(global::Proto.UserCoinAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserCoinAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户充币地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.UserCoinListReply QueryUserCoinAddress(global::Proto.UserCoinAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryUserCoinAddress, null, options, request);
      }
      /// <summary>
      ///查询用户充币地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.UserCoinListReply> QueryUserCoinAddressAsync(global::Proto.UserCoinAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserCoinAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户充币地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.UserCoinListReply> QueryUserCoinAddressAsync(global::Proto.UserCoinAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryUserCoinAddress, null, options, request);
      }
      /// <summary>
      ///添加用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty AddWalletAddress(global::Proto.WalletAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddWalletAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///添加用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty AddWalletAddress(global::Proto.WalletAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddWalletAddress, null, options, request);
      }
      /// <summary>
      ///添加用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> AddWalletAddressAsync(global::Proto.WalletAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddWalletAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///添加用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> AddWalletAddressAsync(global::Proto.WalletAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddWalletAddress, null, options, request);
      }
      /// <summary>
      ///查询用户钱包地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.WalletAddressListReply QueryUserWalletAddress(global::Proto.WalletAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserWalletAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户钱包地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.WalletAddressListReply QueryUserWalletAddress(global::Proto.WalletAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryUserWalletAddress, null, options, request);
      }
      /// <summary>
      ///查询用户钱包地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.WalletAddressListReply> QueryUserWalletAddressAsync(global::Proto.WalletAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserWalletAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户钱包地址[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.WalletAddressListReply> QueryUserWalletAddressAsync(global::Proto.WalletAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryUserWalletAddress, null, options, request);
      }
      /// <summary>
      ///删除用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty DeleteUserWalletAddress(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteUserWalletAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty DeleteUserWalletAddress(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUserWalletAddress, null, options, request);
      }
      /// <summary>
      ///删除用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> DeleteUserWalletAddressAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteUserWalletAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///删除用户钱包地址[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> DeleteUserWalletAddressAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUserWalletAddress, null, options, request);
      }
      /// <summary>
      ///平台钱包信息查询
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.UserBalanceListReply QueryUserBalanceByFilter(global::Proto.UserCoinAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserBalanceByFilter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///平台钱包信息查询
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.UserBalanceListReply QueryUserBalanceByFilter(global::Proto.UserCoinAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryUserBalanceByFilter, null, options, request);
      }
      /// <summary>
      ///平台钱包信息查询
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.UserBalanceListReply> QueryUserBalanceByFilterAsync(global::Proto.UserCoinAddressReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserBalanceByFilterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///平台钱包信息查询
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.UserBalanceListReply> QueryUserBalanceByFilterAsync(global::Proto.UserCoinAddressReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryUserBalanceByFilter, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserWalletServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserWalletServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserWalletServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_BindUserCoinAddress, serviceImpl.BindUserCoinAddress)
          .AddMethod(__Method_QueryUserCoinAddress, serviceImpl.QueryUserCoinAddress)
          .AddMethod(__Method_AddWalletAddress, serviceImpl.AddWalletAddress)
          .AddMethod(__Method_QueryUserWalletAddress, serviceImpl.QueryUserWalletAddress)
          .AddMethod(__Method_DeleteUserWalletAddress, serviceImpl.DeleteUserWalletAddress)
          .AddMethod(__Method_QueryUserBalanceByFilter, serviceImpl.QueryUserBalanceByFilter).Build();
    }

  }
}
#endregion
