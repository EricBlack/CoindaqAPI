// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uwallet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from uwallet.proto</summary>
  public static partial class UwalletReflection {

    #region Descriptor
    /// <summary>File descriptor for uwallet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UwalletReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg11d2FsbGV0LnByb3RvEgVwcm90bxoMY29tbW9uLnByb3RvIjQKElVzZXJD",
            "b2luQWRkcmVzc1JlcRIOCgZ1c2VySWQYASABKAMSDgoGY29pbklkGAIgASgJ",
            "Ik8KEFdhbGxldEFkZHJlc3NSZXESDgoGdXNlcklkGAEgASgDEhQKDGN1cnJl",
            "bmN5TmFtZRgCIAEoCRIVCg13YWxsZXRBZGRyZXNzGAMgASgJIpMBChRVc2Vy",
            "Q29pbkFkZHJlc3NSZXBseRIRCgliYWxhbmNlSWQYASABKAkSDgoGdXNlcklk",
            "GAIgASgJEhIKCmN1cnJlbmN5SWQYAyABKAkSFAoMYmFsYW5jZVZhbHVlGAQg",
            "ASgDEhcKD3JlY2hhcmdlQWRkcmVzcxgFIAEoCRIVCg1RUkNvZGVBZGRyZXNz",
            "GAYgASgJIkYKEVVzZXJDb2luTGlzdFJlcGx5EjEKDHVzZXJDb2luTGlzdBgB",
            "IAMoCzIbLnByb3RvLlVzZXJDb2luQWRkcmVzc1JlcGx5IokBChZXYWxsZXRB",
            "ZGRyZXNzSW5mb1JlcGx5EgoKAmlkGAEgASgDEg4KBnVzZXJJZBgCIAEoAxIU",
            "CgxjdXJyZW5jeU5hbWUYAyABKAkSFQoNd2FsbGV0QWRkcmVzcxgEIAEoCRIS",
            "CgpjcmVhdGVUaW1lGAUgASgJEhIKCnVwZGF0ZVRpbWUYBiABKAkiTAoWV2Fs",
            "bGV0QWRkcmVzc0xpc3RSZXBseRIyCgtBZGRyZXNzTGlzdBgBIAMoCzIdLnBy",
            "b3RvLldhbGxldEFkZHJlc3NJbmZvUmVwbHkiggIKEFVzZXJCYWxhbmNlUmVw",
            "bHkSEQoJYmFsYW5jZUlkGAEgASgJEg4KBnVzZXJJZBgCIAEoCRISCgpjdXJy",
            "ZW5jeUlkGAMgASgJEhQKDGJhbGFuY2VWYWx1ZRgEIAEoAxIXCg9yZWNoYXJn",
            "ZUFkZHJlc3MYBSABKAkSFQoNcXJjb2RlQWRkcmVzcxgGIAEoCRIUCgx0b3Rh",
            "bEJhbGFuY2UYByABKAMSFwoPY2hhcmdlVW5BY2NvdW50GAggASgDEhoKEndp",
            "dGhkcmF3VW5UcmFuc2ZlchgJIAEoAxIUCgxsb2NrUG9zaXRpb24YCiABKAMS",
            "EAoIaWNvVW5kdWUYCyABKAMiRAoUVXNlckJhbGFuY2VMaXN0UmVwbHkSLAoL",
            "QmFsYW5jZUxpc3QYASADKAsyFy5wcm90by5Vc2VyQmFsYW5jZVJlcGx5MsQD",
            "ChFVc2VyV2FsbGV0U2VydmljZRJAChNCaW5kVXNlckNvaW5BZGRyZXNzEhku",
            "cHJvdG8uVXNlckNvaW5BZGRyZXNzUmVxGgwucHJvdG8uRW1wdHkiABJNChRR",
            "dWVyeVVzZXJDb2luQWRkcmVzcxIZLnByb3RvLlVzZXJDb2luQWRkcmVzc1Jl",
            "cRoYLnByb3RvLlVzZXJDb2luTGlzdFJlcGx5IgASOwoQQWRkV2FsbGV0QWRk",
            "cmVzcxIXLnByb3RvLldhbGxldEFkZHJlc3NSZXEaDC5wcm90by5FbXB0eSIA",
            "ElIKFlF1ZXJ5VXNlcldhbGxldEFkZHJlc3MSFy5wcm90by5XYWxsZXRBZGRy",
            "ZXNzUmVxGh0ucHJvdG8uV2FsbGV0QWRkcmVzc0xpc3RSZXBseSIAEjcKF0Rl",
            "bGV0ZVVzZXJXYWxsZXRBZGRyZXNzEgwucHJvdG8uSWRSZXEaDC5wcm90by5F",
            "bXB0eSIAElQKGFF1ZXJ5VXNlckJhbGFuY2VCeUZpbHRlchIZLnByb3RvLlVz",
            "ZXJDb2luQWRkcmVzc1JlcRobLnByb3RvLlVzZXJCYWxhbmNlTGlzdFJlcGx5",
            "IgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserCoinAddressReq), global::Proto.UserCoinAddressReq.Parser, new[]{ "UserId", "CoinId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.WalletAddressReq), global::Proto.WalletAddressReq.Parser, new[]{ "UserId", "CurrencyName", "WalletAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserCoinAddressReply), global::Proto.UserCoinAddressReply.Parser, new[]{ "BalanceId", "UserId", "CurrencyId", "BalanceValue", "RechargeAddress", "QRCodeAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserCoinListReply), global::Proto.UserCoinListReply.Parser, new[]{ "UserCoinList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.WalletAddressInfoReply), global::Proto.WalletAddressInfoReply.Parser, new[]{ "Id", "UserId", "CurrencyName", "WalletAddress", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.WalletAddressListReply), global::Proto.WalletAddressListReply.Parser, new[]{ "AddressList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserBalanceReply), global::Proto.UserBalanceReply.Parser, new[]{ "BalanceId", "UserId", "CurrencyId", "BalanceValue", "RechargeAddress", "QrcodeAddress", "TotalBalance", "ChargeUnAccount", "WithdrawUnTransfer", "LockPosition", "IcoUndue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserBalanceListReply), global::Proto.UserBalanceListReply.Parser, new[]{ "BalanceList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Bind User Coin Address
  /// </summary>
  public sealed partial class UserCoinAddressReq : pb::IMessage<UserCoinAddressReq> {
    private static readonly pb::MessageParser<UserCoinAddressReq> _parser = new pb::MessageParser<UserCoinAddressReq>(() => new UserCoinAddressReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCoinAddressReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinAddressReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinAddressReq(UserCoinAddressReq other) : this() {
      userId_ = other.userId_;
      coinId_ = other.coinId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinAddressReq Clone() {
      return new UserCoinAddressReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "coinId" field.</summary>
    public const int CoinIdFieldNumber = 2;
    private string coinId_ = "";
    /// <summary>
    ///币种
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinId {
      get { return coinId_; }
      set {
        coinId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCoinAddressReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCoinAddressReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (CoinId != other.CoinId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (CoinId.Length != 0) hash ^= CoinId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (CoinId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CoinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (CoinId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCoinAddressReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.CoinId.Length != 0) {
        CoinId = other.CoinId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            CoinId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Wallet Address
  /// </summary>
  public sealed partial class WalletAddressReq : pb::IMessage<WalletAddressReq> {
    private static readonly pb::MessageParser<WalletAddressReq> _parser = new pb::MessageParser<WalletAddressReq>(() => new WalletAddressReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletAddressReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressReq(WalletAddressReq other) : this() {
      userId_ = other.userId_;
      currencyName_ = other.currencyName_;
      walletAddress_ = other.walletAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressReq Clone() {
      return new WalletAddressReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "currencyName" field.</summary>
    public const int CurrencyNameFieldNumber = 2;
    private string currencyName_ = "";
    /// <summary>
    ///货币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyName {
      get { return currencyName_; }
      set {
        currencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "walletAddress" field.</summary>
    public const int WalletAddressFieldNumber = 3;
    private string walletAddress_ = "";
    /// <summary>
    ///钱包地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WalletAddress {
      get { return walletAddress_; }
      set {
        walletAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletAddressReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletAddressReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (CurrencyName != other.CurrencyName) return false;
      if (WalletAddress != other.WalletAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (CurrencyName.Length != 0) hash ^= CurrencyName.GetHashCode();
      if (WalletAddress.Length != 0) hash ^= WalletAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (CurrencyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrencyName);
      }
      if (WalletAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WalletAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (CurrencyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyName);
      }
      if (WalletAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WalletAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletAddressReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.CurrencyName.Length != 0) {
        CurrencyName = other.CurrencyName;
      }
      if (other.WalletAddress.Length != 0) {
        WalletAddress = other.WalletAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            CurrencyName = input.ReadString();
            break;
          }
          case 26: {
            WalletAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户充币地址信息
  /// </summary>
  public sealed partial class UserCoinAddressReply : pb::IMessage<UserCoinAddressReply> {
    private static readonly pb::MessageParser<UserCoinAddressReply> _parser = new pb::MessageParser<UserCoinAddressReply>(() => new UserCoinAddressReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCoinAddressReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinAddressReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinAddressReply(UserCoinAddressReply other) : this() {
      balanceId_ = other.balanceId_;
      userId_ = other.userId_;
      currencyId_ = other.currencyId_;
      balanceValue_ = other.balanceValue_;
      rechargeAddress_ = other.rechargeAddress_;
      qRCodeAddress_ = other.qRCodeAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinAddressReply Clone() {
      return new UserCoinAddressReply(this);
    }

    /// <summary>Field number for the "balanceId" field.</summary>
    public const int BalanceIdFieldNumber = 1;
    private string balanceId_ = "";
    /// <summary>
    ///Balance Id(udid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BalanceId {
      get { return balanceId_; }
      set {
        balanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currencyId" field.</summary>
    public const int CurrencyIdFieldNumber = 3;
    private string currencyId_ = "";
    /// <summary>
    ///货币代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balanceValue" field.</summary>
    public const int BalanceValueFieldNumber = 4;
    private long balanceValue_;
    /// <summary>
    ///金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceValue {
      get { return balanceValue_; }
      set {
        balanceValue_ = value;
      }
    }

    /// <summary>Field number for the "rechargeAddress" field.</summary>
    public const int RechargeAddressFieldNumber = 5;
    private string rechargeAddress_ = "";
    /// <summary>
    ///充币地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RechargeAddress {
      get { return rechargeAddress_; }
      set {
        rechargeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QRCodeAddress" field.</summary>
    public const int QRCodeAddressFieldNumber = 6;
    private string qRCodeAddress_ = "";
    /// <summary>
    ///充币地址二维码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QRCodeAddress {
      get { return qRCodeAddress_; }
      set {
        qRCodeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCoinAddressReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCoinAddressReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BalanceId != other.BalanceId) return false;
      if (UserId != other.UserId) return false;
      if (CurrencyId != other.CurrencyId) return false;
      if (BalanceValue != other.BalanceValue) return false;
      if (RechargeAddress != other.RechargeAddress) return false;
      if (QRCodeAddress != other.QRCodeAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BalanceId.Length != 0) hash ^= BalanceId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (CurrencyId.Length != 0) hash ^= CurrencyId.GetHashCode();
      if (BalanceValue != 0L) hash ^= BalanceValue.GetHashCode();
      if (RechargeAddress.Length != 0) hash ^= RechargeAddress.GetHashCode();
      if (QRCodeAddress.Length != 0) hash ^= QRCodeAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BalanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BalanceId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (CurrencyId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrencyId);
      }
      if (BalanceValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BalanceValue);
      }
      if (RechargeAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RechargeAddress);
      }
      if (QRCodeAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(QRCodeAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BalanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BalanceId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (CurrencyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
      }
      if (BalanceValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceValue);
      }
      if (RechargeAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RechargeAddress);
      }
      if (QRCodeAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QRCodeAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCoinAddressReply other) {
      if (other == null) {
        return;
      }
      if (other.BalanceId.Length != 0) {
        BalanceId = other.BalanceId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.CurrencyId.Length != 0) {
        CurrencyId = other.CurrencyId;
      }
      if (other.BalanceValue != 0L) {
        BalanceValue = other.BalanceValue;
      }
      if (other.RechargeAddress.Length != 0) {
        RechargeAddress = other.RechargeAddress;
      }
      if (other.QRCodeAddress.Length != 0) {
        QRCodeAddress = other.QRCodeAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BalanceId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            CurrencyId = input.ReadString();
            break;
          }
          case 32: {
            BalanceValue = input.ReadInt64();
            break;
          }
          case 42: {
            RechargeAddress = input.ReadString();
            break;
          }
          case 50: {
            QRCodeAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户充币地址列表信息
  /// </summary>
  public sealed partial class UserCoinListReply : pb::IMessage<UserCoinListReply> {
    private static readonly pb::MessageParser<UserCoinListReply> _parser = new pb::MessageParser<UserCoinListReply>(() => new UserCoinListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCoinListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinListReply(UserCoinListReply other) : this() {
      userCoinList_ = other.userCoinList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCoinListReply Clone() {
      return new UserCoinListReply(this);
    }

    /// <summary>Field number for the "userCoinList" field.</summary>
    public const int UserCoinListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.UserCoinAddressReply> _repeated_userCoinList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.UserCoinAddressReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.UserCoinAddressReply> userCoinList_ = new pbc::RepeatedField<global::Proto.UserCoinAddressReply>();
    /// <summary>
    ///充币地址列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.UserCoinAddressReply> UserCoinList {
      get { return userCoinList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCoinListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCoinListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userCoinList_.Equals(other.userCoinList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userCoinList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userCoinList_.WriteTo(output, _repeated_userCoinList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userCoinList_.CalculateSize(_repeated_userCoinList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCoinListReply other) {
      if (other == null) {
        return;
      }
      userCoinList_.Add(other.userCoinList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userCoinList_.AddEntriesFrom(input, _repeated_userCoinList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Wallet Address Info
  /// </summary>
  public sealed partial class WalletAddressInfoReply : pb::IMessage<WalletAddressInfoReply> {
    private static readonly pb::MessageParser<WalletAddressInfoReply> _parser = new pb::MessageParser<WalletAddressInfoReply>(() => new WalletAddressInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletAddressInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressInfoReply(WalletAddressInfoReply other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      currencyName_ = other.currencyName_;
      walletAddress_ = other.walletAddress_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressInfoReply Clone() {
      return new WalletAddressInfoReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "currencyName" field.</summary>
    public const int CurrencyNameFieldNumber = 3;
    private string currencyName_ = "";
    /// <summary>
    ///货币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyName {
      get { return currencyName_; }
      set {
        currencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "walletAddress" field.</summary>
    public const int WalletAddressFieldNumber = 4;
    private string walletAddress_ = "";
    /// <summary>
    ///钱包地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WalletAddress {
      get { return walletAddress_; }
      set {
        walletAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 6;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletAddressInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletAddressInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (CurrencyName != other.CurrencyName) return false;
      if (WalletAddress != other.WalletAddress) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (CurrencyName.Length != 0) hash ^= CurrencyName.GetHashCode();
      if (WalletAddress.Length != 0) hash ^= WalletAddress.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (CurrencyName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrencyName);
      }
      if (WalletAddress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WalletAddress);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (CurrencyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyName);
      }
      if (WalletAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WalletAddress);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletAddressInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.CurrencyName.Length != 0) {
        CurrencyName = other.CurrencyName;
      }
      if (other.WalletAddress.Length != 0) {
        WalletAddress = other.WalletAddress;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26: {
            CurrencyName = input.ReadString();
            break;
          }
          case 34: {
            WalletAddress = input.ReadString();
            break;
          }
          case 42: {
            CreateTime = input.ReadString();
            break;
          }
          case 50: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Wallet Address Info List
  /// </summary>
  public sealed partial class WalletAddressListReply : pb::IMessage<WalletAddressListReply> {
    private static readonly pb::MessageParser<WalletAddressListReply> _parser = new pb::MessageParser<WalletAddressListReply>(() => new WalletAddressListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletAddressListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressListReply(WalletAddressListReply other) : this() {
      addressList_ = other.addressList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAddressListReply Clone() {
      return new WalletAddressListReply(this);
    }

    /// <summary>Field number for the "AddressList" field.</summary>
    public const int AddressListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.WalletAddressInfoReply> _repeated_addressList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.WalletAddressInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.WalletAddressInfoReply> addressList_ = new pbc::RepeatedField<global::Proto.WalletAddressInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.WalletAddressInfoReply> AddressList {
      get { return addressList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletAddressListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletAddressListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addressList_.Equals(other.addressList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addressList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addressList_.WriteTo(output, _repeated_addressList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addressList_.CalculateSize(_repeated_addressList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletAddressListReply other) {
      if (other == null) {
        return;
      }
      addressList_.Add(other.addressList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addressList_.AddEntriesFrom(input, _repeated_addressList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///User Balance Info
  /// </summary>
  public sealed partial class UserBalanceReply : pb::IMessage<UserBalanceReply> {
    private static readonly pb::MessageParser<UserBalanceReply> _parser = new pb::MessageParser<UserBalanceReply>(() => new UserBalanceReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBalanceReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBalanceReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBalanceReply(UserBalanceReply other) : this() {
      balanceId_ = other.balanceId_;
      userId_ = other.userId_;
      currencyId_ = other.currencyId_;
      balanceValue_ = other.balanceValue_;
      rechargeAddress_ = other.rechargeAddress_;
      qrcodeAddress_ = other.qrcodeAddress_;
      totalBalance_ = other.totalBalance_;
      chargeUnAccount_ = other.chargeUnAccount_;
      withdrawUnTransfer_ = other.withdrawUnTransfer_;
      lockPosition_ = other.lockPosition_;
      icoUndue_ = other.icoUndue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBalanceReply Clone() {
      return new UserBalanceReply(this);
    }

    /// <summary>Field number for the "balanceId" field.</summary>
    public const int BalanceIdFieldNumber = 1;
    private string balanceId_ = "";
    /// <summary>
    ///Balance Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BalanceId {
      get { return balanceId_; }
      set {
        balanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currencyId" field.</summary>
    public const int CurrencyIdFieldNumber = 3;
    private string currencyId_ = "";
    /// <summary>
    ///货币Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balanceValue" field.</summary>
    public const int BalanceValueFieldNumber = 4;
    private long balanceValue_;
    /// <summary>
    ///余额数字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceValue {
      get { return balanceValue_; }
      set {
        balanceValue_ = value;
      }
    }

    /// <summary>Field number for the "rechargeAddress" field.</summary>
    public const int RechargeAddressFieldNumber = 5;
    private string rechargeAddress_ = "";
    /// <summary>
    ///充币地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RechargeAddress {
      get { return rechargeAddress_; }
      set {
        rechargeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qrcodeAddress" field.</summary>
    public const int QrcodeAddressFieldNumber = 6;
    private string qrcodeAddress_ = "";
    /// <summary>
    ///二维码地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QrcodeAddress {
      get { return qrcodeAddress_; }
      set {
        qrcodeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalBalance" field.</summary>
    public const int TotalBalanceFieldNumber = 7;
    private long totalBalance_;
    /// <summary>
    ///账户总额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    /// <summary>Field number for the "chargeUnAccount" field.</summary>
    public const int ChargeUnAccountFieldNumber = 8;
    private long chargeUnAccount_;
    /// <summary>
    ///充值未到账
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChargeUnAccount {
      get { return chargeUnAccount_; }
      set {
        chargeUnAccount_ = value;
      }
    }

    /// <summary>Field number for the "withdrawUnTransfer" field.</summary>
    public const int WithdrawUnTransferFieldNumber = 9;
    private long withdrawUnTransfer_;
    /// <summary>
    ///提现未转出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WithdrawUnTransfer {
      get { return withdrawUnTransfer_; }
      set {
        withdrawUnTransfer_ = value;
      }
    }

    /// <summary>Field number for the "lockPosition" field.</summary>
    public const int LockPositionFieldNumber = 10;
    private long lockPosition_;
    /// <summary>
    ///锁仓不可卖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockPosition {
      get { return lockPosition_; }
      set {
        lockPosition_ = value;
      }
    }

    /// <summary>Field number for the "icoUndue" field.</summary>
    public const int IcoUndueFieldNumber = 11;
    private long icoUndue_;
    /// <summary>
    ///ico未到期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IcoUndue {
      get { return icoUndue_; }
      set {
        icoUndue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBalanceReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBalanceReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BalanceId != other.BalanceId) return false;
      if (UserId != other.UserId) return false;
      if (CurrencyId != other.CurrencyId) return false;
      if (BalanceValue != other.BalanceValue) return false;
      if (RechargeAddress != other.RechargeAddress) return false;
      if (QrcodeAddress != other.QrcodeAddress) return false;
      if (TotalBalance != other.TotalBalance) return false;
      if (ChargeUnAccount != other.ChargeUnAccount) return false;
      if (WithdrawUnTransfer != other.WithdrawUnTransfer) return false;
      if (LockPosition != other.LockPosition) return false;
      if (IcoUndue != other.IcoUndue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BalanceId.Length != 0) hash ^= BalanceId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (CurrencyId.Length != 0) hash ^= CurrencyId.GetHashCode();
      if (BalanceValue != 0L) hash ^= BalanceValue.GetHashCode();
      if (RechargeAddress.Length != 0) hash ^= RechargeAddress.GetHashCode();
      if (QrcodeAddress.Length != 0) hash ^= QrcodeAddress.GetHashCode();
      if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
      if (ChargeUnAccount != 0L) hash ^= ChargeUnAccount.GetHashCode();
      if (WithdrawUnTransfer != 0L) hash ^= WithdrawUnTransfer.GetHashCode();
      if (LockPosition != 0L) hash ^= LockPosition.GetHashCode();
      if (IcoUndue != 0L) hash ^= IcoUndue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BalanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BalanceId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (CurrencyId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrencyId);
      }
      if (BalanceValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BalanceValue);
      }
      if (RechargeAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RechargeAddress);
      }
      if (QrcodeAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(QrcodeAddress);
      }
      if (TotalBalance != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalBalance);
      }
      if (ChargeUnAccount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ChargeUnAccount);
      }
      if (WithdrawUnTransfer != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(WithdrawUnTransfer);
      }
      if (LockPosition != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LockPosition);
      }
      if (IcoUndue != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(IcoUndue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BalanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BalanceId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (CurrencyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
      }
      if (BalanceValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceValue);
      }
      if (RechargeAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RechargeAddress);
      }
      if (QrcodeAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QrcodeAddress);
      }
      if (TotalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
      }
      if (ChargeUnAccount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChargeUnAccount);
      }
      if (WithdrawUnTransfer != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WithdrawUnTransfer);
      }
      if (LockPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LockPosition);
      }
      if (IcoUndue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IcoUndue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBalanceReply other) {
      if (other == null) {
        return;
      }
      if (other.BalanceId.Length != 0) {
        BalanceId = other.BalanceId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.CurrencyId.Length != 0) {
        CurrencyId = other.CurrencyId;
      }
      if (other.BalanceValue != 0L) {
        BalanceValue = other.BalanceValue;
      }
      if (other.RechargeAddress.Length != 0) {
        RechargeAddress = other.RechargeAddress;
      }
      if (other.QrcodeAddress.Length != 0) {
        QrcodeAddress = other.QrcodeAddress;
      }
      if (other.TotalBalance != 0L) {
        TotalBalance = other.TotalBalance;
      }
      if (other.ChargeUnAccount != 0L) {
        ChargeUnAccount = other.ChargeUnAccount;
      }
      if (other.WithdrawUnTransfer != 0L) {
        WithdrawUnTransfer = other.WithdrawUnTransfer;
      }
      if (other.LockPosition != 0L) {
        LockPosition = other.LockPosition;
      }
      if (other.IcoUndue != 0L) {
        IcoUndue = other.IcoUndue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BalanceId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            CurrencyId = input.ReadString();
            break;
          }
          case 32: {
            BalanceValue = input.ReadInt64();
            break;
          }
          case 42: {
            RechargeAddress = input.ReadString();
            break;
          }
          case 50: {
            QrcodeAddress = input.ReadString();
            break;
          }
          case 56: {
            TotalBalance = input.ReadInt64();
            break;
          }
          case 64: {
            ChargeUnAccount = input.ReadInt64();
            break;
          }
          case 72: {
            WithdrawUnTransfer = input.ReadInt64();
            break;
          }
          case 80: {
            LockPosition = input.ReadInt64();
            break;
          }
          case 88: {
            IcoUndue = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserBalanceListReply : pb::IMessage<UserBalanceListReply> {
    private static readonly pb::MessageParser<UserBalanceListReply> _parser = new pb::MessageParser<UserBalanceListReply>(() => new UserBalanceListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBalanceListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UwalletReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBalanceListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBalanceListReply(UserBalanceListReply other) : this() {
      balanceList_ = other.balanceList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBalanceListReply Clone() {
      return new UserBalanceListReply(this);
    }

    /// <summary>Field number for the "BalanceList" field.</summary>
    public const int BalanceListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.UserBalanceReply> _repeated_balanceList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.UserBalanceReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.UserBalanceReply> balanceList_ = new pbc::RepeatedField<global::Proto.UserBalanceReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.UserBalanceReply> BalanceList {
      get { return balanceList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBalanceListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBalanceListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!balanceList_.Equals(other.balanceList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= balanceList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      balanceList_.WriteTo(output, _repeated_balanceList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += balanceList_.CalculateSize(_repeated_balanceList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBalanceListReply other) {
      if (other == null) {
        return;
      }
      balanceList_.Add(other.balanceList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            balanceList_.AddEntriesFrom(input, _repeated_balanceList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
