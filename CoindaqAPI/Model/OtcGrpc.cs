// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: otc.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Proto {
  /// <summary>
  ///*
  /// Otc Service Grpc API
  /// </summary>
  public static partial class OtcService
  {
    static readonly string __ServiceName = "proto.OtcService";

    static readonly grpc::Marshaller<global::Proto.PaymentAccountReq> __Marshaller_PaymentAccountReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.PaymentAccountReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.AccountFilterReq> __Marshaller_AccountFilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.AccountFilterReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.AccountListReply> __Marshaller_AccountListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.AccountListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.MessageReq> __Marshaller_MessageReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.MessageReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.UserPairReq> __Marshaller_UserPairReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.UserPairReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.MessageListReply> __Marshaller_MessageListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.MessageListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.PairFilterReq> __Marshaller_PairFilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.PairFilterReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CurrencyPairListReply> __Marshaller_CurrencyPairListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CurrencyPairListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcOrderReq> __Marshaller_OtcOrderReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcOrderReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcFilterReq> __Marshaller_OtcFilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcFilterReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcOrderListReply> __Marshaller_OtcOrderListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcOrderListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.IdReq> __Marshaller_IdReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.IdReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcOrderReply> __Marshaller_OtcOrderReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcOrderReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcDetailReq> __Marshaller_OtcDetailReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcDetailReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcDetailsReply> __Marshaller_OtcDetailsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcDetailsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.MarkUserPaiedReq> __Marshaller_MarkUserPaiedReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.MarkUserPaiedReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.ComplainReq> __Marshaller_ComplainReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ComplainReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcDetailsListReply> __Marshaller_OtcDetailsListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcDetailsListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.OtcDetailsFilterReq> __Marshaller_OtcDetailsFilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.OtcDetailsFilterReq.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.PaymentAccountReq, global::Proto.Empty> __Method_AddPaymentAccount = new grpc::Method<global::Proto.PaymentAccountReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPaymentAccount",
        __Marshaller_PaymentAccountReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.AccountFilterReq, global::Proto.Empty> __Method_DeletePaymentAccount = new grpc::Method<global::Proto.AccountFilterReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePaymentAccount",
        __Marshaller_AccountFilterReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.AccountFilterReq, global::Proto.AccountListReply> __Method_QueryPaymentAccount = new grpc::Method<global::Proto.AccountFilterReq, global::Proto.AccountListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryPaymentAccount",
        __Marshaller_AccountFilterReq,
        __Marshaller_AccountListReply);

    static readonly grpc::Method<global::Proto.MessageReq, global::Proto.Empty> __Method_AddShortMessage = new grpc::Method<global::Proto.MessageReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddShortMessage",
        __Marshaller_MessageReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.UserPairReq, global::Proto.MessageListReply> __Method_QueryShortMessages = new grpc::Method<global::Proto.UserPairReq, global::Proto.MessageListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryShortMessages",
        __Marshaller_UserPairReq,
        __Marshaller_MessageListReply);

    static readonly grpc::Method<global::Proto.PairFilterReq, global::Proto.CurrencyPairListReply> __Method_QueryCurrencyPairs = new grpc::Method<global::Proto.PairFilterReq, global::Proto.CurrencyPairListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryCurrencyPairs",
        __Marshaller_PairFilterReq,
        __Marshaller_CurrencyPairListReply);

    static readonly grpc::Method<global::Proto.OtcOrderReq, global::Proto.Empty> __Method_CreateOtcOrder = new grpc::Method<global::Proto.OtcOrderReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOtcOrder",
        __Marshaller_OtcOrderReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.OtcFilterReq, global::Proto.OtcOrderListReply> __Method_QueryOtcOrderList = new grpc::Method<global::Proto.OtcFilterReq, global::Proto.OtcOrderListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOtcOrderList",
        __Marshaller_OtcFilterReq,
        __Marshaller_OtcOrderListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.OtcOrderReply> __Method_QueryOtcOrderDetails = new grpc::Method<global::Proto.IdReq, global::Proto.OtcOrderReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOtcOrderDetails",
        __Marshaller_IdReq,
        __Marshaller_OtcOrderReply);

    static readonly grpc::Method<global::Proto.OtcDetailReq, global::Proto.OtcDetailsReply> __Method_ConfirmDealOrder = new grpc::Method<global::Proto.OtcDetailReq, global::Proto.OtcDetailsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfirmDealOrder",
        __Marshaller_OtcDetailReq,
        __Marshaller_OtcDetailsReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.Empty> __Method_CancelDealOrder = new grpc::Method<global::Proto.IdReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelDealOrder",
        __Marshaller_IdReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.MarkUserPaiedReq, global::Proto.Empty> __Method_MarkOrderPayment = new grpc::Method<global::Proto.MarkUserPaiedReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarkOrderPayment",
        __Marshaller_MarkUserPaiedReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.ComplainReq, global::Proto.Empty> __Method_ComplainOrderPayment = new grpc::Method<global::Proto.ComplainReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ComplainOrderPayment",
        __Marshaller_ComplainReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.OtcDetailsReply> __Method_QueryOtcDetailsById = new grpc::Method<global::Proto.IdReq, global::Proto.OtcDetailsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOtcDetailsById",
        __Marshaller_IdReq,
        __Marshaller_OtcDetailsReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.OtcDetailsListReply> __Method_QueryOtcOrderDetailsListByOtcOrderId = new grpc::Method<global::Proto.IdReq, global::Proto.OtcDetailsListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOtcOrderDetailsListByOtcOrderId",
        __Marshaller_IdReq,
        __Marshaller_OtcDetailsListReply);

    static readonly grpc::Method<global::Proto.OtcDetailsFilterReq, global::Proto.OtcDetailsListReply> __Method_QueryUserOrderDetailsListByFilter = new grpc::Method<global::Proto.OtcDetailsFilterReq, global::Proto.OtcDetailsListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryUserOrderDetailsListByFilter",
        __Marshaller_OtcDetailsFilterReq,
        __Marshaller_OtcDetailsListReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.OtcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OtcService</summary>
    public abstract partial class OtcServiceBase
    {
      /// <summary>
      ///支付账号添加 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> AddPaymentAccount(global::Proto.PaymentAccountReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///支付账号删除 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> DeletePaymentAccount(global::Proto.AccountFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///支付账号查询 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.AccountListReply> QueryPaymentAccount(global::Proto.AccountFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///消息添加 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> AddShortMessage(global::Proto.MessageReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///消息列表查询 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.MessageListReply> QueryShortMessages(global::Proto.UserPairReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///交易对信息查询 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CurrencyPairListReply> QueryCurrencyPairs(global::Proto.PairFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建Otc订单 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> CreateOtcOrder(global::Proto.OtcOrderReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询广告单列表信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.OtcOrderListReply> QueryOtcOrderList(global::Proto.OtcFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询广告单详细信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.OtcOrderReply> QueryOtcOrderDetails(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///确认下单交易 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.OtcDetailsReply> ConfirmDealOrder(global::Proto.OtcDetailReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///取消订单 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> CancelDealOrder(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///确认已付款 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> MarkOrderPayment(global::Proto.MarkUserPaiedReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///订单申诉 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> ComplainOrderPayment(global::Proto.ComplainReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询订单详细信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.OtcDetailsReply> QueryOtcDetailsById(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询广告单关联订单信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.OtcDetailsListReply> QueryOtcOrderDetailsListByOtcOrderId(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询用户参与订单信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.OtcDetailsListReply> QueryUserOrderDetailsListByFilter(global::Proto.OtcDetailsFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OtcService</summary>
    public partial class OtcServiceClient : grpc::ClientBase<OtcServiceClient>
    {
      /// <summary>Creates a new client for OtcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OtcServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OtcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OtcServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OtcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OtcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///支付账号添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty AddPaymentAccount(global::Proto.PaymentAccountReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddPaymentAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///支付账号添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty AddPaymentAccount(global::Proto.PaymentAccountReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddPaymentAccount, null, options, request);
      }
      /// <summary>
      ///支付账号添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> AddPaymentAccountAsync(global::Proto.PaymentAccountReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddPaymentAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///支付账号添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> AddPaymentAccountAsync(global::Proto.PaymentAccountReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddPaymentAccount, null, options, request);
      }
      /// <summary>
      ///支付账号删除 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty DeletePaymentAccount(global::Proto.AccountFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeletePaymentAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///支付账号删除 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty DeletePaymentAccount(global::Proto.AccountFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePaymentAccount, null, options, request);
      }
      /// <summary>
      ///支付账号删除 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> DeletePaymentAccountAsync(global::Proto.AccountFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeletePaymentAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///支付账号删除 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> DeletePaymentAccountAsync(global::Proto.AccountFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePaymentAccount, null, options, request);
      }
      /// <summary>
      ///支付账号查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.AccountListReply QueryPaymentAccount(global::Proto.AccountFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryPaymentAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///支付账号查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.AccountListReply QueryPaymentAccount(global::Proto.AccountFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryPaymentAccount, null, options, request);
      }
      /// <summary>
      ///支付账号查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.AccountListReply> QueryPaymentAccountAsync(global::Proto.AccountFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryPaymentAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///支付账号查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.AccountListReply> QueryPaymentAccountAsync(global::Proto.AccountFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryPaymentAccount, null, options, request);
      }
      /// <summary>
      ///消息添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty AddShortMessage(global::Proto.MessageReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddShortMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///消息添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty AddShortMessage(global::Proto.MessageReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddShortMessage, null, options, request);
      }
      /// <summary>
      ///消息添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> AddShortMessageAsync(global::Proto.MessageReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddShortMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///消息添加 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> AddShortMessageAsync(global::Proto.MessageReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddShortMessage, null, options, request);
      }
      /// <summary>
      ///消息列表查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MessageListReply QueryShortMessages(global::Proto.UserPairReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryShortMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///消息列表查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MessageListReply QueryShortMessages(global::Proto.UserPairReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryShortMessages, null, options, request);
      }
      /// <summary>
      ///消息列表查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MessageListReply> QueryShortMessagesAsync(global::Proto.UserPairReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryShortMessagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///消息列表查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MessageListReply> QueryShortMessagesAsync(global::Proto.UserPairReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryShortMessages, null, options, request);
      }
      /// <summary>
      ///交易对信息查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CurrencyPairListReply QueryCurrencyPairs(global::Proto.PairFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryCurrencyPairs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///交易对信息查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CurrencyPairListReply QueryCurrencyPairs(global::Proto.PairFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryCurrencyPairs, null, options, request);
      }
      /// <summary>
      ///交易对信息查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CurrencyPairListReply> QueryCurrencyPairsAsync(global::Proto.PairFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryCurrencyPairsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///交易对信息查询 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CurrencyPairListReply> QueryCurrencyPairsAsync(global::Proto.PairFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryCurrencyPairs, null, options, request);
      }
      /// <summary>
      ///创建Otc订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty CreateOtcOrder(global::Proto.OtcOrderReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOtcOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建Otc订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty CreateOtcOrder(global::Proto.OtcOrderReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOtcOrder, null, options, request);
      }
      /// <summary>
      ///创建Otc订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> CreateOtcOrderAsync(global::Proto.OtcOrderReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateOtcOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建Otc订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> CreateOtcOrderAsync(global::Proto.OtcOrderReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOtcOrder, null, options, request);
      }
      /// <summary>
      ///查询广告单列表信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcOrderListReply QueryOtcOrderList(global::Proto.OtcFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcOrderList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询广告单列表信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcOrderListReply QueryOtcOrderList(global::Proto.OtcFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOtcOrderList, null, options, request);
      }
      /// <summary>
      ///查询广告单列表信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcOrderListReply> QueryOtcOrderListAsync(global::Proto.OtcFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcOrderListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询广告单列表信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcOrderListReply> QueryOtcOrderListAsync(global::Proto.OtcFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOtcOrderList, null, options, request);
      }
      /// <summary>
      ///查询广告单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcOrderReply QueryOtcOrderDetails(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcOrderDetails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询广告单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcOrderReply QueryOtcOrderDetails(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOtcOrderDetails, null, options, request);
      }
      /// <summary>
      ///查询广告单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcOrderReply> QueryOtcOrderDetailsAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcOrderDetailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询广告单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcOrderReply> QueryOtcOrderDetailsAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOtcOrderDetails, null, options, request);
      }
      /// <summary>
      ///确认下单交易 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsReply ConfirmDealOrder(global::Proto.OtcDetailReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ConfirmDealOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///确认下单交易 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsReply ConfirmDealOrder(global::Proto.OtcDetailReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfirmDealOrder, null, options, request);
      }
      /// <summary>
      ///确认下单交易 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsReply> ConfirmDealOrderAsync(global::Proto.OtcDetailReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ConfirmDealOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///确认下单交易 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsReply> ConfirmDealOrderAsync(global::Proto.OtcDetailReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfirmDealOrder, null, options, request);
      }
      /// <summary>
      ///取消订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty CancelDealOrder(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CancelDealOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///取消订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty CancelDealOrder(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelDealOrder, null, options, request);
      }
      /// <summary>
      ///取消订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> CancelDealOrderAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CancelDealOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///取消订单 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> CancelDealOrderAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelDealOrder, null, options, request);
      }
      /// <summary>
      ///确认已付款 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty MarkOrderPayment(global::Proto.MarkUserPaiedReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MarkOrderPayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///确认已付款 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty MarkOrderPayment(global::Proto.MarkUserPaiedReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkOrderPayment, null, options, request);
      }
      /// <summary>
      ///确认已付款 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> MarkOrderPaymentAsync(global::Proto.MarkUserPaiedReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MarkOrderPaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///确认已付款 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> MarkOrderPaymentAsync(global::Proto.MarkUserPaiedReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkOrderPayment, null, options, request);
      }
      /// <summary>
      ///订单申诉 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty ComplainOrderPayment(global::Proto.ComplainReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ComplainOrderPayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///订单申诉 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty ComplainOrderPayment(global::Proto.ComplainReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ComplainOrderPayment, null, options, request);
      }
      /// <summary>
      ///订单申诉 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> ComplainOrderPaymentAsync(global::Proto.ComplainReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ComplainOrderPaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///订单申诉 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> ComplainOrderPaymentAsync(global::Proto.ComplainReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ComplainOrderPayment, null, options, request);
      }
      /// <summary>
      ///查询订单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsReply QueryOtcDetailsById(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcDetailsById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询订单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsReply QueryOtcDetailsById(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOtcDetailsById, null, options, request);
      }
      /// <summary>
      ///查询订单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsReply> QueryOtcDetailsByIdAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcDetailsByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询订单详细信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsReply> QueryOtcDetailsByIdAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOtcDetailsById, null, options, request);
      }
      /// <summary>
      ///查询广告单关联订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsListReply QueryOtcOrderDetailsListByOtcOrderId(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcOrderDetailsListByOtcOrderId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询广告单关联订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsListReply QueryOtcOrderDetailsListByOtcOrderId(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOtcOrderDetailsListByOtcOrderId, null, options, request);
      }
      /// <summary>
      ///查询广告单关联订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsListReply> QueryOtcOrderDetailsListByOtcOrderIdAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryOtcOrderDetailsListByOtcOrderIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询广告单关联订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsListReply> QueryOtcOrderDetailsListByOtcOrderIdAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOtcOrderDetailsListByOtcOrderId, null, options, request);
      }
      /// <summary>
      ///查询用户参与订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsListReply QueryUserOrderDetailsListByFilter(global::Proto.OtcDetailsFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserOrderDetailsListByFilter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户参与订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.OtcDetailsListReply QueryUserOrderDetailsListByFilter(global::Proto.OtcDetailsFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryUserOrderDetailsListByFilter, null, options, request);
      }
      /// <summary>
      ///查询用户参与订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsListReply> QueryUserOrderDetailsListByFilterAsync(global::Proto.OtcDetailsFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserOrderDetailsListByFilterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户参与订单信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.OtcDetailsListReply> QueryUserOrderDetailsListByFilterAsync(global::Proto.OtcDetailsFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryUserOrderDetailsListByFilter, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OtcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OtcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(OtcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddPaymentAccount, serviceImpl.AddPaymentAccount)
          .AddMethod(__Method_DeletePaymentAccount, serviceImpl.DeletePaymentAccount)
          .AddMethod(__Method_QueryPaymentAccount, serviceImpl.QueryPaymentAccount)
          .AddMethod(__Method_AddShortMessage, serviceImpl.AddShortMessage)
          .AddMethod(__Method_QueryShortMessages, serviceImpl.QueryShortMessages)
          .AddMethod(__Method_QueryCurrencyPairs, serviceImpl.QueryCurrencyPairs)
          .AddMethod(__Method_CreateOtcOrder, serviceImpl.CreateOtcOrder)
          .AddMethod(__Method_QueryOtcOrderList, serviceImpl.QueryOtcOrderList)
          .AddMethod(__Method_QueryOtcOrderDetails, serviceImpl.QueryOtcOrderDetails)
          .AddMethod(__Method_ConfirmDealOrder, serviceImpl.ConfirmDealOrder)
          .AddMethod(__Method_CancelDealOrder, serviceImpl.CancelDealOrder)
          .AddMethod(__Method_MarkOrderPayment, serviceImpl.MarkOrderPayment)
          .AddMethod(__Method_ComplainOrderPayment, serviceImpl.ComplainOrderPayment)
          .AddMethod(__Method_QueryOtcDetailsById, serviceImpl.QueryOtcDetailsById)
          .AddMethod(__Method_QueryOtcOrderDetailsListByOtcOrderId, serviceImpl.QueryOtcOrderDetailsListByOtcOrderId)
          .AddMethod(__Method_QueryUserOrderDetailsListByFilter, serviceImpl.QueryUserOrderDetailsListByFilter).Build();
    }

  }
}
#endregion
