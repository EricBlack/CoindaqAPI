// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from kyc.proto</summary>
  public static partial class KycReflection {

    #region Descriptor
    /// <summary>File descriptor for kyc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KycReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglreWMucHJvdG8SBXByb3RvGgxjb21tb24ucHJvdG8i3QEKDENyZWF0ZUt5",
            "Y1JlcRIOCgZ1c2VySWQYASABKAMSHQoEa2luZBgCIAEoDjIPLnByb3RvLlVz",
            "ZXJLaW5kEhAKCHJlYWxOYW1lGAMgASgJEhMKC2NvdW50cnlDb2RlGAQgASgF",
            "EikKDGlkZW50aXR5VHlwZRgFIAEoDjITLnByb3RvLklkZW50aXR5VHlwZRIS",
            "CgppZGVudGl0eUlkGAYgASgJEhIKCnBob3RvRnJvbnQYByABKAkSEQoJcGhv",
            "dG9CYWNrGAggASgJEhEKCXBob3RvSGFuZBgJIAEoCSI+CgxMYXRlc3RLeWNS",
            "ZXESDgoGdXNlcklkGAEgASgDEh4KBXN0YWdlGAIgASgOMg8ucHJvdG8uS3lj",
            "U3RhZ2Ui2QEKDFVwZGF0ZUt5Y1JlcRIKCgJpZBgBIAEoAxIdCgRraW5kGAIg",
            "ASgOMg8ucHJvdG8uVXNlcktpbmQSEAoIcmVhbE5hbWUYAyABKAkSEwoLY291",
            "bnRyeUNvZGUYBCABKAUSKQoMaWRlbnRpdHlUeXBlGAUgASgOMhMucHJvdG8u",
            "SWRlbnRpdHlUeXBlEhIKCmlkZW50aXR5SWQYBiABKAkSEgoKcGhvdG9Gcm9u",
            "dBgHIAEoCRIRCglwaG90b0JhY2sYCCABKAkSEQoJcGhvdG9IYW5kGAkgASgJ",
            "IioKDEhhbmRsZUt5Y1JlcRIKCgJpZBgBIAEoAxIOCgZyZWFzb24YAiABKAki",
            "OwoJRmlsdGVyUmVxEg4KBnVzZXJJZBgBIAEoAxIeCgVzdGF0ZRgCIAEoDjIP",
            "LnByb3RvLkt5Y1N0YXRlIhYKCEt5Y1JlcGx5EgoKAmlkGAEgASgDItYCCgxL",
            "eWNJbmZvUmVwbHkSCgoCaWQYASABKAMSDgoGdXNlcklkGAIgASgDEh0KBGtp",
            "bmQYAyABKA4yDy5wcm90by5Vc2VyS2luZBIQCghyZWFsTmFtZRgEIAEoCRIT",
            "Cgtjb3VudHJ5Q29kZRgFIAEoBRITCgtjb3VudHJ5TmFtZRgGIAEoCRIpCgxp",
            "ZGVudGl0eVR5cGUYByABKA4yEy5wcm90by5JZGVudGl0eVR5cGUSEgoKaWRl",
            "bnRpdHlJZBgIIAEoCRISCgpwaG90b0Zyb250GAkgASgJEhEKCXBob3RvQmFj",
            "axgKIAEoCRIRCglwaG90b0hhbmQYCyABKAkSHgoFc3RhdGUYDCABKA4yDy5w",
            "cm90by5LeWNTdGF0ZRIOCgZyZWFzb24YDSABKAkSEgoKY3JlYXRlVGltZRgO",
            "IAEoCRISCgp1cGRhdGVUaW1lGA8gASgJIjUKDEt5Y0xpc3RSZXBseRIlCghr",
            "eWNJbmZvcxgBIAMoCzITLnByb3RvLkt5Y0luZm9SZXBseSJdChBDb3VudHJ5",
            "SW5mb1JlcGx5EgoKAmlkGAEgASgDEhEKCWNvdW50cnlOYhgCIAEoCRIMCgRt",
            "YXJrGAMgASgJEg0KBWVuYW1lGAQgASgJEg0KBWNuYW1lGAUgASgJIkAKEENv",
            "dW50cnlMaXN0UmVwbHkSLAoLQ291bnRyeUxpc3QYASADKAsyFy5wcm90by5D",
            "b3VudHJ5SW5mb1JlcGx5MqQDCgpLeWNTZXJ2aWNlEjAKCUNyZWF0ZUt5YxIT",
            "LnByb3RvLkNyZWF0ZUt5Y1JlcRoMLnByb3RvLkVtcHR5IgASNwoQUXVlcnlL",
            "eWNJbmZvQnlJZBIMLnByb3RvLklkUmVxGhMucHJvdG8uS3ljSW5mb1JlcGx5",
            "IgASNAoNVXBkYXRlS3ljSW5mbxITLnByb3RvLlVwZGF0ZUt5Y1JlcRoMLnBy",
            "b3RvLkVtcHR5IgASPgoQUXVlcnlLeWNMYXN0SW5mbxITLnByb3RvLkxhdGVz",
            "dEt5Y1JlcRoTLnByb3RvLkt5Y0luZm9SZXBseSIAEjgKDVF1ZXJ5S3ljSW5m",
            "b3MSEC5wcm90by5GaWx0ZXJSZXEaEy5wcm90by5LeWNMaXN0UmVwbHkiABI7",
            "ChBRdWVyeUNvdW50cnlCeUlkEgwucHJvdG8uSWRSZXEaFy5wcm90by5Db3Vu",
            "dHJ5SW5mb1JlcGx5IgASPgoTUXVlcnlBbGxDb3VudHJ5SW5mbxIMLnByb3Rv",
            "LkVtcHR5GhcucHJvdG8uQ291bnRyeUxpc3RSZXBseSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.CreateKycReq), global::Proto.CreateKycReq.Parser, new[]{ "UserId", "Kind", "RealName", "CountryCode", "IdentityType", "IdentityId", "PhotoFront", "PhotoBack", "PhotoHand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.LatestKycReq), global::Proto.LatestKycReq.Parser, new[]{ "UserId", "Stage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UpdateKycReq), global::Proto.UpdateKycReq.Parser, new[]{ "Id", "Kind", "RealName", "CountryCode", "IdentityType", "IdentityId", "PhotoFront", "PhotoBack", "PhotoHand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.HandleKycReq), global::Proto.HandleKycReq.Parser, new[]{ "Id", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.FilterReq), global::Proto.FilterReq.Parser, new[]{ "UserId", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.KycReply), global::Proto.KycReply.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.KycInfoReply), global::Proto.KycInfoReply.Parser, new[]{ "Id", "UserId", "Kind", "RealName", "CountryCode", "CountryName", "IdentityType", "IdentityId", "PhotoFront", "PhotoBack", "PhotoHand", "State", "Reason", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.KycListReply), global::Proto.KycListReply.Parser, new[]{ "KycInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.CountryInfoReply), global::Proto.CountryInfoReply.Parser, new[]{ "Id", "CountryNb", "Mark", "Ename", "Cname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.CountryListReply), global::Proto.CountryListReply.Parser, new[]{ "CountryList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateKycReq : pb::IMessage<CreateKycReq> {
    private static readonly pb::MessageParser<CreateKycReq> _parser = new pb::MessageParser<CreateKycReq>(() => new CreateKycReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateKycReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateKycReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateKycReq(CreateKycReq other) : this() {
      userId_ = other.userId_;
      kind_ = other.kind_;
      realName_ = other.realName_;
      countryCode_ = other.countryCode_;
      identityType_ = other.identityType_;
      identityId_ = other.identityId_;
      photoFront_ = other.photoFront_;
      photoBack_ = other.photoBack_;
      photoHand_ = other.photoHand_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateKycReq Clone() {
      return new CreateKycReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Proto.UserKind kind_ = 0;
    /// <summary>
    ///用户类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.UserKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "realName" field.</summary>
    public const int RealNameFieldNumber = 3;
    private string realName_ = "";
    /// <summary>
    ///真实姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 4;
    private int countryCode_;
    /// <summary>
    ///国家代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 5;
    private global::Proto.IdentityType identityType_ = 0;
    /// <summary>
    ///证件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.IdentityType IdentityType {
      get { return identityType_; }
      set {
        identityType_ = value;
      }
    }

    /// <summary>Field number for the "identityId" field.</summary>
    public const int IdentityIdFieldNumber = 6;
    private string identityId_ = "";
    /// <summary>
    ///证件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityId {
      get { return identityId_; }
      set {
        identityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoFront" field.</summary>
    public const int PhotoFrontFieldNumber = 7;
    private string photoFront_ = "";
    /// <summary>
    ///证件正面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoFront {
      get { return photoFront_; }
      set {
        photoFront_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoBack" field.</summary>
    public const int PhotoBackFieldNumber = 8;
    private string photoBack_ = "";
    /// <summary>
    ///证件背面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoBack {
      get { return photoBack_; }
      set {
        photoBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoHand" field.</summary>
    public const int PhotoHandFieldNumber = 9;
    private string photoHand_ = "";
    /// <summary>
    ///证件手持照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoHand {
      get { return photoHand_; }
      set {
        photoHand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateKycReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateKycReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Kind != other.Kind) return false;
      if (RealName != other.RealName) return false;
      if (CountryCode != other.CountryCode) return false;
      if (IdentityType != other.IdentityType) return false;
      if (IdentityId != other.IdentityId) return false;
      if (PhotoFront != other.PhotoFront) return false;
      if (PhotoBack != other.PhotoBack) return false;
      if (PhotoHand != other.PhotoHand) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
      if (IdentityType != 0) hash ^= IdentityType.GetHashCode();
      if (IdentityId.Length != 0) hash ^= IdentityId.GetHashCode();
      if (PhotoFront.Length != 0) hash ^= PhotoFront.GetHashCode();
      if (PhotoBack.Length != 0) hash ^= PhotoBack.GetHashCode();
      if (PhotoHand.Length != 0) hash ^= PhotoHand.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RealName);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CountryCode);
      }
      if (IdentityType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PhotoHand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (CountryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
      }
      if (IdentityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoHand);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateKycReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.CountryCode != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.IdentityType != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.IdentityId.Length != 0) {
        IdentityId = other.IdentityId;
      }
      if (other.PhotoFront.Length != 0) {
        PhotoFront = other.PhotoFront;
      }
      if (other.PhotoBack.Length != 0) {
        PhotoBack = other.PhotoBack;
      }
      if (other.PhotoHand.Length != 0) {
        PhotoHand = other.PhotoHand;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            kind_ = (global::Proto.UserKind) input.ReadEnum();
            break;
          }
          case 26: {
            RealName = input.ReadString();
            break;
          }
          case 32: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 40: {
            identityType_ = (global::Proto.IdentityType) input.ReadEnum();
            break;
          }
          case 50: {
            IdentityId = input.ReadString();
            break;
          }
          case 58: {
            PhotoFront = input.ReadString();
            break;
          }
          case 66: {
            PhotoBack = input.ReadString();
            break;
          }
          case 74: {
            PhotoHand = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LatestKycReq : pb::IMessage<LatestKycReq> {
    private static readonly pb::MessageParser<LatestKycReq> _parser = new pb::MessageParser<LatestKycReq>(() => new LatestKycReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatestKycReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestKycReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestKycReq(LatestKycReq other) : this() {
      userId_ = other.userId_;
      stage_ = other.stage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestKycReq Clone() {
      return new LatestKycReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private global::Proto.KycStage stage_ = 0;
    /// <summary>
    ///审核级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.KycStage Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatestKycReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatestKycReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Stage != other.Stage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Stage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatestKycReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            stage_ = (global::Proto.KycStage) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateKycReq : pb::IMessage<UpdateKycReq> {
    private static readonly pb::MessageParser<UpdateKycReq> _parser = new pb::MessageParser<UpdateKycReq>(() => new UpdateKycReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateKycReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateKycReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateKycReq(UpdateKycReq other) : this() {
      id_ = other.id_;
      kind_ = other.kind_;
      realName_ = other.realName_;
      countryCode_ = other.countryCode_;
      identityType_ = other.identityType_;
      identityId_ = other.identityId_;
      photoFront_ = other.photoFront_;
      photoBack_ = other.photoBack_;
      photoHand_ = other.photoHand_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateKycReq Clone() {
      return new UpdateKycReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///Kyc Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private global::Proto.UserKind kind_ = 0;
    /// <summary>
    ///用户类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.UserKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "realName" field.</summary>
    public const int RealNameFieldNumber = 3;
    private string realName_ = "";
    /// <summary>
    ///真实姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 4;
    private int countryCode_;
    /// <summary>
    ///国家代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 5;
    private global::Proto.IdentityType identityType_ = 0;
    /// <summary>
    ///证件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.IdentityType IdentityType {
      get { return identityType_; }
      set {
        identityType_ = value;
      }
    }

    /// <summary>Field number for the "identityId" field.</summary>
    public const int IdentityIdFieldNumber = 6;
    private string identityId_ = "";
    /// <summary>
    ///证件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityId {
      get { return identityId_; }
      set {
        identityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoFront" field.</summary>
    public const int PhotoFrontFieldNumber = 7;
    private string photoFront_ = "";
    /// <summary>
    ///证件正面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoFront {
      get { return photoFront_; }
      set {
        photoFront_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoBack" field.</summary>
    public const int PhotoBackFieldNumber = 8;
    private string photoBack_ = "";
    /// <summary>
    ///证件背面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoBack {
      get { return photoBack_; }
      set {
        photoBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoHand" field.</summary>
    public const int PhotoHandFieldNumber = 9;
    private string photoHand_ = "";
    /// <summary>
    ///证件手持照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoHand {
      get { return photoHand_; }
      set {
        photoHand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateKycReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateKycReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Kind != other.Kind) return false;
      if (RealName != other.RealName) return false;
      if (CountryCode != other.CountryCode) return false;
      if (IdentityType != other.IdentityType) return false;
      if (IdentityId != other.IdentityId) return false;
      if (PhotoFront != other.PhotoFront) return false;
      if (PhotoBack != other.PhotoBack) return false;
      if (PhotoHand != other.PhotoHand) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
      if (IdentityType != 0) hash ^= IdentityType.GetHashCode();
      if (IdentityId.Length != 0) hash ^= IdentityId.GetHashCode();
      if (PhotoFront.Length != 0) hash ^= PhotoFront.GetHashCode();
      if (PhotoBack.Length != 0) hash ^= PhotoBack.GetHashCode();
      if (PhotoHand.Length != 0) hash ^= PhotoHand.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Kind);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RealName);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CountryCode);
      }
      if (IdentityType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PhotoHand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (CountryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
      }
      if (IdentityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoHand);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateKycReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.CountryCode != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.IdentityType != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.IdentityId.Length != 0) {
        IdentityId = other.IdentityId;
      }
      if (other.PhotoFront.Length != 0) {
        PhotoFront = other.PhotoFront;
      }
      if (other.PhotoBack.Length != 0) {
        PhotoBack = other.PhotoBack;
      }
      if (other.PhotoHand.Length != 0) {
        PhotoHand = other.PhotoHand;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            kind_ = (global::Proto.UserKind) input.ReadEnum();
            break;
          }
          case 26: {
            RealName = input.ReadString();
            break;
          }
          case 32: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 40: {
            identityType_ = (global::Proto.IdentityType) input.ReadEnum();
            break;
          }
          case 50: {
            IdentityId = input.ReadString();
            break;
          }
          case 58: {
            PhotoFront = input.ReadString();
            break;
          }
          case 66: {
            PhotoBack = input.ReadString();
            break;
          }
          case 74: {
            PhotoHand = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HandleKycReq : pb::IMessage<HandleKycReq> {
    private static readonly pb::MessageParser<HandleKycReq> _parser = new pb::MessageParser<HandleKycReq>(() => new HandleKycReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandleKycReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleKycReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleKycReq(HandleKycReq other) : this() {
      id_ = other.id_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleKycReq Clone() {
      return new HandleKycReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///Kyc Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    /// <summary>
    ///原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandleKycReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandleKycReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandleKycReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilterReq : pb::IMessage<FilterReq> {
    private static readonly pb::MessageParser<FilterReq> _parser = new pb::MessageParser<FilterReq>(() => new FilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterReq(FilterReq other) : this() {
      userId_ = other.userId_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterReq Clone() {
      return new FilterReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Proto.KycState state_ = 0;
    /// <summary>
    ///审核状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.KycState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            state_ = (global::Proto.KycState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KycReply : pb::IMessage<KycReply> {
    private static readonly pb::MessageParser<KycReply> _parser = new pb::MessageParser<KycReply>(() => new KycReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KycReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycReply(KycReply other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycReply Clone() {
      return new KycReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KycReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KycReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KycReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KycInfoReply : pb::IMessage<KycInfoReply> {
    private static readonly pb::MessageParser<KycInfoReply> _parser = new pb::MessageParser<KycInfoReply>(() => new KycInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KycInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycInfoReply(KycInfoReply other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      kind_ = other.kind_;
      realName_ = other.realName_;
      countryCode_ = other.countryCode_;
      countryName_ = other.countryName_;
      identityType_ = other.identityType_;
      identityId_ = other.identityId_;
      photoFront_ = other.photoFront_;
      photoBack_ = other.photoBack_;
      photoHand_ = other.photoHand_;
      state_ = other.state_;
      reason_ = other.reason_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycInfoReply Clone() {
      return new KycInfoReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    ///Kyc Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private global::Proto.UserKind kind_ = 0;
    /// <summary>
    ///用户类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.UserKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "realName" field.</summary>
    public const int RealNameFieldNumber = 4;
    private string realName_ = "";
    /// <summary>
    ///真实姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 5;
    private int countryCode_;
    /// <summary>
    ///国家代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = value;
      }
    }

    /// <summary>Field number for the "countryName" field.</summary>
    public const int CountryNameFieldNumber = 6;
    private string countryName_ = "";
    /// <summary>
    ///国家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryName {
      get { return countryName_; }
      set {
        countryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 7;
    private global::Proto.IdentityType identityType_ = 0;
    /// <summary>
    ///证件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.IdentityType IdentityType {
      get { return identityType_; }
      set {
        identityType_ = value;
      }
    }

    /// <summary>Field number for the "identityId" field.</summary>
    public const int IdentityIdFieldNumber = 8;
    private string identityId_ = "";
    /// <summary>
    ///证件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityId {
      get { return identityId_; }
      set {
        identityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoFront" field.</summary>
    public const int PhotoFrontFieldNumber = 9;
    private string photoFront_ = "";
    /// <summary>
    ///证件正面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoFront {
      get { return photoFront_; }
      set {
        photoFront_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoBack" field.</summary>
    public const int PhotoBackFieldNumber = 10;
    private string photoBack_ = "";
    /// <summary>
    ///证件背面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoBack {
      get { return photoBack_; }
      set {
        photoBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoHand" field.</summary>
    public const int PhotoHandFieldNumber = 11;
    private string photoHand_ = "";
    /// <summary>
    ///证件手持照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoHand {
      get { return photoHand_; }
      set {
        photoHand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 12;
    private global::Proto.KycState state_ = 0;
    /// <summary>
    ///审核状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.KycState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 13;
    private string reason_ = "";
    /// <summary>
    ///审核原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 14;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 15;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KycInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KycInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (Kind != other.Kind) return false;
      if (RealName != other.RealName) return false;
      if (CountryCode != other.CountryCode) return false;
      if (CountryName != other.CountryName) return false;
      if (IdentityType != other.IdentityType) return false;
      if (IdentityId != other.IdentityId) return false;
      if (PhotoFront != other.PhotoFront) return false;
      if (PhotoBack != other.PhotoBack) return false;
      if (PhotoHand != other.PhotoHand) return false;
      if (State != other.State) return false;
      if (Reason != other.Reason) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (CountryCode != 0) hash ^= CountryCode.GetHashCode();
      if (CountryName.Length != 0) hash ^= CountryName.GetHashCode();
      if (IdentityType != 0) hash ^= IdentityType.GetHashCode();
      if (IdentityId.Length != 0) hash ^= IdentityId.GetHashCode();
      if (PhotoFront.Length != 0) hash ^= PhotoFront.GetHashCode();
      if (PhotoBack.Length != 0) hash ^= PhotoBack.GetHashCode();
      if (PhotoHand.Length != 0) hash ^= PhotoHand.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (Kind != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Kind);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RealName);
      }
      if (CountryCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CountryCode);
      }
      if (CountryName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CountryName);
      }
      if (IdentityType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PhotoHand);
      }
      if (State != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) State);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Reason);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (CountryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountryCode);
      }
      if (CountryName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryName);
      }
      if (IdentityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoHand);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KycInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.CountryCode != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.CountryName.Length != 0) {
        CountryName = other.CountryName;
      }
      if (other.IdentityType != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.IdentityId.Length != 0) {
        IdentityId = other.IdentityId;
      }
      if (other.PhotoFront.Length != 0) {
        PhotoFront = other.PhotoFront;
      }
      if (other.PhotoBack.Length != 0) {
        PhotoBack = other.PhotoBack;
      }
      if (other.PhotoHand.Length != 0) {
        PhotoHand = other.PhotoHand;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            kind_ = (global::Proto.UserKind) input.ReadEnum();
            break;
          }
          case 34: {
            RealName = input.ReadString();
            break;
          }
          case 40: {
            CountryCode = input.ReadInt32();
            break;
          }
          case 50: {
            CountryName = input.ReadString();
            break;
          }
          case 56: {
            identityType_ = (global::Proto.IdentityType) input.ReadEnum();
            break;
          }
          case 66: {
            IdentityId = input.ReadString();
            break;
          }
          case 74: {
            PhotoFront = input.ReadString();
            break;
          }
          case 82: {
            PhotoBack = input.ReadString();
            break;
          }
          case 90: {
            PhotoHand = input.ReadString();
            break;
          }
          case 96: {
            state_ = (global::Proto.KycState) input.ReadEnum();
            break;
          }
          case 106: {
            Reason = input.ReadString();
            break;
          }
          case 114: {
            CreateTime = input.ReadString();
            break;
          }
          case 122: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KycListReply : pb::IMessage<KycListReply> {
    private static readonly pb::MessageParser<KycListReply> _parser = new pb::MessageParser<KycListReply>(() => new KycListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KycListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycListReply(KycListReply other) : this() {
      kycInfos_ = other.kycInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KycListReply Clone() {
      return new KycListReply(this);
    }

    /// <summary>Field number for the "kycInfos" field.</summary>
    public const int KycInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.KycInfoReply> _repeated_kycInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.KycInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.KycInfoReply> kycInfos_ = new pbc::RepeatedField<global::Proto.KycInfoReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.KycInfoReply> KycInfos {
      get { return kycInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KycListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KycListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!kycInfos_.Equals(other.kycInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= kycInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      kycInfos_.WriteTo(output, _repeated_kycInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += kycInfos_.CalculateSize(_repeated_kycInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KycListReply other) {
      if (other == null) {
        return;
      }
      kycInfos_.Add(other.kycInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            kycInfos_.AddEntriesFrom(input, _repeated_kycInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CountryInfoReply : pb::IMessage<CountryInfoReply> {
    private static readonly pb::MessageParser<CountryInfoReply> _parser = new pb::MessageParser<CountryInfoReply>(() => new CountryInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountryInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryInfoReply(CountryInfoReply other) : this() {
      id_ = other.id_;
      countryNb_ = other.countryNb_;
      mark_ = other.mark_;
      ename_ = other.ename_;
      cname_ = other.cname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryInfoReply Clone() {
      return new CountryInfoReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "countryNb" field.</summary>
    public const int CountryNbFieldNumber = 2;
    private string countryNb_ = "";
    /// <summary>
    ///国家代号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryNb {
      get { return countryNb_; }
      set {
        countryNb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark" field.</summary>
    public const int MarkFieldNumber = 3;
    private string mark_ = "";
    /// <summary>
    ///国家缩写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mark {
      get { return mark_; }
      set {
        mark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ename" field.</summary>
    public const int EnameFieldNumber = 4;
    private string ename_ = "";
    /// <summary>
    ///英文名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ename {
      get { return ename_; }
      set {
        ename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cname" field.</summary>
    public const int CnameFieldNumber = 5;
    private string cname_ = "";
    /// <summary>
    ///中文名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cname {
      get { return cname_; }
      set {
        cname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountryInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountryInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CountryNb != other.CountryNb) return false;
      if (Mark != other.Mark) return false;
      if (Ename != other.Ename) return false;
      if (Cname != other.Cname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (CountryNb.Length != 0) hash ^= CountryNb.GetHashCode();
      if (Mark.Length != 0) hash ^= Mark.GetHashCode();
      if (Ename.Length != 0) hash ^= Ename.GetHashCode();
      if (Cname.Length != 0) hash ^= Cname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (CountryNb.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CountryNb);
      }
      if (Mark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mark);
      }
      if (Ename.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ename);
      }
      if (Cname.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Cname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (CountryNb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryNb);
      }
      if (Mark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mark);
      }
      if (Ename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ename);
      }
      if (Cname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountryInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.CountryNb.Length != 0) {
        CountryNb = other.CountryNb;
      }
      if (other.Mark.Length != 0) {
        Mark = other.Mark;
      }
      if (other.Ename.Length != 0) {
        Ename = other.Ename;
      }
      if (other.Cname.Length != 0) {
        Cname = other.Cname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            CountryNb = input.ReadString();
            break;
          }
          case 26: {
            Mark = input.ReadString();
            break;
          }
          case 34: {
            Ename = input.ReadString();
            break;
          }
          case 42: {
            Cname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CountryListReply : pb::IMessage<CountryListReply> {
    private static readonly pb::MessageParser<CountryListReply> _parser = new pb::MessageParser<CountryListReply>(() => new CountryListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountryListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.KycReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryListReply(CountryListReply other) : this() {
      countryList_ = other.countryList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountryListReply Clone() {
      return new CountryListReply(this);
    }

    /// <summary>Field number for the "CountryList" field.</summary>
    public const int CountryListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.CountryInfoReply> _repeated_countryList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.CountryInfoReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.CountryInfoReply> countryList_ = new pbc::RepeatedField<global::Proto.CountryInfoReply>();
    /// <summary>
    ///国家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.CountryInfoReply> CountryList {
      get { return countryList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountryListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountryListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!countryList_.Equals(other.countryList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= countryList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      countryList_.WriteTo(output, _repeated_countryList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += countryList_.CalculateSize(_repeated_countryList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountryListReply other) {
      if (other == null) {
        return;
      }
      countryList_.Add(other.countryList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            countryList_.AddEntriesFrom(input, _repeated_countryList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
