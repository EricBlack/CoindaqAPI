// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: two_factor.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Proto {
  /// <summary>
  ///*
  /// 二次验证API
  /// </summary>
  public static partial class TwoFactorService
  {
    static readonly string __ServiceName = "proto.TwoFactorService";

    static readonly grpc::Marshaller<global::Proto.FactorReq> __Marshaller_FactorReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.FactorReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.FactorReply> __Marshaller_FactorReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.FactorReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.InfoReq> __Marshaller_InfoReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.InfoReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.VerifyReply> __Marshaller_VerifyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.VerifyReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.FactorListReq> __Marshaller_FactorListReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.FactorListReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.VerifyFactorsReply> __Marshaller_VerifyFactorsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.VerifyFactorsReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.FactorReq, global::Proto.FactorReply> __Method_GenerateFactor = new grpc::Method<global::Proto.FactorReq, global::Proto.FactorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateFactor",
        __Marshaller_FactorReq,
        __Marshaller_FactorReply);

    static readonly grpc::Method<global::Proto.FactorReq, global::Proto.FactorReply> __Method_QueryFactor = new grpc::Method<global::Proto.FactorReq, global::Proto.FactorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryFactor",
        __Marshaller_FactorReq,
        __Marshaller_FactorReply);

    static readonly grpc::Method<global::Proto.FactorReq, global::Proto.FactorReply> __Method_RefreshFactor = new grpc::Method<global::Proto.FactorReq, global::Proto.FactorReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RefreshFactor",
        __Marshaller_FactorReq,
        __Marshaller_FactorReply);

    static readonly grpc::Method<global::Proto.InfoReq, global::Proto.VerifyReply> __Method_VerifyFactorCode = new grpc::Method<global::Proto.InfoReq, global::Proto.VerifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyFactorCode",
        __Marshaller_InfoReq,
        __Marshaller_VerifyReply);

    static readonly grpc::Method<global::Proto.FactorListReq, global::Proto.VerifyFactorsReply> __Method_VerifyUserFactors = new grpc::Method<global::Proto.FactorListReq, global::Proto.VerifyFactorsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyUserFactors",
        __Marshaller_FactorListReq,
        __Marshaller_VerifyFactorsReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.TwoFactorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TwoFactorService</summary>
    public abstract partial class TwoFactorServiceBase
    {
      /// <summary>
      ///*
      /// 生成二次验证信息[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.FactorReply> GenerateFactor(global::Proto.FactorReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 查询二次验证信息[GET]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.FactorReply> QueryFactor(global::Proto.FactorReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 更新二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.FactorReply> RefreshFactor(global::Proto.FactorReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 验证二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.VerifyReply> VerifyFactorCode(global::Proto.InfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      /// 验证用户二次验证信息集合 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.VerifyFactorsReply> VerifyUserFactors(global::Proto.FactorListReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TwoFactorService</summary>
    public partial class TwoFactorServiceClient : grpc::ClientBase<TwoFactorServiceClient>
    {
      /// <summary>Creates a new client for TwoFactorService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TwoFactorServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TwoFactorService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TwoFactorServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TwoFactorServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TwoFactorServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      /// 生成二次验证信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.FactorReply GenerateFactor(global::Proto.FactorReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateFactor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 生成二次验证信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.FactorReply GenerateFactor(global::Proto.FactorReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateFactor, null, options, request);
      }
      /// <summary>
      ///*
      /// 生成二次验证信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.FactorReply> GenerateFactorAsync(global::Proto.FactorReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateFactorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 生成二次验证信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.FactorReply> GenerateFactorAsync(global::Proto.FactorReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateFactor, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询二次验证信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.FactorReply QueryFactor(global::Proto.FactorReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryFactor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询二次验证信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.FactorReply QueryFactor(global::Proto.FactorReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryFactor, null, options, request);
      }
      /// <summary>
      ///*
      /// 查询二次验证信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.FactorReply> QueryFactorAsync(global::Proto.FactorReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryFactorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 查询二次验证信息[GET]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.FactorReply> QueryFactorAsync(global::Proto.FactorReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryFactor, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.FactorReply RefreshFactor(global::Proto.FactorReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshFactor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.FactorReply RefreshFactor(global::Proto.FactorReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshFactor, null, options, request);
      }
      /// <summary>
      ///*
      /// 更新二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.FactorReply> RefreshFactorAsync(global::Proto.FactorReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshFactorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 更新二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.FactorReply> RefreshFactorAsync(global::Proto.FactorReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshFactor, null, options, request);
      }
      /// <summary>
      ///*
      /// 验证二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.VerifyReply VerifyFactorCode(global::Proto.InfoReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyFactorCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 验证二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.VerifyReply VerifyFactorCode(global::Proto.InfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyFactorCode, null, options, request);
      }
      /// <summary>
      ///*
      /// 验证二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.VerifyReply> VerifyFactorCodeAsync(global::Proto.InfoReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyFactorCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 验证二次查询信息[POST]
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.VerifyReply> VerifyFactorCodeAsync(global::Proto.InfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyFactorCode, null, options, request);
      }
      /// <summary>
      ///*
      /// 验证用户二次验证信息集合 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.VerifyFactorsReply VerifyUserFactors(global::Proto.FactorListReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyUserFactors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 验证用户二次验证信息集合 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.VerifyFactorsReply VerifyUserFactors(global::Proto.FactorListReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyUserFactors, null, options, request);
      }
      /// <summary>
      ///*
      /// 验证用户二次验证信息集合 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.VerifyFactorsReply> VerifyUserFactorsAsync(global::Proto.FactorListReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyUserFactorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      /// 验证用户二次验证信息集合 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.VerifyFactorsReply> VerifyUserFactorsAsync(global::Proto.FactorListReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyUserFactors, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TwoFactorServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TwoFactorServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TwoFactorServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GenerateFactor, serviceImpl.GenerateFactor)
          .AddMethod(__Method_QueryFactor, serviceImpl.QueryFactor)
          .AddMethod(__Method_RefreshFactor, serviceImpl.RefreshFactor)
          .AddMethod(__Method_VerifyFactorCode, serviceImpl.VerifyFactorCode)
          .AddMethod(__Method_VerifyUserFactors, serviceImpl.VerifyUserFactors).Build();
    }

  }
}
#endregion
