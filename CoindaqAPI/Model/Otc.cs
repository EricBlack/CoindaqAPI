// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: otc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from otc.proto</summary>
  public static partial class OtcReflection {

    #region Descriptor
    /// <summary>File descriptor for otc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OtcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglvdGMucHJvdG8SBXByb3RvGgxjb21tb24ucHJvdG8itAEKEVBheW1lbnRB",
            "Y2NvdW50UmVxEg4KBnVzZXJJZBgBIAEoAxITCgthY2NvdW50TmFtZRgCIAEo",
            "CRInCgthY2NvdW50VHlwZRgDIAEoDjISLnByb3RvLkFjY291bnRUeXBlEhUK",
            "DWFjY291bnROdW1iZXIYBCABKAkSEAoIb3BlbkJhbmsYBSABKAkSDwoHc3Vi",
            "QmFuaxgGIAEoCRIXCg9wYXltZW50UGFzc3dvcmQYByABKAkiSwoQQWNjb3Vu",
            "dEZpbHRlclJlcRIOCgZ1c2VySWQYASABKAMSJwoLYWNjb3VudFR5cGUYAiAB",
            "KA4yEi5wcm90by5BY2NvdW50VHlwZSI/CgpNZXNzYWdlUmVxEhAKCHVzZXJG",
            "cm9tGAIgASgDEg4KBnVzZXJUbxgDIAEoAxIPCgdtZXNzYWdlGAQgASgJIjsK",
            "C1VzZXJQYWlyUmVxEg4KBmZyb21JZBgBIAEoAxIMCgR0b0lkGAIgASgDEg4K",
            "Bmxhc3RJZBgDIAEoAyKIAQoNUGFpckZpbHRlclJlcRIlCgh0eXBlSW5mbxgB",
            "IAEoDjITLnByb3RvLkN1cnJlbmN5VHlwZRIVCg1hQ3VycmVuY3lOYW1lGAIg",
            "ASgJEhUKDWJDdXJyZW5jeU5hbWUYAyABKAkSIgoIbWF0Y2hBbGwYBCABKA4y",
            "EC5wcm90by5Cb29sVmFsdWUi0wIKC090Y09yZGVyUmVxEg4KBnVzZXJJZBgB",
            "IAEoAxIhCgdidXlTZWxsGAIgASgOMhAucHJvdG8uVHJhZGVUeXBlEhQKDGN1",
            "cnJlbmN5UGFpchgDIAEoAxISCgpxdW90ZVByaWNlGAQgASgDEhMKC3F1b3Rl",
            "QW1vdW50GAUgASgDEhAKCG1pblZhbHVlGAYgASgDEhAKCG1heFZhbHVlGAcg",
            "ASgDEhIKCmV4cGlyZVRpbWUYCCABKAUSFQoNb3BlbkxpbWl0SG91chgJIAEo",
            "BRIXCg9vcGVuTGltaXRNaW51dGUYCiABKAUSFgoOY2xvc2VMaW1pdEhvdXIY",
            "CyABKAUSGAoQY2xvc2VMaW1pdE1pbnV0ZRgMIAEoBRIjCglhdXRvUmVwbHkY",
            "DSABKA4yEC5wcm90by5Cb29sVmFsdWUSEwoLYXV0b01lc3NhZ2UYDiABKAki",
            "pwEKDE90Y0ZpbHRlclJlcRIOCgZ1c2VySWQYASABKAMSIQoHYnV5U2VsbBgC",
            "IAEoDjIQLnByb3RvLlRyYWRlVHlwZRIWCg5jdXJyZW5jeVBhaXJJZBgDIAEo",
            "AxIjCglvcGVuU3RhdGUYBCABKA4yEC5wcm90by5Cb29sVmFsdWUSJwoJb3Rj",
            "U3RhdHVzGAUgASgOMhQucHJvdG8uT3RjU3RhdHVzVHlwZSJNCg5PdGNPcmRl",
            "ckZpbHRlchIWCg5jdXJyZW5jeVBhaXJJZBgBIAEoAxIjCgl0cmFkZVR5cGUY",
            "AiABKA4yEC5wcm90by5UcmFkZVR5cGUiWAoMT3RjRGV0YWlsUmVxEg4KBnVz",
            "ZXJJZBgBIAEoAxISCgpvdGNPcmRlcklkGAIgASgDEhEKCWJ1eUFtb3VudBgD",
            "IAEoAxIRCglwYXlBbW91bnQYBCABKAMiZQoQTWFya1VzZXJQYWllZFJlcRIO",
            "CgZ1c2VySWQYASABKAMSFQoNb3JkZXJEZXRhaWxJZBgCIAEoAxIqCgpwZXJz",
            "b25UeXBlGAMgASgOMhYucHJvdG8uT3JkZXJQZXJzb25UeXBlInEKC0NvbXBs",
            "YWluUmVxEg4KBnVzZXJJZBgBIAEoAxIVCg1vcmRlckRldGFpbElkGAIgASgD",
            "EioKCnBlcnNvblR5cGUYAyABKA4yFi5wcm90by5PcmRlclBlcnNvblR5cGUS",
            "DwoHbWVzc2FnZRgEIAEoCSJLChNPdGNEZXRhaWxzRmlsdGVyUmVxEg4KBnVz",
            "ZXJJZBgBIAEoAxIkCgVzdGF0ZRgCIAEoDjIVLnByb3RvLk9yZGVyU3RhdGVU",
            "eXBlIu8BCgxBY2NvdW50UmVwbHkSCgoCaWQYASABKAMSDgoGdXNlcklkGAIg",
            "ASgDEhMKC2FjY291bnROYW1lGAMgASgJEicKC2FjY291bnRUeXBlGAQgASgO",
            "MhIucHJvdG8uQWNjb3VudFR5cGUSFQoNYWNjb3VudE51bWJlchgFIAEoCRIQ",
            "CghvcGVuQmFuaxgGIAEoCRIPCgdzdWJCYW5rGAcgASgJEiMKCWlzRGVsZXRl",
            "ZBgIIAEoDjIQLnByb3RvLkJvb2xWYWx1ZRISCgpjcmVhdGVUaW1lGAkgASgJ",
            "EhIKCnVwZGF0ZVRpbWUYCiABKAkiPAoQQWNjb3VudExpc3RSZXBseRIoCgtB",
            "Y2NvdW50TGlzdBgBIAMoCzITLnByb3RvLkFjY291bnRSZXBseSJhCgxNZXNz",
            "YWdlUmVwbHkSCgoCaWQYASABKAMSEAoIdXNlckZyb20YAiABKAMSDgoGdXNl",
            "clRvGAMgASgDEg8KB21lc3NhZ2UYBCABKAkSEgoKY3JlYXRlVGltZRgFIAEo",
            "CSI8ChBNZXNzYWdlTGlzdFJlcGx5EigKC01lc3NhZ2VMaXN0GAEgAygLMhMu",
            "cHJvdG8uTWVzc2FnZVJlcGx5IqABChFDdXJyZW5jeVBhaXJSZXBseRIKCgJp",
            "ZBgBIAEoAxIPCgdjb2luYUlkGAIgASgJEhEKCWNvaW5hTmFtZRgDIAEoCRIP",
            "Cgdjb2luYklkGAQgASgJEhEKCWNvaW5iTmFtZRgFIAEoCRIUCgxwcmlvcml0",
            "eVNvcnQYBiABKAUSIQoEdHlwZRgHIAEoDjITLnByb3RvLkN1cnJlbmN5VHlw",
            "ZSJDChVDdXJyZW5jeVBhaXJMaXN0UmVwbHkSKgoIUGFpckxpc3QYASADKAsy",
            "GC5wcm90by5DdXJyZW5jeVBhaXJSZXBseSKQBAoNT3RjT3JkZXJSZXBseRIK",
            "CgJpZBgBIAEoAxIOCgZ1c2VySWQYAiABKAMSIQoHYnV5U2VsbBgDIAEoDjIQ",
            "LnByb3RvLlRyYWRlVHlwZRIuCgxjdXJyZW5jeVBhaXIYBCABKAsyGC5wcm90",
            "by5DdXJyZW5jeVBhaXJSZXBseRIxChBwYXllZUFkZHJlc3NMaXN0GAUgASgL",
            "MhcucHJvdG8uQWNjb3VudExpc3RSZXBseRISCgpxdW90ZVByaWNlGAYgASgD",
            "EhMKC3F1b3RlQW1vdW50GAcgASgDEhIKCmxlZnRBbW91bnQYCCABKAMSEAoI",
            "bWluVmFsdWUYCSABKAMSEAoIbWF4VmFsdWUYCiABKAMSEgoKZXhwaXJlVGlt",
            "ZRgLIAEoBRIVCg1vcGVuTGltaXRIb3VyGAwgASgFEhcKD29wZW5MaW1pdE1p",
            "bnV0ZRgNIAEoBRIWCg5jbG9zZUxpbWl0SG91chgOIAEoBRIYChBjbG9zZUxp",
            "bWl0TWludXRlGA8gASgFEiQKBnN0YXR1cxgQIAEoDjIULnByb3RvLk90Y1N0",
            "YXR1c1R5cGUSIwoJYXV0b1JlcGx5GBEgASgOMhAucHJvdG8uQm9vbFZhbHVl",
            "EhMKC2F1dG9NZXNzYWdlGBIgASgJEhIKCmNyZWF0ZVRpbWUYEyABKAkSEgoK",
            "dXBkYXRlVGltZRgUIAEoCSI8ChFPdGNPcmRlckxpc3RSZXBseRInCglPcmRl",
            "ckxpc3QYASADKAsyFC5wcm90by5PdGNPcmRlclJlcGx5IpoECg9PdGNEZXRh",
            "aWxzUmVwbHkSCgoCaWQYASABKAMSJgoIb3RjT3JkZXIYAiABKAsyFC5wcm90",
            "by5PdGNPcmRlclJlcGx5EhYKDm9yZGVyT3duZXJOYW1lGAMgASgJEhcKD29y",
            "ZGVySm9pbmVyTmFtZRgEIAEoCRISCgpqb2luVXNlcklkGAUgASgDEhEKCWJ1",
            "eUFtb3VudBgGIAEoAxIRCglwYXlBbW91bnQYByABKAMSEQoJb3JkZXJUaW1l",
            "GAggASgJEhYKDnNldHRsZW1lbnRUaW1lGAkgASgJEhYKDnNldHRsZW1lbnRO",
            "b3RlGAogASgJEisKBnN0YXR1cxgLIAEoDjIbLnByb3RvLk90Y0RldGFpbHNT",
            "dGF0dXNUeXBlEiIKCG93bmVyUGF5GAwgASgOMhAucHJvdG8uQm9vbFZhbHVl",
            "EiMKCWpvaW5lclBheRgNIAEoDjIQLnByb3RvLkJvb2xWYWx1ZRIlCgthcHBl",
            "YWxPd25lchgOIAEoDjIQLnByb3RvLkJvb2xWYWx1ZRIaChJhcHBlYWxPd25l",
            "ck1lc3NhZ2UYDyABKAkSJgoMYXBwZWFsSm9pbmVyGBAgASgOMhAucHJvdG8u",
            "Qm9vbFZhbHVlEhsKE2FwcGVhbEpvaW5lck1lc3NhZ2UYESABKAkSEwoLb3Jk",
            "ZXJOdW1iZXIYEiABKAkSEgoKdXBkYXRlVGltZRgUIAEoCSJBChNPdGNEZXRh",
            "aWxzTGlzdFJlcGx5EioKCkRldGFpbExpc3QYASADKAsyFi5wcm90by5PdGNE",
            "ZXRhaWxzUmVwbHkqMwoJVHJhZGVUeXBlEgsKB1ROb3RTZXQQABILCgdCdXlU",
            "eXBlEAESDAoIU2VsbFR5cGUQAipUCg1PdGNTdGF0dXNUeXBlEg8KC0NyZWF0",
            "ZVN0YXRlEAASDgoKVHJhZGVTdGF0ZRABEhEKDUNvbXBsZXRlU3RhdGUQAhIP",
            "CgtDYW5jbGVTdGF0ZRADKjwKDEN1cnJlbmN5VHlwZRIMCghDVE5vdFNldBAA",
            "Eg0KCUxlZ2FsQ29pbhABEg8KC0RpZ2l0YWxDb2luEAIqWQoLQWNjb3VudFR5",
            "cGUSDAoIQWNOb3RTZXQQABIMCghCYW5rVHlwZRABEg4KCldlQ2hhdFR5cGUQ",
            "AhIOCgpBbGlQYXlUeXBlEAMSDgoKUGF5UGFsVHlwZRAEKoEBChRPdGNEZXRh",
            "aWxzU3RhdHVzVHlwZRINCglPRENyZWF0ZWQQABIOCgpPRFRpbWVkT3V0EAES",
            "CwoHT0RQYXllZBACEgwKCE9EQ29pbmVkEAMSDgoKT0RDYW5jZWxlZBAEEg4K",
            "Ck9EQXBwZWFsZWQQBRIPCgtPRENvbXBsZXRlZBAGKkQKD09yZGVyUGVyc29u",
            "VHlwZRIMCghPcE5vdFNldBAAEhEKDUluaXRpYXRvclR5cGUQARIQCgxBY2Nl",
            "cHRvclR5cGUQAipRCg5PcmRlclN0YXRlVHlwZRIMCghPc05vdFNldBAAEg8K",
            "C09uZ29pbmdUeXBlEAESEAoMQ29tcGxldGVUeXBlEAISDgoKQ2FuY2VsVHlw",
            "ZRADMrcICgpPdGNTZXJ2aWNlEj0KEUFkZFBheW1lbnRBY2NvdW50EhgucHJv",
            "dG8uUGF5bWVudEFjY291bnRSZXEaDC5wcm90by5FbXB0eSIAEj8KFERlbGV0",
            "ZVBheW1lbnRBY2NvdW50EhcucHJvdG8uQWNjb3VudEZpbHRlclJlcRoMLnBy",
            "b3RvLkVtcHR5IgASSQoTUXVlcnlQYXltZW50QWNjb3VudBIXLnByb3RvLkFj",
            "Y291bnRGaWx0ZXJSZXEaFy5wcm90by5BY2NvdW50TGlzdFJlcGx5IgASNAoP",
            "QWRkU2hvcnRNZXNzYWdlEhEucHJvdG8uTWVzc2FnZVJlcRoMLnByb3RvLkVt",
            "cHR5IgASQwoSUXVlcnlTaG9ydE1lc3NhZ2VzEhIucHJvdG8uVXNlclBhaXJS",
            "ZXEaFy5wcm90by5NZXNzYWdlTGlzdFJlcGx5IgASSgoSUXVlcnlDdXJyZW5j",
            "eVBhaXJzEhQucHJvdG8uUGFpckZpbHRlclJlcRocLnByb3RvLkN1cnJlbmN5",
            "UGFpckxpc3RSZXBseSIAEjQKDkNyZWF0ZU90Y09yZGVyEhIucHJvdG8uT3Rj",
            "T3JkZXJSZXEaDC5wcm90by5FbXB0eSIAEkQKEVF1ZXJ5T3RjT3JkZXJMaXN0",
            "EhMucHJvdG8uT3RjRmlsdGVyUmVxGhgucHJvdG8uT3RjT3JkZXJMaXN0UmVw",
            "bHkiABI8ChRRdWVyeU90Y09yZGVyRGV0YWlscxIMLnByb3RvLklkUmVxGhQu",
            "cHJvdG8uT3RjT3JkZXJSZXBseSIAEkEKEENvbmZpcm1EZWFsT3JkZXISEy5w",
            "cm90by5PdGNEZXRhaWxSZXEaFi5wcm90by5PdGNEZXRhaWxzUmVwbHkiABIv",
            "Cg9DYW5jZWxEZWFsT3JkZXISDC5wcm90by5JZFJlcRoMLnByb3RvLkVtcHR5",
            "IgASOwoQTWFya09yZGVyUGF5bWVudBIXLnByb3RvLk1hcmtVc2VyUGFpZWRS",
            "ZXEaDC5wcm90by5FbXB0eSIAEjoKFENvbXBsYWluT3JkZXJQYXltZW50EhIu",
            "cHJvdG8uQ29tcGxhaW5SZXEaDC5wcm90by5FbXB0eSIAEj0KE1F1ZXJ5T3Rj",
            "RGV0YWlsc0J5SWQSDC5wcm90by5JZFJlcRoWLnByb3RvLk90Y0RldGFpbHNS",
            "ZXBseSIAElIKJFF1ZXJ5T3RjT3JkZXJEZXRhaWxzTGlzdEJ5T3RjT3JkZXJJ",
            "ZBIMLnByb3RvLklkUmVxGhoucHJvdG8uT3RjRGV0YWlsc0xpc3RSZXBseSIA",
            "El0KIVF1ZXJ5VXNlck9yZGVyRGV0YWlsc0xpc3RCeUZpbHRlchIaLnByb3Rv",
            "Lk90Y0RldGFpbHNGaWx0ZXJSZXEaGi5wcm90by5PdGNEZXRhaWxzTGlzdFJl",
            "cGx5IgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.TradeType), typeof(global::Proto.OtcStatusType), typeof(global::Proto.CurrencyType), typeof(global::Proto.AccountType), typeof(global::Proto.OtcDetailsStatusType), typeof(global::Proto.OrderPersonType), typeof(global::Proto.OrderStateType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PaymentAccountReq), global::Proto.PaymentAccountReq.Parser, new[]{ "UserId", "AccountName", "AccountType", "AccountNumber", "OpenBank", "SubBank", "PaymentPassword" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.AccountFilterReq), global::Proto.AccountFilterReq.Parser, new[]{ "UserId", "AccountType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MessageReq), global::Proto.MessageReq.Parser, new[]{ "UserFrom", "UserTo", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserPairReq), global::Proto.UserPairReq.Parser, new[]{ "FromId", "ToId", "LastId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PairFilterReq), global::Proto.PairFilterReq.Parser, new[]{ "TypeInfo", "ACurrencyName", "BCurrencyName", "MatchAll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcOrderReq), global::Proto.OtcOrderReq.Parser, new[]{ "UserId", "BuySell", "CurrencyPair", "QuotePrice", "QuoteAmount", "MinValue", "MaxValue", "ExpireTime", "OpenLimitHour", "OpenLimitMinute", "CloseLimitHour", "CloseLimitMinute", "AutoReply", "AutoMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcFilterReq), global::Proto.OtcFilterReq.Parser, new[]{ "UserId", "BuySell", "CurrencyPairId", "OpenState", "OtcStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcOrderFilter), global::Proto.OtcOrderFilter.Parser, new[]{ "CurrencyPairId", "TradeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcDetailReq), global::Proto.OtcDetailReq.Parser, new[]{ "UserId", "OtcOrderId", "BuyAmount", "PayAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MarkUserPaiedReq), global::Proto.MarkUserPaiedReq.Parser, new[]{ "UserId", "OrderDetailId", "PersonType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ComplainReq), global::Proto.ComplainReq.Parser, new[]{ "UserId", "OrderDetailId", "PersonType", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcDetailsFilterReq), global::Proto.OtcDetailsFilterReq.Parser, new[]{ "UserId", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.AccountReply), global::Proto.AccountReply.Parser, new[]{ "Id", "UserId", "AccountName", "AccountType", "AccountNumber", "OpenBank", "SubBank", "IsDeleted", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.AccountListReply), global::Proto.AccountListReply.Parser, new[]{ "AccountList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MessageReply), global::Proto.MessageReply.Parser, new[]{ "Id", "UserFrom", "UserTo", "Message", "CreateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MessageListReply), global::Proto.MessageListReply.Parser, new[]{ "MessageList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.CurrencyPairReply), global::Proto.CurrencyPairReply.Parser, new[]{ "Id", "CoinaId", "CoinaName", "CoinbId", "CoinbName", "PrioritySort", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.CurrencyPairListReply), global::Proto.CurrencyPairListReply.Parser, new[]{ "PairList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcOrderReply), global::Proto.OtcOrderReply.Parser, new[]{ "Id", "UserId", "BuySell", "CurrencyPair", "PayeeAddressList", "QuotePrice", "QuoteAmount", "LeftAmount", "MinValue", "MaxValue", "ExpireTime", "OpenLimitHour", "OpenLimitMinute", "CloseLimitHour", "CloseLimitMinute", "Status", "AutoReply", "AutoMessage", "CreateTime", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcOrderListReply), global::Proto.OtcOrderListReply.Parser, new[]{ "OrderList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcDetailsReply), global::Proto.OtcDetailsReply.Parser, new[]{ "Id", "OtcOrder", "OrderOwnerName", "OrderJoinerName", "JoinUserId", "BuyAmount", "PayAmount", "OrderTime", "SettlementTime", "SettlementNote", "Status", "OwnerPay", "JoinerPay", "AppealOwner", "AppealOwnerMessage", "AppealJoiner", "AppealJoinerMessage", "OrderNumber", "UpdateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.OtcDetailsListReply), global::Proto.OtcDetailsListReply.Parser, new[]{ "DetailList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///交易类型
  /// </summary>
  public enum TradeType {
    [pbr::OriginalName("TNotSet")] TnotSet = 0,
    /// <summary>
    ///购买
    /// </summary>
    [pbr::OriginalName("BuyType")] BuyType = 1,
    /// <summary>
    ///卖出
    /// </summary>
    [pbr::OriginalName("SellType")] SellType = 2,
  }

  /// <summary>
  ///广告单类型
  /// </summary>
  public enum OtcStatusType {
    /// <summary>
    ///创建状态
    /// </summary>
    [pbr::OriginalName("CreateState")] CreateState = 0,
    /// <summary>
    ///交易中状态
    /// </summary>
    [pbr::OriginalName("TradeState")] TradeState = 1,
    /// <summary>
    ///完成状态
    /// </summary>
    [pbr::OriginalName("CompleteState")] CompleteState = 2,
    /// <summary>
    ///取消状态
    /// </summary>
    [pbr::OriginalName("CancleState")] CancleState = 3,
  }

  /// <summary>
  ///货币交易类型
  /// </summary>
  public enum CurrencyType {
    [pbr::OriginalName("CTNotSet")] CtnotSet = 0,
    /// <summary>
    ///法币
    /// </summary>
    [pbr::OriginalName("LegalCoin")] LegalCoin = 1,
    /// <summary>
    ///币币
    /// </summary>
    [pbr::OriginalName("DigitalCoin")] DigitalCoin = 2,
  }

  /// <summary>
  ///支付方式类型
  /// </summary>
  public enum AccountType {
    [pbr::OriginalName("AcNotSet")] AcNotSet = 0,
    /// <summary>
    ///银行卡
    /// </summary>
    [pbr::OriginalName("BankType")] BankType = 1,
    /// <summary>
    ///微信
    /// </summary>
    [pbr::OriginalName("WeChatType")] WeChatType = 2,
    /// <summary>
    ///支付宝
    /// </summary>
    [pbr::OriginalName("AliPayType")] AliPayType = 3,
    /// <summary>
    ///贝宝
    /// </summary>
    [pbr::OriginalName("PayPalType")] PayPalType = 4,
  }

  /// <summary>
  ///订单状态类型
  /// </summary>
  public enum OtcDetailsStatusType {
    /// <summary>
    ///创建阶段
    /// </summary>
    [pbr::OriginalName("ODCreated")] Odcreated = 0,
    /// <summary>
    ///未付款过期阶段
    /// </summary>
    [pbr::OriginalName("ODTimedOut")] OdtimedOut = 1,
    /// <summary>
    ///已付款阶段
    /// </summary>
    [pbr::OriginalName("ODPayed")] Odpayed = 2,
    /// <summary>
    ///已打币阶段
    /// </summary>
    [pbr::OriginalName("ODCoined")] Odcoined = 3,
    /// <summary>
    ///取消阶段
    /// </summary>
    [pbr::OriginalName("ODCanceled")] Odcanceled = 4,
    /// <summary>
    ///申诉阶段
    /// </summary>
    [pbr::OriginalName("ODAppealed")] Odappealed = 5,
    /// <summary>
    ///完成
    /// </summary>
    [pbr::OriginalName("ODCompleted")] Odcompleted = 6,
  }

  /// <summary>
  ///订单用户类型
  /// </summary>
  public enum OrderPersonType {
    [pbr::OriginalName("OpNotSet")] OpNotSet = 0,
    /// <summary>
    ///发起方
    /// </summary>
    [pbr::OriginalName("InitiatorType")] InitiatorType = 1,
    /// <summary>
    ///接收方
    /// </summary>
    [pbr::OriginalName("AcceptorType")] AcceptorType = 2,
  }

  public enum OrderStateType {
    [pbr::OriginalName("OsNotSet")] OsNotSet = 0,
    /// <summary>
    ///进行中
    /// </summary>
    [pbr::OriginalName("OngoingType")] OngoingType = 1,
    /// <summary>
    ///已完成
    /// </summary>
    [pbr::OriginalName("CompleteType")] CompleteType = 2,
    /// <summary>
    ///已取消
    /// </summary>
    [pbr::OriginalName("CancelType")] CancelType = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///收款方式信息
  /// </summary>
  public sealed partial class PaymentAccountReq : pb::IMessage<PaymentAccountReq> {
    private static readonly pb::MessageParser<PaymentAccountReq> _parser = new pb::MessageParser<PaymentAccountReq>(() => new PaymentAccountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentAccountReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentAccountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentAccountReq(PaymentAccountReq other) : this() {
      userId_ = other.userId_;
      accountName_ = other.accountName_;
      accountType_ = other.accountType_;
      accountNumber_ = other.accountNumber_;
      openBank_ = other.openBank_;
      subBank_ = other.subBank_;
      paymentPassword_ = other.paymentPassword_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentAccountReq Clone() {
      return new PaymentAccountReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "accountName" field.</summary>
    public const int AccountNameFieldNumber = 2;
    private string accountName_ = "";
    /// <summary>
    ///姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 3;
    private global::Proto.AccountType accountType_ = 0;
    /// <summary>
    ///账号类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "accountNumber" field.</summary>
    public const int AccountNumberFieldNumber = 4;
    private string accountNumber_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openBank" field.</summary>
    public const int OpenBankFieldNumber = 5;
    private string openBank_ = "";
    /// <summary>
    ///开户银行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenBank {
      get { return openBank_; }
      set {
        openBank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subBank" field.</summary>
    public const int SubBankFieldNumber = 6;
    private string subBank_ = "";
    /// <summary>
    ///开户支行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubBank {
      get { return subBank_; }
      set {
        subBank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paymentPassword" field.</summary>
    public const int PaymentPasswordFieldNumber = 7;
    private string paymentPassword_ = "";
    /// <summary>
    ///支付密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentPassword {
      get { return paymentPassword_; }
      set {
        paymentPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentAccountReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentAccountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AccountName != other.AccountName) return false;
      if (AccountType != other.AccountType) return false;
      if (AccountNumber != other.AccountNumber) return false;
      if (OpenBank != other.OpenBank) return false;
      if (SubBank != other.SubBank) return false;
      if (PaymentPassword != other.PaymentPassword) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (AccountNumber.Length != 0) hash ^= AccountNumber.GetHashCode();
      if (OpenBank.Length != 0) hash ^= OpenBank.GetHashCode();
      if (SubBank.Length != 0) hash ^= SubBank.GetHashCode();
      if (PaymentPassword.Length != 0) hash ^= PaymentPassword.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountName);
      }
      if (AccountType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AccountType);
      }
      if (AccountNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccountNumber);
      }
      if (OpenBank.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OpenBank);
      }
      if (SubBank.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SubBank);
      }
      if (PaymentPassword.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PaymentPassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (AccountNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountNumber);
      }
      if (OpenBank.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenBank);
      }
      if (SubBank.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubBank);
      }
      if (PaymentPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentPassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentAccountReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.AccountNumber.Length != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.OpenBank.Length != 0) {
        OpenBank = other.OpenBank;
      }
      if (other.SubBank.Length != 0) {
        SubBank = other.SubBank;
      }
      if (other.PaymentPassword.Length != 0) {
        PaymentPassword = other.PaymentPassword;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            AccountName = input.ReadString();
            break;
          }
          case 24: {
            accountType_ = (global::Proto.AccountType) input.ReadEnum();
            break;
          }
          case 34: {
            AccountNumber = input.ReadString();
            break;
          }
          case 42: {
            OpenBank = input.ReadString();
            break;
          }
          case 50: {
            SubBank = input.ReadString();
            break;
          }
          case 58: {
            PaymentPassword = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///支付账号筛选信息
  /// </summary>
  public sealed partial class AccountFilterReq : pb::IMessage<AccountFilterReq> {
    private static readonly pb::MessageParser<AccountFilterReq> _parser = new pb::MessageParser<AccountFilterReq>(() => new AccountFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFilterReq(AccountFilterReq other) : this() {
      userId_ = other.userId_;
      accountType_ = other.accountType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFilterReq Clone() {
      return new AccountFilterReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 2;
    private global::Proto.AccountType accountType_ = 0;
    /// <summary>
    ///账号类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AccountType != other.AccountType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (AccountType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AccountType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            accountType_ = (global::Proto.AccountType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///消息请求
  /// </summary>
  public sealed partial class MessageReq : pb::IMessage<MessageReq> {
    private static readonly pb::MessageParser<MessageReq> _parser = new pb::MessageParser<MessageReq>(() => new MessageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReq(MessageReq other) : this() {
      userFrom_ = other.userFrom_;
      userTo_ = other.userTo_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReq Clone() {
      return new MessageReq(this);
    }

    /// <summary>Field number for the "userFrom" field.</summary>
    public const int UserFromFieldNumber = 2;
    private long userFrom_;
    /// <summary>
    ///发送消息者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserFrom {
      get { return userFrom_; }
      set {
        userFrom_ = value;
      }
    }

    /// <summary>Field number for the "userTo" field.</summary>
    public const int UserToFieldNumber = 3;
    private long userTo_;
    /// <summary>
    ///接受消息者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserTo {
      get { return userTo_; }
      set {
        userTo_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    ///消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserFrom != other.UserFrom) return false;
      if (UserTo != other.UserTo) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserFrom != 0L) hash ^= UserFrom.GetHashCode();
      if (UserTo != 0L) hash ^= UserTo.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserFrom != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserFrom);
      }
      if (UserTo != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserTo);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserFrom);
      }
      if (UserTo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserTo);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageReq other) {
      if (other == null) {
        return;
      }
      if (other.UserFrom != 0L) {
        UserFrom = other.UserFrom;
      }
      if (other.UserTo != 0L) {
        UserTo = other.UserTo;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            UserFrom = input.ReadInt64();
            break;
          }
          case 24: {
            UserTo = input.ReadInt64();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交易用户双方Id信息
  /// </summary>
  public sealed partial class UserPairReq : pb::IMessage<UserPairReq> {
    private static readonly pb::MessageParser<UserPairReq> _parser = new pb::MessageParser<UserPairReq>(() => new UserPairReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPairReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPairReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPairReq(UserPairReq other) : this() {
      fromId_ = other.fromId_;
      toId_ = other.toId_;
      lastId_ = other.lastId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPairReq Clone() {
      return new UserPairReq(this);
    }

    /// <summary>Field number for the "fromId" field.</summary>
    public const int FromIdFieldNumber = 1;
    private long fromId_;
    /// <summary>
    ///发起者用户Id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "toId" field.</summary>
    public const int ToIdFieldNumber = 2;
    private long toId_;
    /// <summary>
    ///响应者用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToId {
      get { return toId_; }
      set {
        toId_ = value;
      }
    }

    /// <summary>Field number for the "lastId" field.</summary>
    public const int LastIdFieldNumber = 3;
    private long lastId_;
    /// <summary>
    ///增量请求Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastId {
      get { return lastId_; }
      set {
        lastId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPairReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPairReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      if (ToId != other.ToId) return false;
      if (LastId != other.LastId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0L) hash ^= FromId.GetHashCode();
      if (ToId != 0L) hash ^= ToId.GetHashCode();
      if (LastId != 0L) hash ^= LastId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FromId);
      }
      if (ToId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ToId);
      }
      if (LastId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromId);
      }
      if (ToId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToId);
      }
      if (LastId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPairReq other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0L) {
        FromId = other.FromId;
      }
      if (other.ToId != 0L) {
        ToId = other.ToId;
      }
      if (other.LastId != 0L) {
        LastId = other.LastId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadInt64();
            break;
          }
          case 16: {
            ToId = input.ReadInt64();
            break;
          }
          case 24: {
            LastId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///交易货币筛选对信息
  /// </summary>
  public sealed partial class PairFilterReq : pb::IMessage<PairFilterReq> {
    private static readonly pb::MessageParser<PairFilterReq> _parser = new pb::MessageParser<PairFilterReq>(() => new PairFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairFilterReq(PairFilterReq other) : this() {
      typeInfo_ = other.typeInfo_;
      aCurrencyName_ = other.aCurrencyName_;
      bCurrencyName_ = other.bCurrencyName_;
      matchAll_ = other.matchAll_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairFilterReq Clone() {
      return new PairFilterReq(this);
    }

    /// <summary>Field number for the "typeInfo" field.</summary>
    public const int TypeInfoFieldNumber = 1;
    private global::Proto.CurrencyType typeInfo_ = 0;
    /// <summary>
    ///货币类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.CurrencyType TypeInfo {
      get { return typeInfo_; }
      set {
        typeInfo_ = value;
      }
    }

    /// <summary>Field number for the "aCurrencyName" field.</summary>
    public const int ACurrencyNameFieldNumber = 2;
    private string aCurrencyName_ = "";
    /// <summary>
    ///A货币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ACurrencyName {
      get { return aCurrencyName_; }
      set {
        aCurrencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bCurrencyName" field.</summary>
    public const int BCurrencyNameFieldNumber = 3;
    private string bCurrencyName_ = "";
    /// <summary>
    ///B货币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BCurrencyName {
      get { return bCurrencyName_; }
      set {
        bCurrencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matchAll" field.</summary>
    public const int MatchAllFieldNumber = 4;
    private global::Proto.BoolValue matchAll_ = 0;
    /// <summary>
    ///是否匹配所有 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue MatchAll {
      get { return matchAll_; }
      set {
        matchAll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeInfo != other.TypeInfo) return false;
      if (ACurrencyName != other.ACurrencyName) return false;
      if (BCurrencyName != other.BCurrencyName) return false;
      if (MatchAll != other.MatchAll) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeInfo != 0) hash ^= TypeInfo.GetHashCode();
      if (ACurrencyName.Length != 0) hash ^= ACurrencyName.GetHashCode();
      if (BCurrencyName.Length != 0) hash ^= BCurrencyName.GetHashCode();
      if (MatchAll != 0) hash ^= MatchAll.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeInfo != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TypeInfo);
      }
      if (ACurrencyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ACurrencyName);
      }
      if (BCurrencyName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BCurrencyName);
      }
      if (MatchAll != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MatchAll);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeInfo);
      }
      if (ACurrencyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ACurrencyName);
      }
      if (BCurrencyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BCurrencyName);
      }
      if (MatchAll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchAll);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.TypeInfo != 0) {
        TypeInfo = other.TypeInfo;
      }
      if (other.ACurrencyName.Length != 0) {
        ACurrencyName = other.ACurrencyName;
      }
      if (other.BCurrencyName.Length != 0) {
        BCurrencyName = other.BCurrencyName;
      }
      if (other.MatchAll != 0) {
        MatchAll = other.MatchAll;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            typeInfo_ = (global::Proto.CurrencyType) input.ReadEnum();
            break;
          }
          case 18: {
            ACurrencyName = input.ReadString();
            break;
          }
          case 26: {
            BCurrencyName = input.ReadString();
            break;
          }
          case 32: {
            matchAll_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Otc广告信息
  /// </summary>
  public sealed partial class OtcOrderReq : pb::IMessage<OtcOrderReq> {
    private static readonly pb::MessageParser<OtcOrderReq> _parser = new pb::MessageParser<OtcOrderReq>(() => new OtcOrderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcOrderReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderReq(OtcOrderReq other) : this() {
      userId_ = other.userId_;
      buySell_ = other.buySell_;
      currencyPair_ = other.currencyPair_;
      quotePrice_ = other.quotePrice_;
      quoteAmount_ = other.quoteAmount_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
      expireTime_ = other.expireTime_;
      openLimitHour_ = other.openLimitHour_;
      openLimitMinute_ = other.openLimitMinute_;
      closeLimitHour_ = other.closeLimitHour_;
      closeLimitMinute_ = other.closeLimitMinute_;
      autoReply_ = other.autoReply_;
      autoMessage_ = other.autoMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderReq Clone() {
      return new OtcOrderReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "buySell" field.</summary>
    public const int BuySellFieldNumber = 2;
    private global::Proto.TradeType buySell_ = 0;
    /// <summary>
    ///交易类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.TradeType BuySell {
      get { return buySell_; }
      set {
        buySell_ = value;
      }
    }

    /// <summary>Field number for the "currencyPair" field.</summary>
    public const int CurrencyPairFieldNumber = 3;
    private long currencyPair_;
    /// <summary>
    ///交易对信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrencyPair {
      get { return currencyPair_; }
      set {
        currencyPair_ = value;
      }
    }

    /// <summary>Field number for the "quotePrice" field.</summary>
    public const int QuotePriceFieldNumber = 4;
    private long quotePrice_;
    /// <summary>
    ///报价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuotePrice {
      get { return quotePrice_; }
      set {
        quotePrice_ = value;
      }
    }

    /// <summary>Field number for the "quoteAmount" field.</summary>
    public const int QuoteAmountFieldNumber = 5;
    private long quoteAmount_;
    /// <summary>
    ///报单数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuoteAmount {
      get { return quoteAmount_; }
      set {
        quoteAmount_ = value;
      }
    }

    /// <summary>Field number for the "minValue" field.</summary>
    public const int MinValueFieldNumber = 6;
    private long minValue_;
    /// <summary>
    ///最小成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 7;
    private long maxValue_;
    /// <summary>
    ///最大成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 8;
    private int expireTime_;
    /// <summary>
    ///过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "openLimitHour" field.</summary>
    public const int OpenLimitHourFieldNumber = 9;
    private int openLimitHour_;
    /// <summary>
    ///开放小时限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenLimitHour {
      get { return openLimitHour_; }
      set {
        openLimitHour_ = value;
      }
    }

    /// <summary>Field number for the "openLimitMinute" field.</summary>
    public const int OpenLimitMinuteFieldNumber = 10;
    private int openLimitMinute_;
    /// <summary>
    ///开放分钟限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenLimitMinute {
      get { return openLimitMinute_; }
      set {
        openLimitMinute_ = value;
      }
    }

    /// <summary>Field number for the "closeLimitHour" field.</summary>
    public const int CloseLimitHourFieldNumber = 11;
    private int closeLimitHour_;
    /// <summary>
    ///关闭小时限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CloseLimitHour {
      get { return closeLimitHour_; }
      set {
        closeLimitHour_ = value;
      }
    }

    /// <summary>Field number for the "closeLimitMinute" field.</summary>
    public const int CloseLimitMinuteFieldNumber = 12;
    private int closeLimitMinute_;
    /// <summary>
    ///关闭分钟限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CloseLimitMinute {
      get { return closeLimitMinute_; }
      set {
        closeLimitMinute_ = value;
      }
    }

    /// <summary>Field number for the "autoReply" field.</summary>
    public const int AutoReplyFieldNumber = 13;
    private global::Proto.BoolValue autoReply_ = 0;
    /// <summary>
    ///是否自动回复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue AutoReply {
      get { return autoReply_; }
      set {
        autoReply_ = value;
      }
    }

    /// <summary>Field number for the "autoMessage" field.</summary>
    public const int AutoMessageFieldNumber = 14;
    private string autoMessage_ = "";
    /// <summary>
    ///自动回复消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AutoMessage {
      get { return autoMessage_; }
      set {
        autoMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcOrderReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcOrderReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (BuySell != other.BuySell) return false;
      if (CurrencyPair != other.CurrencyPair) return false;
      if (QuotePrice != other.QuotePrice) return false;
      if (QuoteAmount != other.QuoteAmount) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (OpenLimitHour != other.OpenLimitHour) return false;
      if (OpenLimitMinute != other.OpenLimitMinute) return false;
      if (CloseLimitHour != other.CloseLimitHour) return false;
      if (CloseLimitMinute != other.CloseLimitMinute) return false;
      if (AutoReply != other.AutoReply) return false;
      if (AutoMessage != other.AutoMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (BuySell != 0) hash ^= BuySell.GetHashCode();
      if (CurrencyPair != 0L) hash ^= CurrencyPair.GetHashCode();
      if (QuotePrice != 0L) hash ^= QuotePrice.GetHashCode();
      if (QuoteAmount != 0L) hash ^= QuoteAmount.GetHashCode();
      if (MinValue != 0L) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0L) hash ^= MaxValue.GetHashCode();
      if (ExpireTime != 0) hash ^= ExpireTime.GetHashCode();
      if (OpenLimitHour != 0) hash ^= OpenLimitHour.GetHashCode();
      if (OpenLimitMinute != 0) hash ^= OpenLimitMinute.GetHashCode();
      if (CloseLimitHour != 0) hash ^= CloseLimitHour.GetHashCode();
      if (CloseLimitMinute != 0) hash ^= CloseLimitMinute.GetHashCode();
      if (AutoReply != 0) hash ^= AutoReply.GetHashCode();
      if (AutoMessage.Length != 0) hash ^= AutoMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (BuySell != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BuySell);
      }
      if (CurrencyPair != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurrencyPair);
      }
      if (QuotePrice != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(QuotePrice);
      }
      if (QuoteAmount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(QuoteAmount);
      }
      if (MinValue != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MinValue);
      }
      if (MaxValue != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(MaxValue);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExpireTime);
      }
      if (OpenLimitHour != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OpenLimitHour);
      }
      if (OpenLimitMinute != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OpenLimitMinute);
      }
      if (CloseLimitHour != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CloseLimitHour);
      }
      if (CloseLimitMinute != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CloseLimitMinute);
      }
      if (AutoReply != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) AutoReply);
      }
      if (AutoMessage.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AutoMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (BuySell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell);
      }
      if (CurrencyPair != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrencyPair);
      }
      if (QuotePrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuotePrice);
      }
      if (QuoteAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuoteAmount);
      }
      if (MinValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinValue);
      }
      if (MaxValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxValue);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpireTime);
      }
      if (OpenLimitHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenLimitHour);
      }
      if (OpenLimitMinute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenLimitMinute);
      }
      if (CloseLimitHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloseLimitHour);
      }
      if (CloseLimitMinute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloseLimitMinute);
      }
      if (AutoReply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoReply);
      }
      if (AutoMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AutoMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcOrderReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.BuySell != 0) {
        BuySell = other.BuySell;
      }
      if (other.CurrencyPair != 0L) {
        CurrencyPair = other.CurrencyPair;
      }
      if (other.QuotePrice != 0L) {
        QuotePrice = other.QuotePrice;
      }
      if (other.QuoteAmount != 0L) {
        QuoteAmount = other.QuoteAmount;
      }
      if (other.MinValue != 0L) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0L) {
        MaxValue = other.MaxValue;
      }
      if (other.ExpireTime != 0) {
        ExpireTime = other.ExpireTime;
      }
      if (other.OpenLimitHour != 0) {
        OpenLimitHour = other.OpenLimitHour;
      }
      if (other.OpenLimitMinute != 0) {
        OpenLimitMinute = other.OpenLimitMinute;
      }
      if (other.CloseLimitHour != 0) {
        CloseLimitHour = other.CloseLimitHour;
      }
      if (other.CloseLimitMinute != 0) {
        CloseLimitMinute = other.CloseLimitMinute;
      }
      if (other.AutoReply != 0) {
        AutoReply = other.AutoReply;
      }
      if (other.AutoMessage.Length != 0) {
        AutoMessage = other.AutoMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            buySell_ = (global::Proto.TradeType) input.ReadEnum();
            break;
          }
          case 24: {
            CurrencyPair = input.ReadInt64();
            break;
          }
          case 32: {
            QuotePrice = input.ReadInt64();
            break;
          }
          case 40: {
            QuoteAmount = input.ReadInt64();
            break;
          }
          case 48: {
            MinValue = input.ReadInt64();
            break;
          }
          case 56: {
            MaxValue = input.ReadInt64();
            break;
          }
          case 64: {
            ExpireTime = input.ReadInt32();
            break;
          }
          case 72: {
            OpenLimitHour = input.ReadInt32();
            break;
          }
          case 80: {
            OpenLimitMinute = input.ReadInt32();
            break;
          }
          case 88: {
            CloseLimitHour = input.ReadInt32();
            break;
          }
          case 96: {
            CloseLimitMinute = input.ReadInt32();
            break;
          }
          case 104: {
            autoReply_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 114: {
            AutoMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Otc广告筛选信息
  /// </summary>
  public sealed partial class OtcFilterReq : pb::IMessage<OtcFilterReq> {
    private static readonly pb::MessageParser<OtcFilterReq> _parser = new pb::MessageParser<OtcFilterReq>(() => new OtcFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcFilterReq(OtcFilterReq other) : this() {
      userId_ = other.userId_;
      buySell_ = other.buySell_;
      currencyPairId_ = other.currencyPairId_;
      openState_ = other.openState_;
      otcStatus_ = other.otcStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcFilterReq Clone() {
      return new OtcFilterReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "buySell" field.</summary>
    public const int BuySellFieldNumber = 2;
    private global::Proto.TradeType buySell_ = 0;
    /// <summary>
    ///交易类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.TradeType BuySell {
      get { return buySell_; }
      set {
        buySell_ = value;
      }
    }

    /// <summary>Field number for the "currencyPairId" field.</summary>
    public const int CurrencyPairIdFieldNumber = 3;
    private long currencyPairId_;
    /// <summary>
    ///交易对Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrencyPairId {
      get { return currencyPairId_; }
      set {
        currencyPairId_ = value;
      }
    }

    /// <summary>Field number for the "openState" field.</summary>
    public const int OpenStateFieldNumber = 4;
    private global::Proto.BoolValue openState_ = 0;
    /// <summary>
    ///是否只显示开放状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue OpenState {
      get { return openState_; }
      set {
        openState_ = value;
      }
    }

    /// <summary>Field number for the "otcStatus" field.</summary>
    public const int OtcStatusFieldNumber = 5;
    private global::Proto.OtcStatusType otcStatus_ = 0;
    /// <summary>
    ///Otc订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.OtcStatusType OtcStatus {
      get { return otcStatus_; }
      set {
        otcStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (BuySell != other.BuySell) return false;
      if (CurrencyPairId != other.CurrencyPairId) return false;
      if (OpenState != other.OpenState) return false;
      if (OtcStatus != other.OtcStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (BuySell != 0) hash ^= BuySell.GetHashCode();
      if (CurrencyPairId != 0L) hash ^= CurrencyPairId.GetHashCode();
      if (OpenState != 0) hash ^= OpenState.GetHashCode();
      if (OtcStatus != 0) hash ^= OtcStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (BuySell != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BuySell);
      }
      if (CurrencyPairId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurrencyPairId);
      }
      if (OpenState != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OpenState);
      }
      if (OtcStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) OtcStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (BuySell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell);
      }
      if (CurrencyPairId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrencyPairId);
      }
      if (OpenState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpenState);
      }
      if (OtcStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OtcStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.BuySell != 0) {
        BuySell = other.BuySell;
      }
      if (other.CurrencyPairId != 0L) {
        CurrencyPairId = other.CurrencyPairId;
      }
      if (other.OpenState != 0) {
        OpenState = other.OpenState;
      }
      if (other.OtcStatus != 0) {
        OtcStatus = other.OtcStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            buySell_ = (global::Proto.TradeType) input.ReadEnum();
            break;
          }
          case 24: {
            CurrencyPairId = input.ReadInt64();
            break;
          }
          case 32: {
            openState_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 40: {
            otcStatus_ = (global::Proto.OtcStatusType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Otc法币交易查询
  /// </summary>
  public sealed partial class OtcOrderFilter : pb::IMessage<OtcOrderFilter> {
    private static readonly pb::MessageParser<OtcOrderFilter> _parser = new pb::MessageParser<OtcOrderFilter>(() => new OtcOrderFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcOrderFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderFilter(OtcOrderFilter other) : this() {
      currencyPairId_ = other.currencyPairId_;
      tradeType_ = other.tradeType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderFilter Clone() {
      return new OtcOrderFilter(this);
    }

    /// <summary>Field number for the "currencyPairId" field.</summary>
    public const int CurrencyPairIdFieldNumber = 1;
    private long currencyPairId_;
    /// <summary>
    ///交易对信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrencyPairId {
      get { return currencyPairId_; }
      set {
        currencyPairId_ = value;
      }
    }

    /// <summary>Field number for the "tradeType" field.</summary>
    public const int TradeTypeFieldNumber = 2;
    private global::Proto.TradeType tradeType_ = 0;
    /// <summary>
    ///交易类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.TradeType TradeType {
      get { return tradeType_; }
      set {
        tradeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcOrderFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcOrderFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyPairId != other.CurrencyPairId) return false;
      if (TradeType != other.TradeType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyPairId != 0L) hash ^= CurrencyPairId.GetHashCode();
      if (TradeType != 0) hash ^= TradeType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyPairId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurrencyPairId);
      }
      if (TradeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TradeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyPairId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrencyPairId);
      }
      if (TradeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcOrderFilter other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyPairId != 0L) {
        CurrencyPairId = other.CurrencyPairId;
      }
      if (other.TradeType != 0) {
        TradeType = other.TradeType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrencyPairId = input.ReadInt64();
            break;
          }
          case 16: {
            tradeType_ = (global::Proto.TradeType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Otc下单交易
  /// </summary>
  public sealed partial class OtcDetailReq : pb::IMessage<OtcDetailReq> {
    private static readonly pb::MessageParser<OtcDetailReq> _parser = new pb::MessageParser<OtcDetailReq>(() => new OtcDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcDetailReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailReq(OtcDetailReq other) : this() {
      userId_ = other.userId_;
      otcOrderId_ = other.otcOrderId_;
      buyAmount_ = other.buyAmount_;
      payAmount_ = other.payAmount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailReq Clone() {
      return new OtcDetailReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///参与用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "otcOrderId" field.</summary>
    public const int OtcOrderIdFieldNumber = 2;
    private long otcOrderId_;
    /// <summary>
    ///Otc广告单Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OtcOrderId {
      get { return otcOrderId_; }
      set {
        otcOrderId_ = value;
      }
    }

    /// <summary>Field number for the "buyAmount" field.</summary>
    public const int BuyAmountFieldNumber = 3;
    private long buyAmount_;
    /// <summary>
    ///买入数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BuyAmount {
      get { return buyAmount_; }
      set {
        buyAmount_ = value;
      }
    }

    /// <summary>Field number for the "payAmount" field.</summary>
    public const int PayAmountFieldNumber = 4;
    private long payAmount_;
    /// <summary>
    ///付出数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayAmount {
      get { return payAmount_; }
      set {
        payAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcDetailReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcDetailReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (OtcOrderId != other.OtcOrderId) return false;
      if (BuyAmount != other.BuyAmount) return false;
      if (PayAmount != other.PayAmount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (OtcOrderId != 0L) hash ^= OtcOrderId.GetHashCode();
      if (BuyAmount != 0L) hash ^= BuyAmount.GetHashCode();
      if (PayAmount != 0L) hash ^= PayAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (OtcOrderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OtcOrderId);
      }
      if (BuyAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BuyAmount);
      }
      if (PayAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PayAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (OtcOrderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OtcOrderId);
      }
      if (BuyAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuyAmount);
      }
      if (PayAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayAmount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcDetailReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.OtcOrderId != 0L) {
        OtcOrderId = other.OtcOrderId;
      }
      if (other.BuyAmount != 0L) {
        BuyAmount = other.BuyAmount;
      }
      if (other.PayAmount != 0L) {
        PayAmount = other.PayAmount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            OtcOrderId = input.ReadInt64();
            break;
          }
          case 24: {
            BuyAmount = input.ReadInt64();
            break;
          }
          case 32: {
            PayAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///订单标记信息
  /// </summary>
  public sealed partial class MarkUserPaiedReq : pb::IMessage<MarkUserPaiedReq> {
    private static readonly pb::MessageParser<MarkUserPaiedReq> _parser = new pb::MessageParser<MarkUserPaiedReq>(() => new MarkUserPaiedReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkUserPaiedReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkUserPaiedReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkUserPaiedReq(MarkUserPaiedReq other) : this() {
      userId_ = other.userId_;
      orderDetailId_ = other.orderDetailId_;
      personType_ = other.personType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkUserPaiedReq Clone() {
      return new MarkUserPaiedReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "orderDetailId" field.</summary>
    public const int OrderDetailIdFieldNumber = 2;
    private long orderDetailId_;
    /// <summary>
    ///订单Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderDetailId {
      get { return orderDetailId_; }
      set {
        orderDetailId_ = value;
      }
    }

    /// <summary>Field number for the "personType" field.</summary>
    public const int PersonTypeFieldNumber = 3;
    private global::Proto.OrderPersonType personType_ = 0;
    /// <summary>
    ///用户类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.OrderPersonType PersonType {
      get { return personType_; }
      set {
        personType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkUserPaiedReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkUserPaiedReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (OrderDetailId != other.OrderDetailId) return false;
      if (PersonType != other.PersonType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (OrderDetailId != 0L) hash ^= OrderDetailId.GetHashCode();
      if (PersonType != 0) hash ^= PersonType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (OrderDetailId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OrderDetailId);
      }
      if (PersonType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PersonType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (OrderDetailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderDetailId);
      }
      if (PersonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PersonType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkUserPaiedReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.OrderDetailId != 0L) {
        OrderDetailId = other.OrderDetailId;
      }
      if (other.PersonType != 0) {
        PersonType = other.PersonType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            OrderDetailId = input.ReadInt64();
            break;
          }
          case 24: {
            personType_ = (global::Proto.OrderPersonType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///订单申诉
  /// </summary>
  public sealed partial class ComplainReq : pb::IMessage<ComplainReq> {
    private static readonly pb::MessageParser<ComplainReq> _parser = new pb::MessageParser<ComplainReq>(() => new ComplainReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComplainReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplainReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplainReq(ComplainReq other) : this() {
      userId_ = other.userId_;
      orderDetailId_ = other.orderDetailId_;
      personType_ = other.personType_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComplainReq Clone() {
      return new ComplainReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "orderDetailId" field.</summary>
    public const int OrderDetailIdFieldNumber = 2;
    private long orderDetailId_;
    /// <summary>
    ///订单Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderDetailId {
      get { return orderDetailId_; }
      set {
        orderDetailId_ = value;
      }
    }

    /// <summary>Field number for the "personType" field.</summary>
    public const int PersonTypeFieldNumber = 3;
    private global::Proto.OrderPersonType personType_ = 0;
    /// <summary>
    ///用户类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.OrderPersonType PersonType {
      get { return personType_; }
      set {
        personType_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    ///申诉信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComplainReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComplainReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (OrderDetailId != other.OrderDetailId) return false;
      if (PersonType != other.PersonType) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (OrderDetailId != 0L) hash ^= OrderDetailId.GetHashCode();
      if (PersonType != 0) hash ^= PersonType.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (OrderDetailId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OrderDetailId);
      }
      if (PersonType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PersonType);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (OrderDetailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderDetailId);
      }
      if (PersonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PersonType);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComplainReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.OrderDetailId != 0L) {
        OrderDetailId = other.OrderDetailId;
      }
      if (other.PersonType != 0) {
        PersonType = other.PersonType;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            OrderDetailId = input.ReadInt64();
            break;
          }
          case 24: {
            personType_ = (global::Proto.OrderPersonType) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OtcDetailsFilterReq : pb::IMessage<OtcDetailsFilterReq> {
    private static readonly pb::MessageParser<OtcDetailsFilterReq> _parser = new pb::MessageParser<OtcDetailsFilterReq>(() => new OtcDetailsFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcDetailsFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsFilterReq(OtcDetailsFilterReq other) : this() {
      userId_ = other.userId_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsFilterReq Clone() {
      return new OtcDetailsFilterReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Proto.OrderStateType state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.OrderStateType State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcDetailsFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcDetailsFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcDetailsFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            state_ = (global::Proto.OrderStateType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收款方式
  /// </summary>
  public sealed partial class AccountReply : pb::IMessage<AccountReply> {
    private static readonly pb::MessageParser<AccountReply> _parser = new pb::MessageParser<AccountReply>(() => new AccountReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountReply(AccountReply other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      accountName_ = other.accountName_;
      accountType_ = other.accountType_;
      accountNumber_ = other.accountNumber_;
      openBank_ = other.openBank_;
      subBank_ = other.subBank_;
      isDeleted_ = other.isDeleted_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountReply Clone() {
      return new AccountReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "accountName" field.</summary>
    public const int AccountNameFieldNumber = 3;
    private string accountName_ = "";
    /// <summary>
    ///姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 4;
    private global::Proto.AccountType accountType_ = 0;
    /// <summary>
    ///账号类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "accountNumber" field.</summary>
    public const int AccountNumberFieldNumber = 5;
    private string accountNumber_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountNumber {
      get { return accountNumber_; }
      set {
        accountNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openBank" field.</summary>
    public const int OpenBankFieldNumber = 6;
    private string openBank_ = "";
    /// <summary>
    ///开户银行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenBank {
      get { return openBank_; }
      set {
        openBank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subBank" field.</summary>
    public const int SubBankFieldNumber = 7;
    private string subBank_ = "";
    /// <summary>
    ///开户支行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubBank {
      get { return subBank_; }
      set {
        subBank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isDeleted" field.</summary>
    public const int IsDeletedFieldNumber = 8;
    private global::Proto.BoolValue isDeleted_ = 0;
    /// <summary>
    ///是否已删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue IsDeleted {
      get { return isDeleted_; }
      set {
        isDeleted_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 10;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (AccountName != other.AccountName) return false;
      if (AccountType != other.AccountType) return false;
      if (AccountNumber != other.AccountNumber) return false;
      if (OpenBank != other.OpenBank) return false;
      if (SubBank != other.SubBank) return false;
      if (IsDeleted != other.IsDeleted) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (AccountNumber.Length != 0) hash ^= AccountNumber.GetHashCode();
      if (OpenBank.Length != 0) hash ^= OpenBank.GetHashCode();
      if (SubBank.Length != 0) hash ^= SubBank.GetHashCode();
      if (IsDeleted != 0) hash ^= IsDeleted.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountName);
      }
      if (AccountType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AccountType);
      }
      if (AccountNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AccountNumber);
      }
      if (OpenBank.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OpenBank);
      }
      if (SubBank.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SubBank);
      }
      if (IsDeleted != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) IsDeleted);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (AccountNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountNumber);
      }
      if (OpenBank.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenBank);
      }
      if (SubBank.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubBank);
      }
      if (IsDeleted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsDeleted);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.AccountNumber.Length != 0) {
        AccountNumber = other.AccountNumber;
      }
      if (other.OpenBank.Length != 0) {
        OpenBank = other.OpenBank;
      }
      if (other.SubBank.Length != 0) {
        SubBank = other.SubBank;
      }
      if (other.IsDeleted != 0) {
        IsDeleted = other.IsDeleted;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26: {
            AccountName = input.ReadString();
            break;
          }
          case 32: {
            accountType_ = (global::Proto.AccountType) input.ReadEnum();
            break;
          }
          case 42: {
            AccountNumber = input.ReadString();
            break;
          }
          case 50: {
            OpenBank = input.ReadString();
            break;
          }
          case 58: {
            SubBank = input.ReadString();
            break;
          }
          case 64: {
            isDeleted_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 74: {
            CreateTime = input.ReadString();
            break;
          }
          case 82: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountListReply : pb::IMessage<AccountListReply> {
    private static readonly pb::MessageParser<AccountListReply> _parser = new pb::MessageParser<AccountListReply>(() => new AccountListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountListReply(AccountListReply other) : this() {
      accountList_ = other.accountList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountListReply Clone() {
      return new AccountListReply(this);
    }

    /// <summary>Field number for the "AccountList" field.</summary>
    public const int AccountListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.AccountReply> _repeated_accountList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.AccountReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.AccountReply> accountList_ = new pbc::RepeatedField<global::Proto.AccountReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.AccountReply> AccountList {
      get { return accountList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accountList_.Equals(other.accountList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accountList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      accountList_.WriteTo(output, _repeated_accountList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accountList_.CalculateSize(_repeated_accountList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountListReply other) {
      if (other == null) {
        return;
      }
      accountList_.Add(other.accountList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            accountList_.AddEntriesFrom(input, _repeated_accountList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///短消息
  /// </summary>
  public sealed partial class MessageReply : pb::IMessage<MessageReply> {
    private static readonly pb::MessageParser<MessageReply> _parser = new pb::MessageParser<MessageReply>(() => new MessageReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReply(MessageReply other) : this() {
      id_ = other.id_;
      userFrom_ = other.userFrom_;
      userTo_ = other.userTo_;
      message_ = other.message_;
      createTime_ = other.createTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReply Clone() {
      return new MessageReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userFrom" field.</summary>
    public const int UserFromFieldNumber = 2;
    private long userFrom_;
    /// <summary>
    ///发送消息者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserFrom {
      get { return userFrom_; }
      set {
        userFrom_ = value;
      }
    }

    /// <summary>Field number for the "userTo" field.</summary>
    public const int UserToFieldNumber = 3;
    private long userTo_;
    /// <summary>
    ///接受消息者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserTo {
      get { return userTo_; }
      set {
        userTo_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    /// <summary>
    ///消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private string createTime_ = "";
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserFrom != other.UserFrom) return false;
      if (UserTo != other.UserTo) return false;
      if (Message != other.Message) return false;
      if (CreateTime != other.CreateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserFrom != 0L) hash ^= UserFrom.GetHashCode();
      if (UserTo != 0L) hash ^= UserTo.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserFrom != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserFrom);
      }
      if (UserTo != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserTo);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserFrom);
      }
      if (UserTo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserTo);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (CreateTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserFrom != 0L) {
        UserFrom = other.UserFrom;
      }
      if (other.UserTo != 0L) {
        UserTo = other.UserTo;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserFrom = input.ReadInt64();
            break;
          }
          case 24: {
            UserTo = input.ReadInt64();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
          case 42: {
            CreateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageListReply : pb::IMessage<MessageListReply> {
    private static readonly pb::MessageParser<MessageListReply> _parser = new pb::MessageParser<MessageListReply>(() => new MessageListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageListReply(MessageListReply other) : this() {
      messageList_ = other.messageList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageListReply Clone() {
      return new MessageListReply(this);
    }

    /// <summary>Field number for the "MessageList" field.</summary>
    public const int MessageListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.MessageReply> _repeated_messageList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.MessageReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.MessageReply> messageList_ = new pbc::RepeatedField<global::Proto.MessageReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.MessageReply> MessageList {
      get { return messageList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messageList_.Equals(other.messageList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messageList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messageList_.WriteTo(output, _repeated_messageList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messageList_.CalculateSize(_repeated_messageList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageListReply other) {
      if (other == null) {
        return;
      }
      messageList_.Add(other.messageList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messageList_.AddEntriesFrom(input, _repeated_messageList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///货币交易对
  /// </summary>
  public sealed partial class CurrencyPairReply : pb::IMessage<CurrencyPairReply> {
    private static readonly pb::MessageParser<CurrencyPairReply> _parser = new pb::MessageParser<CurrencyPairReply>(() => new CurrencyPairReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyPairReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPairReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPairReply(CurrencyPairReply other) : this() {
      id_ = other.id_;
      coinaId_ = other.coinaId_;
      coinaName_ = other.coinaName_;
      coinbId_ = other.coinbId_;
      coinbName_ = other.coinbName_;
      prioritySort_ = other.prioritySort_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPairReply Clone() {
      return new CurrencyPairReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "coinaId" field.</summary>
    public const int CoinaIdFieldNumber = 2;
    private string coinaId_ = "";
    /// <summary>
    ///出售货币Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinaId {
      get { return coinaId_; }
      set {
        coinaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinaName" field.</summary>
    public const int CoinaNameFieldNumber = 3;
    private string coinaName_ = "";
    /// <summary>
    ///出售货币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinaName {
      get { return coinaName_; }
      set {
        coinaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinbId" field.</summary>
    public const int CoinbIdFieldNumber = 4;
    private string coinbId_ = "";
    /// <summary>
    ///募集货币Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinbId {
      get { return coinbId_; }
      set {
        coinbId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coinbName" field.</summary>
    public const int CoinbNameFieldNumber = 5;
    private string coinbName_ = "";
    /// <summary>
    ///募集货币名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinbName {
      get { return coinbName_; }
      set {
        coinbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prioritySort" field.</summary>
    public const int PrioritySortFieldNumber = 6;
    private int prioritySort_;
    /// <summary>
    ///排序优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrioritySort {
      get { return prioritySort_; }
      set {
        prioritySort_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private global::Proto.CurrencyType type_ = 0;
    /// <summary>
    ///货币类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.CurrencyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyPairReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyPairReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CoinaId != other.CoinaId) return false;
      if (CoinaName != other.CoinaName) return false;
      if (CoinbId != other.CoinbId) return false;
      if (CoinbName != other.CoinbName) return false;
      if (PrioritySort != other.PrioritySort) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (CoinaId.Length != 0) hash ^= CoinaId.GetHashCode();
      if (CoinaName.Length != 0) hash ^= CoinaName.GetHashCode();
      if (CoinbId.Length != 0) hash ^= CoinbId.GetHashCode();
      if (CoinbName.Length != 0) hash ^= CoinbName.GetHashCode();
      if (PrioritySort != 0) hash ^= PrioritySort.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (CoinaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CoinaId);
      }
      if (CoinaName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CoinaName);
      }
      if (CoinbId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CoinbId);
      }
      if (CoinbName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CoinbName);
      }
      if (PrioritySort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PrioritySort);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (CoinaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinaId);
      }
      if (CoinaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinaName);
      }
      if (CoinbId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinbId);
      }
      if (CoinbName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinbName);
      }
      if (PrioritySort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrioritySort);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyPairReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.CoinaId.Length != 0) {
        CoinaId = other.CoinaId;
      }
      if (other.CoinaName.Length != 0) {
        CoinaName = other.CoinaName;
      }
      if (other.CoinbId.Length != 0) {
        CoinbId = other.CoinbId;
      }
      if (other.CoinbName.Length != 0) {
        CoinbName = other.CoinbName;
      }
      if (other.PrioritySort != 0) {
        PrioritySort = other.PrioritySort;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            CoinaId = input.ReadString();
            break;
          }
          case 26: {
            CoinaName = input.ReadString();
            break;
          }
          case 34: {
            CoinbId = input.ReadString();
            break;
          }
          case 42: {
            CoinbName = input.ReadString();
            break;
          }
          case 48: {
            PrioritySort = input.ReadInt32();
            break;
          }
          case 56: {
            type_ = (global::Proto.CurrencyType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyPairListReply : pb::IMessage<CurrencyPairListReply> {
    private static readonly pb::MessageParser<CurrencyPairListReply> _parser = new pb::MessageParser<CurrencyPairListReply>(() => new CurrencyPairListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyPairListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPairListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPairListReply(CurrencyPairListReply other) : this() {
      pairList_ = other.pairList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyPairListReply Clone() {
      return new CurrencyPairListReply(this);
    }

    /// <summary>Field number for the "PairList" field.</summary>
    public const int PairListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.CurrencyPairReply> _repeated_pairList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.CurrencyPairReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.CurrencyPairReply> pairList_ = new pbc::RepeatedField<global::Proto.CurrencyPairReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.CurrencyPairReply> PairList {
      get { return pairList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyPairListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyPairListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pairList_.Equals(other.pairList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pairList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pairList_.WriteTo(output, _repeated_pairList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pairList_.CalculateSize(_repeated_pairList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyPairListReply other) {
      if (other == null) {
        return;
      }
      pairList_.Add(other.pairList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pairList_.AddEntriesFrom(input, _repeated_pairList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Otc广告信息
  /// </summary>
  public sealed partial class OtcOrderReply : pb::IMessage<OtcOrderReply> {
    private static readonly pb::MessageParser<OtcOrderReply> _parser = new pb::MessageParser<OtcOrderReply>(() => new OtcOrderReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcOrderReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderReply(OtcOrderReply other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      buySell_ = other.buySell_;
      CurrencyPair = other.currencyPair_ != null ? other.CurrencyPair.Clone() : null;
      PayeeAddressList = other.payeeAddressList_ != null ? other.PayeeAddressList.Clone() : null;
      quotePrice_ = other.quotePrice_;
      quoteAmount_ = other.quoteAmount_;
      leftAmount_ = other.leftAmount_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
      expireTime_ = other.expireTime_;
      openLimitHour_ = other.openLimitHour_;
      openLimitMinute_ = other.openLimitMinute_;
      closeLimitHour_ = other.closeLimitHour_;
      closeLimitMinute_ = other.closeLimitMinute_;
      status_ = other.status_;
      autoReply_ = other.autoReply_;
      autoMessage_ = other.autoMessage_;
      createTime_ = other.createTime_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderReply Clone() {
      return new OtcOrderReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "buySell" field.</summary>
    public const int BuySellFieldNumber = 3;
    private global::Proto.TradeType buySell_ = 0;
    /// <summary>
    ///交易类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.TradeType BuySell {
      get { return buySell_; }
      set {
        buySell_ = value;
      }
    }

    /// <summary>Field number for the "currencyPair" field.</summary>
    public const int CurrencyPairFieldNumber = 4;
    private global::Proto.CurrencyPairReply currencyPair_;
    /// <summary>
    ///交易对信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.CurrencyPairReply CurrencyPair {
      get { return currencyPair_; }
      set {
        currencyPair_ = value;
      }
    }

    /// <summary>Field number for the "payeeAddressList" field.</summary>
    public const int PayeeAddressListFieldNumber = 5;
    private global::Proto.AccountListReply payeeAddressList_;
    /// <summary>
    ///收款地址列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.AccountListReply PayeeAddressList {
      get { return payeeAddressList_; }
      set {
        payeeAddressList_ = value;
      }
    }

    /// <summary>Field number for the "quotePrice" field.</summary>
    public const int QuotePriceFieldNumber = 6;
    private long quotePrice_;
    /// <summary>
    ///报价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuotePrice {
      get { return quotePrice_; }
      set {
        quotePrice_ = value;
      }
    }

    /// <summary>Field number for the "quoteAmount" field.</summary>
    public const int QuoteAmountFieldNumber = 7;
    private long quoteAmount_;
    /// <summary>
    ///报单数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuoteAmount {
      get { return quoteAmount_; }
      set {
        quoteAmount_ = value;
      }
    }

    /// <summary>Field number for the "leftAmount" field.</summary>
    public const int LeftAmountFieldNumber = 8;
    private long leftAmount_;
    /// <summary>
    ///交易剩余数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeftAmount {
      get { return leftAmount_; }
      set {
        leftAmount_ = value;
      }
    }

    /// <summary>Field number for the "minValue" field.</summary>
    public const int MinValueFieldNumber = 9;
    private long minValue_;
    /// <summary>
    ///最小成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 10;
    private long maxValue_;
    /// <summary>
    ///最大成交额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 11;
    private int expireTime_;
    /// <summary>
    ///过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "openLimitHour" field.</summary>
    public const int OpenLimitHourFieldNumber = 12;
    private int openLimitHour_;
    /// <summary>
    ///开放小时限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenLimitHour {
      get { return openLimitHour_; }
      set {
        openLimitHour_ = value;
      }
    }

    /// <summary>Field number for the "openLimitMinute" field.</summary>
    public const int OpenLimitMinuteFieldNumber = 13;
    private int openLimitMinute_;
    /// <summary>
    ///开放分钟限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenLimitMinute {
      get { return openLimitMinute_; }
      set {
        openLimitMinute_ = value;
      }
    }

    /// <summary>Field number for the "closeLimitHour" field.</summary>
    public const int CloseLimitHourFieldNumber = 14;
    private int closeLimitHour_;
    /// <summary>
    ///关闭小时限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CloseLimitHour {
      get { return closeLimitHour_; }
      set {
        closeLimitHour_ = value;
      }
    }

    /// <summary>Field number for the "closeLimitMinute" field.</summary>
    public const int CloseLimitMinuteFieldNumber = 15;
    private int closeLimitMinute_;
    /// <summary>
    ///关闭分钟限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CloseLimitMinute {
      get { return closeLimitMinute_; }
      set {
        closeLimitMinute_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 16;
    private global::Proto.OtcStatusType status_ = 0;
    /// <summary>
    ///广告交易状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.OtcStatusType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "autoReply" field.</summary>
    public const int AutoReplyFieldNumber = 17;
    private global::Proto.BoolValue autoReply_ = 0;
    /// <summary>
    ///是否自动回复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue AutoReply {
      get { return autoReply_; }
      set {
        autoReply_ = value;
      }
    }

    /// <summary>Field number for the "autoMessage" field.</summary>
    public const int AutoMessageFieldNumber = 18;
    private string autoMessage_ = "";
    /// <summary>
    ///自动回复消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AutoMessage {
      get { return autoMessage_; }
      set {
        autoMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 19;
    private string createTime_ = "";
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTime {
      get { return createTime_; }
      set {
        createTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 20;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcOrderReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcOrderReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (BuySell != other.BuySell) return false;
      if (!object.Equals(CurrencyPair, other.CurrencyPair)) return false;
      if (!object.Equals(PayeeAddressList, other.PayeeAddressList)) return false;
      if (QuotePrice != other.QuotePrice) return false;
      if (QuoteAmount != other.QuoteAmount) return false;
      if (LeftAmount != other.LeftAmount) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (OpenLimitHour != other.OpenLimitHour) return false;
      if (OpenLimitMinute != other.OpenLimitMinute) return false;
      if (CloseLimitHour != other.CloseLimitHour) return false;
      if (CloseLimitMinute != other.CloseLimitMinute) return false;
      if (Status != other.Status) return false;
      if (AutoReply != other.AutoReply) return false;
      if (AutoMessage != other.AutoMessage) return false;
      if (CreateTime != other.CreateTime) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (BuySell != 0) hash ^= BuySell.GetHashCode();
      if (currencyPair_ != null) hash ^= CurrencyPair.GetHashCode();
      if (payeeAddressList_ != null) hash ^= PayeeAddressList.GetHashCode();
      if (QuotePrice != 0L) hash ^= QuotePrice.GetHashCode();
      if (QuoteAmount != 0L) hash ^= QuoteAmount.GetHashCode();
      if (LeftAmount != 0L) hash ^= LeftAmount.GetHashCode();
      if (MinValue != 0L) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0L) hash ^= MaxValue.GetHashCode();
      if (ExpireTime != 0) hash ^= ExpireTime.GetHashCode();
      if (OpenLimitHour != 0) hash ^= OpenLimitHour.GetHashCode();
      if (OpenLimitMinute != 0) hash ^= OpenLimitMinute.GetHashCode();
      if (CloseLimitHour != 0) hash ^= CloseLimitHour.GetHashCode();
      if (CloseLimitMinute != 0) hash ^= CloseLimitMinute.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (AutoReply != 0) hash ^= AutoReply.GetHashCode();
      if (AutoMessage.Length != 0) hash ^= AutoMessage.GetHashCode();
      if (CreateTime.Length != 0) hash ^= CreateTime.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (BuySell != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) BuySell);
      }
      if (currencyPair_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CurrencyPair);
      }
      if (payeeAddressList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PayeeAddressList);
      }
      if (QuotePrice != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(QuotePrice);
      }
      if (QuoteAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(QuoteAmount);
      }
      if (LeftAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LeftAmount);
      }
      if (MinValue != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MinValue);
      }
      if (MaxValue != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MaxValue);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExpireTime);
      }
      if (OpenLimitHour != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OpenLimitHour);
      }
      if (OpenLimitMinute != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OpenLimitMinute);
      }
      if (CloseLimitHour != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CloseLimitHour);
      }
      if (CloseLimitMinute != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CloseLimitMinute);
      }
      if (Status != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Status);
      }
      if (AutoReply != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) AutoReply);
      }
      if (AutoMessage.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AutoMessage);
      }
      if (CreateTime.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (BuySell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell);
      }
      if (currencyPair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyPair);
      }
      if (payeeAddressList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayeeAddressList);
      }
      if (QuotePrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuotePrice);
      }
      if (QuoteAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuoteAmount);
      }
      if (LeftAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftAmount);
      }
      if (MinValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinValue);
      }
      if (MaxValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxValue);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpireTime);
      }
      if (OpenLimitHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenLimitHour);
      }
      if (OpenLimitMinute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenLimitMinute);
      }
      if (CloseLimitHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloseLimitHour);
      }
      if (CloseLimitMinute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloseLimitMinute);
      }
      if (Status != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (AutoReply != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoReply);
      }
      if (AutoMessage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AutoMessage);
      }
      if (CreateTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CreateTime);
      }
      if (UpdateTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcOrderReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.BuySell != 0) {
        BuySell = other.BuySell;
      }
      if (other.currencyPair_ != null) {
        if (currencyPair_ == null) {
          currencyPair_ = new global::Proto.CurrencyPairReply();
        }
        CurrencyPair.MergeFrom(other.CurrencyPair);
      }
      if (other.payeeAddressList_ != null) {
        if (payeeAddressList_ == null) {
          payeeAddressList_ = new global::Proto.AccountListReply();
        }
        PayeeAddressList.MergeFrom(other.PayeeAddressList);
      }
      if (other.QuotePrice != 0L) {
        QuotePrice = other.QuotePrice;
      }
      if (other.QuoteAmount != 0L) {
        QuoteAmount = other.QuoteAmount;
      }
      if (other.LeftAmount != 0L) {
        LeftAmount = other.LeftAmount;
      }
      if (other.MinValue != 0L) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0L) {
        MaxValue = other.MaxValue;
      }
      if (other.ExpireTime != 0) {
        ExpireTime = other.ExpireTime;
      }
      if (other.OpenLimitHour != 0) {
        OpenLimitHour = other.OpenLimitHour;
      }
      if (other.OpenLimitMinute != 0) {
        OpenLimitMinute = other.OpenLimitMinute;
      }
      if (other.CloseLimitHour != 0) {
        CloseLimitHour = other.CloseLimitHour;
      }
      if (other.CloseLimitMinute != 0) {
        CloseLimitMinute = other.CloseLimitMinute;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.AutoReply != 0) {
        AutoReply = other.AutoReply;
      }
      if (other.AutoMessage.Length != 0) {
        AutoMessage = other.AutoMessage;
      }
      if (other.CreateTime.Length != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            buySell_ = (global::Proto.TradeType) input.ReadEnum();
            break;
          }
          case 34: {
            if (currencyPair_ == null) {
              currencyPair_ = new global::Proto.CurrencyPairReply();
            }
            input.ReadMessage(currencyPair_);
            break;
          }
          case 42: {
            if (payeeAddressList_ == null) {
              payeeAddressList_ = new global::Proto.AccountListReply();
            }
            input.ReadMessage(payeeAddressList_);
            break;
          }
          case 48: {
            QuotePrice = input.ReadInt64();
            break;
          }
          case 56: {
            QuoteAmount = input.ReadInt64();
            break;
          }
          case 64: {
            LeftAmount = input.ReadInt64();
            break;
          }
          case 72: {
            MinValue = input.ReadInt64();
            break;
          }
          case 80: {
            MaxValue = input.ReadInt64();
            break;
          }
          case 88: {
            ExpireTime = input.ReadInt32();
            break;
          }
          case 96: {
            OpenLimitHour = input.ReadInt32();
            break;
          }
          case 104: {
            OpenLimitMinute = input.ReadInt32();
            break;
          }
          case 112: {
            CloseLimitHour = input.ReadInt32();
            break;
          }
          case 120: {
            CloseLimitMinute = input.ReadInt32();
            break;
          }
          case 128: {
            status_ = (global::Proto.OtcStatusType) input.ReadEnum();
            break;
          }
          case 136: {
            autoReply_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 146: {
            AutoMessage = input.ReadString();
            break;
          }
          case 154: {
            CreateTime = input.ReadString();
            break;
          }
          case 162: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OtcOrderListReply : pb::IMessage<OtcOrderListReply> {
    private static readonly pb::MessageParser<OtcOrderListReply> _parser = new pb::MessageParser<OtcOrderListReply>(() => new OtcOrderListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcOrderListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderListReply(OtcOrderListReply other) : this() {
      orderList_ = other.orderList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcOrderListReply Clone() {
      return new OtcOrderListReply(this);
    }

    /// <summary>Field number for the "OrderList" field.</summary>
    public const int OrderListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.OtcOrderReply> _repeated_orderList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.OtcOrderReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.OtcOrderReply> orderList_ = new pbc::RepeatedField<global::Proto.OtcOrderReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.OtcOrderReply> OrderList {
      get { return orderList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcOrderListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcOrderListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orderList_.Equals(other.orderList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orderList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      orderList_.WriteTo(output, _repeated_orderList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderList_.CalculateSize(_repeated_orderList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcOrderListReply other) {
      if (other == null) {
        return;
      }
      orderList_.Add(other.orderList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            orderList_.AddEntriesFrom(input, _repeated_orderList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///OtcDetails订单信息
  /// </summary>
  public sealed partial class OtcDetailsReply : pb::IMessage<OtcDetailsReply> {
    private static readonly pb::MessageParser<OtcDetailsReply> _parser = new pb::MessageParser<OtcDetailsReply>(() => new OtcDetailsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcDetailsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsReply(OtcDetailsReply other) : this() {
      id_ = other.id_;
      OtcOrder = other.otcOrder_ != null ? other.OtcOrder.Clone() : null;
      orderOwnerName_ = other.orderOwnerName_;
      orderJoinerName_ = other.orderJoinerName_;
      joinUserId_ = other.joinUserId_;
      buyAmount_ = other.buyAmount_;
      payAmount_ = other.payAmount_;
      orderTime_ = other.orderTime_;
      settlementTime_ = other.settlementTime_;
      settlementNote_ = other.settlementNote_;
      status_ = other.status_;
      ownerPay_ = other.ownerPay_;
      joinerPay_ = other.joinerPay_;
      appealOwner_ = other.appealOwner_;
      appealOwnerMessage_ = other.appealOwnerMessage_;
      appealJoiner_ = other.appealJoiner_;
      appealJoinerMessage_ = other.appealJoinerMessage_;
      orderNumber_ = other.orderNumber_;
      updateTime_ = other.updateTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsReply Clone() {
      return new OtcDetailsReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "otcOrder" field.</summary>
    public const int OtcOrderFieldNumber = 2;
    private global::Proto.OtcOrderReply otcOrder_;
    /// <summary>
    ///广告订单信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.OtcOrderReply OtcOrder {
      get { return otcOrder_; }
      set {
        otcOrder_ = value;
      }
    }

    /// <summary>Field number for the "orderOwnerName" field.</summary>
    public const int OrderOwnerNameFieldNumber = 3;
    private string orderOwnerName_ = "";
    /// <summary>
    ///商家用户姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderOwnerName {
      get { return orderOwnerName_; }
      set {
        orderOwnerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderJoinerName" field.</summary>
    public const int OrderJoinerNameFieldNumber = 4;
    private string orderJoinerName_ = "";
    /// <summary>
    ///参与用户姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderJoinerName {
      get { return orderJoinerName_; }
      set {
        orderJoinerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joinUserId" field.</summary>
    public const int JoinUserIdFieldNumber = 5;
    private long joinUserId_;
    /// <summary>
    ///参与用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JoinUserId {
      get { return joinUserId_; }
      set {
        joinUserId_ = value;
      }
    }

    /// <summary>Field number for the "buyAmount" field.</summary>
    public const int BuyAmountFieldNumber = 6;
    private long buyAmount_;
    /// <summary>
    ///购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BuyAmount {
      get { return buyAmount_; }
      set {
        buyAmount_ = value;
      }
    }

    /// <summary>Field number for the "payAmount" field.</summary>
    public const int PayAmountFieldNumber = 7;
    private long payAmount_;
    /// <summary>
    ///付款数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayAmount {
      get { return payAmount_; }
      set {
        payAmount_ = value;
      }
    }

    /// <summary>Field number for the "orderTime" field.</summary>
    public const int OrderTimeFieldNumber = 8;
    private string orderTime_ = "";
    /// <summary>
    ///下单时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderTime {
      get { return orderTime_; }
      set {
        orderTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlementTime" field.</summary>
    public const int SettlementTimeFieldNumber = 9;
    private string settlementTime_ = "";
    /// <summary>
    ///结算时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettlementTime {
      get { return settlementTime_; }
      set {
        settlementTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlementNote" field.</summary>
    public const int SettlementNoteFieldNumber = 10;
    private string settlementNote_ = "";
    /// <summary>
    ///结算备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettlementNote {
      get { return settlementNote_; }
      set {
        settlementNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 11;
    private global::Proto.OtcDetailsStatusType status_ = 0;
    /// <summary>
    ///订单状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.OtcDetailsStatusType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ownerPay" field.</summary>
    public const int OwnerPayFieldNumber = 12;
    private global::Proto.BoolValue ownerPay_ = 0;
    /// <summary>
    ///商家付款
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue OwnerPay {
      get { return ownerPay_; }
      set {
        ownerPay_ = value;
      }
    }

    /// <summary>Field number for the "joinerPay" field.</summary>
    public const int JoinerPayFieldNumber = 13;
    private global::Proto.BoolValue joinerPay_ = 0;
    /// <summary>
    ///参与者付款
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue JoinerPay {
      get { return joinerPay_; }
      set {
        joinerPay_ = value;
      }
    }

    /// <summary>Field number for the "appealOwner" field.</summary>
    public const int AppealOwnerFieldNumber = 14;
    private global::Proto.BoolValue appealOwner_ = 0;
    /// <summary>
    ///商家申诉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue AppealOwner {
      get { return appealOwner_; }
      set {
        appealOwner_ = value;
      }
    }

    /// <summary>Field number for the "appealOwnerMessage" field.</summary>
    public const int AppealOwnerMessageFieldNumber = 15;
    private string appealOwnerMessage_ = "";
    /// <summary>
    ///商家申诉信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppealOwnerMessage {
      get { return appealOwnerMessage_; }
      set {
        appealOwnerMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appealJoiner" field.</summary>
    public const int AppealJoinerFieldNumber = 16;
    private global::Proto.BoolValue appealJoiner_ = 0;
    /// <summary>
    ///参与者申诉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue AppealJoiner {
      get { return appealJoiner_; }
      set {
        appealJoiner_ = value;
      }
    }

    /// <summary>Field number for the "appealJoinerMessage" field.</summary>
    public const int AppealJoinerMessageFieldNumber = 17;
    private string appealJoinerMessage_ = "";
    /// <summary>
    ///参与者申诉信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppealJoinerMessage {
      get { return appealJoinerMessage_; }
      set {
        appealJoinerMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 18;
    private string orderNumber_ = "";
    /// <summary>
    ///订单编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 20;
    private string updateTime_ = "";
    /// <summary>
    ///更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcDetailsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcDetailsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(OtcOrder, other.OtcOrder)) return false;
      if (OrderOwnerName != other.OrderOwnerName) return false;
      if (OrderJoinerName != other.OrderJoinerName) return false;
      if (JoinUserId != other.JoinUserId) return false;
      if (BuyAmount != other.BuyAmount) return false;
      if (PayAmount != other.PayAmount) return false;
      if (OrderTime != other.OrderTime) return false;
      if (SettlementTime != other.SettlementTime) return false;
      if (SettlementNote != other.SettlementNote) return false;
      if (Status != other.Status) return false;
      if (OwnerPay != other.OwnerPay) return false;
      if (JoinerPay != other.JoinerPay) return false;
      if (AppealOwner != other.AppealOwner) return false;
      if (AppealOwnerMessage != other.AppealOwnerMessage) return false;
      if (AppealJoiner != other.AppealJoiner) return false;
      if (AppealJoinerMessage != other.AppealJoinerMessage) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (UpdateTime != other.UpdateTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (otcOrder_ != null) hash ^= OtcOrder.GetHashCode();
      if (OrderOwnerName.Length != 0) hash ^= OrderOwnerName.GetHashCode();
      if (OrderJoinerName.Length != 0) hash ^= OrderJoinerName.GetHashCode();
      if (JoinUserId != 0L) hash ^= JoinUserId.GetHashCode();
      if (BuyAmount != 0L) hash ^= BuyAmount.GetHashCode();
      if (PayAmount != 0L) hash ^= PayAmount.GetHashCode();
      if (OrderTime.Length != 0) hash ^= OrderTime.GetHashCode();
      if (SettlementTime.Length != 0) hash ^= SettlementTime.GetHashCode();
      if (SettlementNote.Length != 0) hash ^= SettlementNote.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (OwnerPay != 0) hash ^= OwnerPay.GetHashCode();
      if (JoinerPay != 0) hash ^= JoinerPay.GetHashCode();
      if (AppealOwner != 0) hash ^= AppealOwner.GetHashCode();
      if (AppealOwnerMessage.Length != 0) hash ^= AppealOwnerMessage.GetHashCode();
      if (AppealJoiner != 0) hash ^= AppealJoiner.GetHashCode();
      if (AppealJoinerMessage.Length != 0) hash ^= AppealJoinerMessage.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (UpdateTime.Length != 0) hash ^= UpdateTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (otcOrder_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OtcOrder);
      }
      if (OrderOwnerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderOwnerName);
      }
      if (OrderJoinerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OrderJoinerName);
      }
      if (JoinUserId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(JoinUserId);
      }
      if (BuyAmount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(BuyAmount);
      }
      if (PayAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(PayAmount);
      }
      if (OrderTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OrderTime);
      }
      if (SettlementTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SettlementTime);
      }
      if (SettlementNote.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SettlementNote);
      }
      if (Status != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Status);
      }
      if (OwnerPay != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OwnerPay);
      }
      if (JoinerPay != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) JoinerPay);
      }
      if (AppealOwner != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) AppealOwner);
      }
      if (AppealOwnerMessage.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(AppealOwnerMessage);
      }
      if (AppealJoiner != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) AppealJoiner);
      }
      if (AppealJoinerMessage.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AppealJoinerMessage);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OrderNumber);
      }
      if (UpdateTime.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(UpdateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (otcOrder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtcOrder);
      }
      if (OrderOwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderOwnerName);
      }
      if (OrderJoinerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderJoinerName);
      }
      if (JoinUserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JoinUserId);
      }
      if (BuyAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuyAmount);
      }
      if (PayAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayAmount);
      }
      if (OrderTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderTime);
      }
      if (SettlementTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettlementTime);
      }
      if (SettlementNote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettlementNote);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (OwnerPay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OwnerPay);
      }
      if (JoinerPay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinerPay);
      }
      if (AppealOwner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AppealOwner);
      }
      if (AppealOwnerMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppealOwnerMessage);
      }
      if (AppealJoiner != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AppealJoiner);
      }
      if (AppealJoinerMessage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppealJoinerMessage);
      }
      if (OrderNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (UpdateTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcDetailsReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.otcOrder_ != null) {
        if (otcOrder_ == null) {
          otcOrder_ = new global::Proto.OtcOrderReply();
        }
        OtcOrder.MergeFrom(other.OtcOrder);
      }
      if (other.OrderOwnerName.Length != 0) {
        OrderOwnerName = other.OrderOwnerName;
      }
      if (other.OrderJoinerName.Length != 0) {
        OrderJoinerName = other.OrderJoinerName;
      }
      if (other.JoinUserId != 0L) {
        JoinUserId = other.JoinUserId;
      }
      if (other.BuyAmount != 0L) {
        BuyAmount = other.BuyAmount;
      }
      if (other.PayAmount != 0L) {
        PayAmount = other.PayAmount;
      }
      if (other.OrderTime.Length != 0) {
        OrderTime = other.OrderTime;
      }
      if (other.SettlementTime.Length != 0) {
        SettlementTime = other.SettlementTime;
      }
      if (other.SettlementNote.Length != 0) {
        SettlementNote = other.SettlementNote;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.OwnerPay != 0) {
        OwnerPay = other.OwnerPay;
      }
      if (other.JoinerPay != 0) {
        JoinerPay = other.JoinerPay;
      }
      if (other.AppealOwner != 0) {
        AppealOwner = other.AppealOwner;
      }
      if (other.AppealOwnerMessage.Length != 0) {
        AppealOwnerMessage = other.AppealOwnerMessage;
      }
      if (other.AppealJoiner != 0) {
        AppealJoiner = other.AppealJoiner;
      }
      if (other.AppealJoinerMessage.Length != 0) {
        AppealJoinerMessage = other.AppealJoinerMessage;
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.UpdateTime.Length != 0) {
        UpdateTime = other.UpdateTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (otcOrder_ == null) {
              otcOrder_ = new global::Proto.OtcOrderReply();
            }
            input.ReadMessage(otcOrder_);
            break;
          }
          case 26: {
            OrderOwnerName = input.ReadString();
            break;
          }
          case 34: {
            OrderJoinerName = input.ReadString();
            break;
          }
          case 40: {
            JoinUserId = input.ReadInt64();
            break;
          }
          case 48: {
            BuyAmount = input.ReadInt64();
            break;
          }
          case 56: {
            PayAmount = input.ReadInt64();
            break;
          }
          case 66: {
            OrderTime = input.ReadString();
            break;
          }
          case 74: {
            SettlementTime = input.ReadString();
            break;
          }
          case 82: {
            SettlementNote = input.ReadString();
            break;
          }
          case 88: {
            status_ = (global::Proto.OtcDetailsStatusType) input.ReadEnum();
            break;
          }
          case 96: {
            ownerPay_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 104: {
            joinerPay_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 112: {
            appealOwner_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 122: {
            AppealOwnerMessage = input.ReadString();
            break;
          }
          case 128: {
            appealJoiner_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 138: {
            AppealJoinerMessage = input.ReadString();
            break;
          }
          case 146: {
            OrderNumber = input.ReadString();
            break;
          }
          case 162: {
            UpdateTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OtcDetailsListReply : pb::IMessage<OtcDetailsListReply> {
    private static readonly pb::MessageParser<OtcDetailsListReply> _parser = new pb::MessageParser<OtcDetailsListReply>(() => new OtcDetailsListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtcDetailsListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.OtcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsListReply(OtcDetailsListReply other) : this() {
      detailList_ = other.detailList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtcDetailsListReply Clone() {
      return new OtcDetailsListReply(this);
    }

    /// <summary>Field number for the "DetailList" field.</summary>
    public const int DetailListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.OtcDetailsReply> _repeated_detailList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.OtcDetailsReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.OtcDetailsReply> detailList_ = new pbc::RepeatedField<global::Proto.OtcDetailsReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.OtcDetailsReply> DetailList {
      get { return detailList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtcDetailsListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtcDetailsListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!detailList_.Equals(other.detailList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= detailList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      detailList_.WriteTo(output, _repeated_detailList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += detailList_.CalculateSize(_repeated_detailList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtcDetailsListReply other) {
      if (other == null) {
        return;
      }
      detailList_.Add(other.detailList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            detailList_.AddEntriesFrom(input, _repeated_detailList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
