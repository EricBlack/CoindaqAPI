// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Proto {
  /// <summary>
  ///*
  /// 项目相关API
  /// </summary>
  public static partial class ProjectService
  {
    static readonly string __ServiceName = "proto.ProjectService";

    static readonly grpc::Marshaller<global::Proto.IdReq> __Marshaller_IdReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.IdReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.ProjectInfoReply> __Marshaller_ProjectInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ProjectInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.ProjectListReply> __Marshaller_ProjectListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ProjectListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.MediaListReply> __Marshaller_MediaListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.MediaListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.ProjectDescriptionListReply> __Marshaller_ProjectDescriptionListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ProjectDescriptionListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.CertificationListReply> __Marshaller_CertificationListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.CertificationListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.MemberListReply> __Marshaller_MemberListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.MemberListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.StageListReply> __Marshaller_StageListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.StageListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.StageFilterReq> __Marshaller_StageFilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.StageFilterReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.StageInfoReply> __Marshaller_StageInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.StageInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.StageCoinListReply> __Marshaller_StageCoinListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.StageCoinListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.StageCoinFilterReq> __Marshaller_StageCoinFilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.StageCoinFilterReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.StageCoinReply> __Marshaller_StageCoinReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.StageCoinReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.NoticeFilterReq> __Marshaller_NoticeFilterReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.NoticeFilterReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.NoticeInfoListReply> __Marshaller_NoticeInfoListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.NoticeInfoListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.NoticeVoteReply> __Marshaller_NoticeVoteReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.NoticeVoteReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.NoticeRightReq> __Marshaller_NoticeRightReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.NoticeRightReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.BoolReply> __Marshaller_BoolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.BoolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.UserVoteReq> __Marshaller_UserVoteReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.UserVoteReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.IcoOrderReq> __Marshaller_IcoOrderReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.IcoOrderReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.IcoInfoReply> __Marshaller_IcoInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.IcoInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.RecommendProjectListReply> __Marshaller_RecommendProjectListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.RecommendProjectListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.ProjectDetailsReply> __Marshaller_ProjectDetailsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ProjectDetailsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.RaiseRuleReply> __Marshaller_RaiseRuleReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.RaiseRuleReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.ProjectNoticeListReply> __Marshaller_ProjectNoticeListReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ProjectNoticeListReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.NoticeNewsReply> __Marshaller_NoticeNewsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.NoticeNewsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.NoticeVoteDetailReply> __Marshaller_NoticeVoteDetailReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.NoticeVoteDetailReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.ProjectInfoReply> __Method_QueryProjectById = new grpc::Method<global::Proto.IdReq, global::Proto.ProjectInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectById",
        __Marshaller_IdReq,
        __Marshaller_ProjectInfoReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.ProjectListReply> __Method_QueryUserParticipationProject = new grpc::Method<global::Proto.IdReq, global::Proto.ProjectListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryUserParticipationProject",
        __Marshaller_IdReq,
        __Marshaller_ProjectListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.MediaListReply> __Method_QueryProjectPhotosInfo = new grpc::Method<global::Proto.IdReq, global::Proto.MediaListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectPhotosInfo",
        __Marshaller_IdReq,
        __Marshaller_MediaListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.MediaListReply> __Method_QueryProjectVideosInfo = new grpc::Method<global::Proto.IdReq, global::Proto.MediaListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectVideosInfo",
        __Marshaller_IdReq,
        __Marshaller_MediaListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.ProjectDescriptionListReply> __Method_QueryProjectDescriptionInfo = new grpc::Method<global::Proto.IdReq, global::Proto.ProjectDescriptionListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectDescriptionInfo",
        __Marshaller_IdReq,
        __Marshaller_ProjectDescriptionListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.CertificationListReply> __Method_QueryProjectCertificationInfo = new grpc::Method<global::Proto.IdReq, global::Proto.CertificationListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectCertificationInfo",
        __Marshaller_IdReq,
        __Marshaller_CertificationListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.MemberListReply> __Method_QueryProjectMembersInfo = new grpc::Method<global::Proto.IdReq, global::Proto.MemberListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectMembersInfo",
        __Marshaller_IdReq,
        __Marshaller_MemberListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.StageListReply> __Method_QueryProjectStagesInfo = new grpc::Method<global::Proto.IdReq, global::Proto.StageListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectStagesInfo",
        __Marshaller_IdReq,
        __Marshaller_StageListReply);

    static readonly grpc::Method<global::Proto.StageFilterReq, global::Proto.StageInfoReply> __Method_FilterProjectStageInfo = new grpc::Method<global::Proto.StageFilterReq, global::Proto.StageInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FilterProjectStageInfo",
        __Marshaller_StageFilterReq,
        __Marshaller_StageInfoReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.StageCoinListReply> __Method_QueryStageCoinInfo = new grpc::Method<global::Proto.IdReq, global::Proto.StageCoinListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryStageCoinInfo",
        __Marshaller_IdReq,
        __Marshaller_StageCoinListReply);

    static readonly grpc::Method<global::Proto.StageCoinFilterReq, global::Proto.StageCoinReply> __Method_FilterStageCoinInfo = new grpc::Method<global::Proto.StageCoinFilterReq, global::Proto.StageCoinReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FilterStageCoinInfo",
        __Marshaller_StageCoinFilterReq,
        __Marshaller_StageCoinReply);

    static readonly grpc::Method<global::Proto.NoticeFilterReq, global::Proto.NoticeInfoListReply> __Method_QueryProjectNoticesByFilter = new grpc::Method<global::Proto.NoticeFilterReq, global::Proto.NoticeInfoListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectNoticesByFilter",
        __Marshaller_NoticeFilterReq,
        __Marshaller_NoticeInfoListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.NoticeVoteReply> __Method_QueryProjectNoticeVoteInfo = new grpc::Method<global::Proto.IdReq, global::Proto.NoticeVoteReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectNoticeVoteInfo",
        __Marshaller_IdReq,
        __Marshaller_NoticeVoteReply);

    static readonly grpc::Method<global::Proto.NoticeRightReq, global::Proto.BoolReply> __Method_CheckUserCanVoteNotice = new grpc::Method<global::Proto.NoticeRightReq, global::Proto.BoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckUserCanVoteNotice",
        __Marshaller_NoticeRightReq,
        __Marshaller_BoolReply);

    static readonly grpc::Method<global::Proto.UserVoteReq, global::Proto.Empty> __Method_UserNoticeVote = new grpc::Method<global::Proto.UserVoteReq, global::Proto.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserNoticeVote",
        __Marshaller_UserVoteReq,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Proto.IcoOrderReq, global::Proto.IcoInfoReply> __Method_JoinProjectIco = new grpc::Method<global::Proto.IcoOrderReq, global::Proto.IcoInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinProjectIco",
        __Marshaller_IcoOrderReq,
        __Marshaller_IcoInfoReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.BoolReply> __Method_CheckUserKycStatusInfo = new grpc::Method<global::Proto.IdReq, global::Proto.BoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckUserKycStatusInfo",
        __Marshaller_IdReq,
        __Marshaller_BoolReply);

    static readonly grpc::Method<global::Proto.Empty, global::Proto.RecommendProjectListReply> __Method_QueryRecommendProjectsInfo = new grpc::Method<global::Proto.Empty, global::Proto.RecommendProjectListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryRecommendProjectsInfo",
        __Marshaller_Empty,
        __Marshaller_RecommendProjectListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.RecommendProjectListReply> __Method_QueryUserJoinProjectsInfo = new grpc::Method<global::Proto.IdReq, global::Proto.RecommendProjectListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryUserJoinProjectsInfo",
        __Marshaller_IdReq,
        __Marshaller_RecommendProjectListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.ProjectDetailsReply> __Method_QueryProjectDetailsInfo = new grpc::Method<global::Proto.IdReq, global::Proto.ProjectDetailsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectDetailsInfo",
        __Marshaller_IdReq,
        __Marshaller_ProjectDetailsReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.RaiseRuleReply> __Method_QueryRaiseInvestmentDetailsInfo = new grpc::Method<global::Proto.IdReq, global::Proto.RaiseRuleReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryRaiseInvestmentDetailsInfo",
        __Marshaller_IdReq,
        __Marshaller_RaiseRuleReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.ProjectNoticeListReply> __Method_QueryProjectNoticesInfo = new grpc::Method<global::Proto.IdReq, global::Proto.ProjectNoticeListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectNoticesInfo",
        __Marshaller_IdReq,
        __Marshaller_ProjectNoticeListReply);

    static readonly grpc::Method<global::Proto.IdReq, global::Proto.NoticeNewsReply> __Method_QueryProjectNoticeNewsDetailsInfo = new grpc::Method<global::Proto.IdReq, global::Proto.NoticeNewsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryProjectNoticeNewsDetailsInfo",
        __Marshaller_IdReq,
        __Marshaller_NoticeNewsReply);

    static readonly grpc::Method<global::Proto.NoticeRightReq, global::Proto.NoticeVoteDetailReply> __Method_QueryNoticeVoteDetailsInfo = new grpc::Method<global::Proto.NoticeRightReq, global::Proto.NoticeVoteDetailReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryNoticeVoteDetailsInfo",
        __Marshaller_NoticeRightReq,
        __Marshaller_NoticeVoteDetailReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.ProjectReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProjectService</summary>
    public abstract partial class ProjectServiceBase
    {
      /// <summary>
      ///根据Id查询项目 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.ProjectInfoReply> QueryProjectById(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.ProjectListReply> QueryUserParticipationProject(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目图片信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.MediaListReply> QueryProjectPhotosInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目视频信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.MediaListReply> QueryProjectVideosInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目具体描述信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.ProjectDescriptionListReply> QueryProjectDescriptionInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目勋章信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.CertificationListReply> QueryProjectCertificationInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目成员信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.MemberListReply> QueryProjectMembersInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.StageListReply> QueryProjectStagesInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///多条件查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.StageInfoReply> FilterProjectStageInfo(global::Proto.StageFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目募资币种信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.StageCoinListReply> QueryStageCoinInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目具体币种募集信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.StageCoinReply> FilterStageCoinInfo(global::Proto.StageCoinFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目公告信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.NoticeInfoListReply> QueryProjectNoticesByFilter(global::Proto.NoticeFilterReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目投票信息 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.NoticeVoteReply> QueryProjectNoticeVoteInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///检查用户提案投票权限 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.BoolReply> CheckUserCanVoteNotice(global::Proto.NoticeRightReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///用户提案投票 - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.Empty> UserNoticeVote(global::Proto.UserVoteReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///参与项目ico - POST
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.IcoInfoReply> JoinProjectIco(global::Proto.IcoOrderReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询用户是否通过Kyc审核 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.BoolReply> CheckUserKycStatusInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询推荐项目 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.RecommendProjectListReply> QueryRecommendProjectsInfo(global::Proto.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.RecommendProjectListReply> QueryUserJoinProjectsInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目详情 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.ProjectDetailsReply> QueryProjectDetailsInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询募集细则 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.RaiseRuleReply> QueryRaiseInvestmentDetailsInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询项目公告列表 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.ProjectNoticeListReply> QueryProjectNoticesInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询公告详情 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.NoticeNewsReply> QueryProjectNoticeNewsDetailsInfo(global::Proto.IdReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///查询投票详情 - GET
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Proto.NoticeVoteDetailReply> QueryNoticeVoteDetailsInfo(global::Proto.NoticeRightReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProjectService</summary>
    public partial class ProjectServiceClient : grpc::ClientBase<ProjectServiceClient>
    {
      /// <summary>Creates a new client for ProjectService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProjectServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProjectService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProjectServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProjectServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProjectServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///根据Id查询项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectInfoReply QueryProjectById(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id查询项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectInfoReply QueryProjectById(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectById, null, options, request);
      }
      /// <summary>
      ///根据Id查询项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectInfoReply> QueryProjectByIdAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id查询项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectInfoReply> QueryProjectByIdAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectById, null, options, request);
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectListReply QueryUserParticipationProject(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserParticipationProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectListReply QueryUserParticipationProject(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryUserParticipationProject, null, options, request);
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectListReply> QueryUserParticipationProjectAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserParticipationProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectListReply> QueryUserParticipationProjectAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryUserParticipationProject, null, options, request);
      }
      /// <summary>
      ///查询项目图片信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MediaListReply QueryProjectPhotosInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectPhotosInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目图片信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MediaListReply QueryProjectPhotosInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectPhotosInfo, null, options, request);
      }
      /// <summary>
      ///查询项目图片信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MediaListReply> QueryProjectPhotosInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectPhotosInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目图片信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MediaListReply> QueryProjectPhotosInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectPhotosInfo, null, options, request);
      }
      /// <summary>
      ///查询项目视频信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MediaListReply QueryProjectVideosInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectVideosInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目视频信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MediaListReply QueryProjectVideosInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectVideosInfo, null, options, request);
      }
      /// <summary>
      ///查询项目视频信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MediaListReply> QueryProjectVideosInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectVideosInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目视频信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MediaListReply> QueryProjectVideosInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectVideosInfo, null, options, request);
      }
      /// <summary>
      ///查询项目具体描述信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectDescriptionListReply QueryProjectDescriptionInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectDescriptionInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目具体描述信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectDescriptionListReply QueryProjectDescriptionInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectDescriptionInfo, null, options, request);
      }
      /// <summary>
      ///查询项目具体描述信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectDescriptionListReply> QueryProjectDescriptionInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectDescriptionInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目具体描述信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectDescriptionListReply> QueryProjectDescriptionInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectDescriptionInfo, null, options, request);
      }
      /// <summary>
      ///查询项目勋章信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CertificationListReply QueryProjectCertificationInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectCertificationInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目勋章信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.CertificationListReply QueryProjectCertificationInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectCertificationInfo, null, options, request);
      }
      /// <summary>
      ///查询项目勋章信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CertificationListReply> QueryProjectCertificationInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectCertificationInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目勋章信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.CertificationListReply> QueryProjectCertificationInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectCertificationInfo, null, options, request);
      }
      /// <summary>
      ///查询项目成员信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MemberListReply QueryProjectMembersInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectMembersInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目成员信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.MemberListReply QueryProjectMembersInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectMembersInfo, null, options, request);
      }
      /// <summary>
      ///查询项目成员信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MemberListReply> QueryProjectMembersInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectMembersInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目成员信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.MemberListReply> QueryProjectMembersInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectMembersInfo, null, options, request);
      }
      /// <summary>
      ///查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageListReply QueryProjectStagesInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectStagesInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageListReply QueryProjectStagesInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectStagesInfo, null, options, request);
      }
      /// <summary>
      ///查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageListReply> QueryProjectStagesInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectStagesInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageListReply> QueryProjectStagesInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectStagesInfo, null, options, request);
      }
      /// <summary>
      ///多条件查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageInfoReply FilterProjectStageInfo(global::Proto.StageFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return FilterProjectStageInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///多条件查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageInfoReply FilterProjectStageInfo(global::Proto.StageFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FilterProjectStageInfo, null, options, request);
      }
      /// <summary>
      ///多条件查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageInfoReply> FilterProjectStageInfoAsync(global::Proto.StageFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return FilterProjectStageInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///多条件查询项目阶段信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageInfoReply> FilterProjectStageInfoAsync(global::Proto.StageFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FilterProjectStageInfo, null, options, request);
      }
      /// <summary>
      ///查询项目募资币种信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageCoinListReply QueryStageCoinInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryStageCoinInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目募资币种信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageCoinListReply QueryStageCoinInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryStageCoinInfo, null, options, request);
      }
      /// <summary>
      ///查询项目募资币种信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageCoinListReply> QueryStageCoinInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryStageCoinInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目募资币种信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageCoinListReply> QueryStageCoinInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryStageCoinInfo, null, options, request);
      }
      /// <summary>
      ///查询项目具体币种募集信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageCoinReply FilterStageCoinInfo(global::Proto.StageCoinFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return FilterStageCoinInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目具体币种募集信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.StageCoinReply FilterStageCoinInfo(global::Proto.StageCoinFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FilterStageCoinInfo, null, options, request);
      }
      /// <summary>
      ///查询项目具体币种募集信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageCoinReply> FilterStageCoinInfoAsync(global::Proto.StageCoinFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return FilterStageCoinInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目具体币种募集信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.StageCoinReply> FilterStageCoinInfoAsync(global::Proto.StageCoinFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FilterStageCoinInfo, null, options, request);
      }
      /// <summary>
      ///查询项目公告信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeInfoListReply QueryProjectNoticesByFilter(global::Proto.NoticeFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticesByFilter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目公告信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeInfoListReply QueryProjectNoticesByFilter(global::Proto.NoticeFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectNoticesByFilter, null, options, request);
      }
      /// <summary>
      ///查询项目公告信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeInfoListReply> QueryProjectNoticesByFilterAsync(global::Proto.NoticeFilterReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticesByFilterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目公告信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeInfoListReply> QueryProjectNoticesByFilterAsync(global::Proto.NoticeFilterReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectNoticesByFilter, null, options, request);
      }
      /// <summary>
      ///查询项目投票信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeVoteReply QueryProjectNoticeVoteInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticeVoteInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目投票信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeVoteReply QueryProjectNoticeVoteInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectNoticeVoteInfo, null, options, request);
      }
      /// <summary>
      ///查询项目投票信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeVoteReply> QueryProjectNoticeVoteInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticeVoteInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目投票信息 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeVoteReply> QueryProjectNoticeVoteInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectNoticeVoteInfo, null, options, request);
      }
      /// <summary>
      ///检查用户提案投票权限 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.BoolReply CheckUserCanVoteNotice(global::Proto.NoticeRightReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckUserCanVoteNotice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///检查用户提案投票权限 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.BoolReply CheckUserCanVoteNotice(global::Proto.NoticeRightReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckUserCanVoteNotice, null, options, request);
      }
      /// <summary>
      ///检查用户提案投票权限 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.BoolReply> CheckUserCanVoteNoticeAsync(global::Proto.NoticeRightReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckUserCanVoteNoticeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///检查用户提案投票权限 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.BoolReply> CheckUserCanVoteNoticeAsync(global::Proto.NoticeRightReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckUserCanVoteNotice, null, options, request);
      }
      /// <summary>
      ///用户提案投票 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty UserNoticeVote(global::Proto.UserVoteReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserNoticeVote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///用户提案投票 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.Empty UserNoticeVote(global::Proto.UserVoteReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserNoticeVote, null, options, request);
      }
      /// <summary>
      ///用户提案投票 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> UserNoticeVoteAsync(global::Proto.UserVoteReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserNoticeVoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///用户提案投票 - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.Empty> UserNoticeVoteAsync(global::Proto.UserVoteReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserNoticeVote, null, options, request);
      }
      /// <summary>
      ///参与项目ico - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.IcoInfoReply JoinProjectIco(global::Proto.IcoOrderReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JoinProjectIco(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///参与项目ico - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.IcoInfoReply JoinProjectIco(global::Proto.IcoOrderReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinProjectIco, null, options, request);
      }
      /// <summary>
      ///参与项目ico - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.IcoInfoReply> JoinProjectIcoAsync(global::Proto.IcoOrderReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return JoinProjectIcoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///参与项目ico - POST
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.IcoInfoReply> JoinProjectIcoAsync(global::Proto.IcoOrderReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinProjectIco, null, options, request);
      }
      /// <summary>
      ///查询用户是否通过Kyc审核 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.BoolReply CheckUserKycStatusInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckUserKycStatusInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户是否通过Kyc审核 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.BoolReply CheckUserKycStatusInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckUserKycStatusInfo, null, options, request);
      }
      /// <summary>
      ///查询用户是否通过Kyc审核 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.BoolReply> CheckUserKycStatusInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckUserKycStatusInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户是否通过Kyc审核 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.BoolReply> CheckUserKycStatusInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckUserKycStatusInfo, null, options, request);
      }
      /// <summary>
      ///查询推荐项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.RecommendProjectListReply QueryRecommendProjectsInfo(global::Proto.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryRecommendProjectsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询推荐项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.RecommendProjectListReply QueryRecommendProjectsInfo(global::Proto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryRecommendProjectsInfo, null, options, request);
      }
      /// <summary>
      ///查询推荐项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.RecommendProjectListReply> QueryRecommendProjectsInfoAsync(global::Proto.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryRecommendProjectsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询推荐项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.RecommendProjectListReply> QueryRecommendProjectsInfoAsync(global::Proto.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryRecommendProjectsInfo, null, options, request);
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.RecommendProjectListReply QueryUserJoinProjectsInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserJoinProjectsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.RecommendProjectListReply QueryUserJoinProjectsInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryUserJoinProjectsInfo, null, options, request);
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.RecommendProjectListReply> QueryUserJoinProjectsInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryUserJoinProjectsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询用户参与项目 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.RecommendProjectListReply> QueryUserJoinProjectsInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryUserJoinProjectsInfo, null, options, request);
      }
      /// <summary>
      ///查询项目详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectDetailsReply QueryProjectDetailsInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectDetailsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectDetailsReply QueryProjectDetailsInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectDetailsInfo, null, options, request);
      }
      /// <summary>
      ///查询项目详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectDetailsReply> QueryProjectDetailsInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectDetailsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectDetailsReply> QueryProjectDetailsInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectDetailsInfo, null, options, request);
      }
      /// <summary>
      ///查询募集细则 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.RaiseRuleReply QueryRaiseInvestmentDetailsInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryRaiseInvestmentDetailsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询募集细则 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.RaiseRuleReply QueryRaiseInvestmentDetailsInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryRaiseInvestmentDetailsInfo, null, options, request);
      }
      /// <summary>
      ///查询募集细则 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.RaiseRuleReply> QueryRaiseInvestmentDetailsInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryRaiseInvestmentDetailsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询募集细则 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.RaiseRuleReply> QueryRaiseInvestmentDetailsInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryRaiseInvestmentDetailsInfo, null, options, request);
      }
      /// <summary>
      ///查询项目公告列表 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectNoticeListReply QueryProjectNoticesInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticesInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目公告列表 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.ProjectNoticeListReply QueryProjectNoticesInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectNoticesInfo, null, options, request);
      }
      /// <summary>
      ///查询项目公告列表 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectNoticeListReply> QueryProjectNoticesInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticesInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询项目公告列表 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.ProjectNoticeListReply> QueryProjectNoticesInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectNoticesInfo, null, options, request);
      }
      /// <summary>
      ///查询公告详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeNewsReply QueryProjectNoticeNewsDetailsInfo(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticeNewsDetailsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询公告详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeNewsReply QueryProjectNoticeNewsDetailsInfo(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryProjectNoticeNewsDetailsInfo, null, options, request);
      }
      /// <summary>
      ///查询公告详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeNewsReply> QueryProjectNoticeNewsDetailsInfoAsync(global::Proto.IdReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryProjectNoticeNewsDetailsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询公告详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeNewsReply> QueryProjectNoticeNewsDetailsInfoAsync(global::Proto.IdReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryProjectNoticeNewsDetailsInfo, null, options, request);
      }
      /// <summary>
      ///查询投票详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeVoteDetailReply QueryNoticeVoteDetailsInfo(global::Proto.NoticeRightReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryNoticeVoteDetailsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询投票详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Proto.NoticeVoteDetailReply QueryNoticeVoteDetailsInfo(global::Proto.NoticeRightReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryNoticeVoteDetailsInfo, null, options, request);
      }
      /// <summary>
      ///查询投票详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeVoteDetailReply> QueryNoticeVoteDetailsInfoAsync(global::Proto.NoticeRightReq request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryNoticeVoteDetailsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///查询投票详情 - GET
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Proto.NoticeVoteDetailReply> QueryNoticeVoteDetailsInfoAsync(global::Proto.NoticeRightReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryNoticeVoteDetailsInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProjectServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProjectServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProjectServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_QueryProjectById, serviceImpl.QueryProjectById)
          .AddMethod(__Method_QueryUserParticipationProject, serviceImpl.QueryUserParticipationProject)
          .AddMethod(__Method_QueryProjectPhotosInfo, serviceImpl.QueryProjectPhotosInfo)
          .AddMethod(__Method_QueryProjectVideosInfo, serviceImpl.QueryProjectVideosInfo)
          .AddMethod(__Method_QueryProjectDescriptionInfo, serviceImpl.QueryProjectDescriptionInfo)
          .AddMethod(__Method_QueryProjectCertificationInfo, serviceImpl.QueryProjectCertificationInfo)
          .AddMethod(__Method_QueryProjectMembersInfo, serviceImpl.QueryProjectMembersInfo)
          .AddMethod(__Method_QueryProjectStagesInfo, serviceImpl.QueryProjectStagesInfo)
          .AddMethod(__Method_FilterProjectStageInfo, serviceImpl.FilterProjectStageInfo)
          .AddMethod(__Method_QueryStageCoinInfo, serviceImpl.QueryStageCoinInfo)
          .AddMethod(__Method_FilterStageCoinInfo, serviceImpl.FilterStageCoinInfo)
          .AddMethod(__Method_QueryProjectNoticesByFilter, serviceImpl.QueryProjectNoticesByFilter)
          .AddMethod(__Method_QueryProjectNoticeVoteInfo, serviceImpl.QueryProjectNoticeVoteInfo)
          .AddMethod(__Method_CheckUserCanVoteNotice, serviceImpl.CheckUserCanVoteNotice)
          .AddMethod(__Method_UserNoticeVote, serviceImpl.UserNoticeVote)
          .AddMethod(__Method_JoinProjectIco, serviceImpl.JoinProjectIco)
          .AddMethod(__Method_CheckUserKycStatusInfo, serviceImpl.CheckUserKycStatusInfo)
          .AddMethod(__Method_QueryRecommendProjectsInfo, serviceImpl.QueryRecommendProjectsInfo)
          .AddMethod(__Method_QueryUserJoinProjectsInfo, serviceImpl.QueryUserJoinProjectsInfo)
          .AddMethod(__Method_QueryProjectDetailsInfo, serviceImpl.QueryProjectDetailsInfo)
          .AddMethod(__Method_QueryRaiseInvestmentDetailsInfo, serviceImpl.QueryRaiseInvestmentDetailsInfo)
          .AddMethod(__Method_QueryProjectNoticesInfo, serviceImpl.QueryProjectNoticesInfo)
          .AddMethod(__Method_QueryProjectNoticeNewsDetailsInfo, serviceImpl.QueryProjectNoticeNewsDetailsInfo)
          .AddMethod(__Method_QueryNoticeVoteDetailsInfo, serviceImpl.QueryNoticeVoteDetailsInfo).Build();
    }

  }
}
#endregion
