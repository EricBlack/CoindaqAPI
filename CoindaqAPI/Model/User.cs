// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from user.proto</summary>
  public static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for user.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp1c2VyLnByb3RvEgVwcm90bxoMY29tbW9uLnByb3RvGhB0d29fZmFjdG9y",
            "LnByb3RvIqYBCgtSZWdpc3RlclJlcRINCgVlbWFpbBgBIAEoCRIQCghwYXNz",
            "d29yZBgCIAEoCRITCgtjb3VudHJ5Q29kZRgDIAEoCRITCgtkaXNwbGF5TmFt",
            "ZRgEIAEoCRISCgplbmFibGVDb2RlGAUgASgIEhIKCmludml0ZUNvZGUYBiAB",
            "KAkSEgoKcmVnaXN0ZXJJcBgHIAEoCRIQCghkZXZpY2VJZBgIIAEoCSJNCgdB",
            "dXRoUmVxEg0KBWVtYWlsGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJEg8KB2xv",
            "Z2luSXAYAyABKAkSEAoIZGV2aWNlSWQYBCABKAkiWAoPUmVjb3JkRmlsdGVy",
            "UmVxEg4KBnVzZXJJZBgBIAEoAxIiCgZzdGF0dXMYAiABKA4yEi5wcm90by5M",
            "b2dpblN0YXR1cxIRCglsb2dpblRpbWUYAyABKAkiGAoHVXNlclJlcRINCgV0",
            "b2tlbhgBIAEoCSItCgtBY3RpdmF0ZVJlcRIOCgZ1c2VySWQYASABKAMSDgoG",
            "c2VjcmV0GAIgASgJIh8KDkZvcmdldEVtYWlsUmVxEg0KBWVtYWlsGAEgASgJ",
            "Ii4KDkZvcmdldFBob25lUmVxEg0KBWVtYWlsGAEgASgJEg0KBXBob25lGAIg",
            "ASgJIjMKEU1vZGlmeVBhc3N3b3JkUmVxEgwKBGNvZGUYAiABKAkSEAoIcGFz",
            "c3dvcmQYAyABKAkiSQoRVXBkYXRlUGFzc3dvcmRSZXESCgoCaWQYASABKAMS",
            "EwoLb2xkUGFzc3dvcmQYAiABKAkSEwoLbmV3UGFzc3dvcmQYAyABKAki4gIK",
            "DU1vZGlmeVVzZXJSZXESCgoCaWQYASABKAMSEwoLZGlzcGxheU5hbWUYAiAB",
            "KAkSEwoLY291bnRyeUNvZGUYAyABKAkSEAoIcmVhbE5hbWUYBCABKAkSEgoK",
            "aWRlbnRpdHlJZBgFIAEoCRI2CglreWNQaG90b3MYBiADKAsyIy5wcm90by5N",
            "b2RpZnlVc2VyUmVxLkt5Y1Bob3Rvc0VudHJ5EjYKCWt5Y1ZlZGlvcxgHIAMo",
            "CzIjLnByb3RvLk1vZGlmeVVzZXJSZXEuS3ljVmVkaW9zRW50cnkSIQoIa3lj",
            "U3RhZ2UYCCABKA4yDy5wcm90by5LeWNTdGFnZRowCg5LeWNQaG90b3NFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjAKDkt5Y1ZlZGlv",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEi2wIKDFF1",
            "ZXJ5VXNlclJlcRIKCgJpZBgBIAEoAxINCgVlbWFpbBgCIAEoCRITCgtkaXNw",
            "bGF5TmFtZRgDIAEoCRITCgtwaG9uZU51bWJlchgEIAEoCRIdCgRraW5kGAUg",
            "ASgOMg8ucHJvdG8uVXNlcktpbmQSIwoJYWN0aXZhdGVkGAYgASgOMhAucHJv",
            "dG8uQm9vbFZhbHVlEhMKC2NvdW50cnlDb2RlGAcgASgJEhAKCHJlYWxOYW1l",
            "GAggASgJEiIKCGRpc2FibGVkGAkgASgOMhAucHJvdG8uQm9vbFZhbHVlEikK",
            "DGlkZW50aXR5VHlwZRgKIAEoDjITLnByb3RvLklkZW50aXR5VHlwZRISCgpp",
            "ZGVudGl0eUlkGAsgASgJEhIKCnBob3RvRnJvbnQYDCABKAkSEQoJcGhvdG9C",
            "YWNrGA0gASgJEhEKCXBob3RvSGFuZBgOIAEoCSJ7ChBSZWNvcmRNZXNzYWdl",
            "UmVxEhMKC2Rlc3RpbmF0aW9uGAEgASgJEg8KB21lc3NhZ2UYAiABKAkSKQoL",
            "c2VuZF9zdGF0dXMYAyABKA4yFC5wcm90by5Nc2dTZW5kU3RhdHVzEhYKDnJl",
            "dHVybl9tZXNzYWdlGAQgASgJIi8KDlNlbmRNZXNzYWdlUmVxEg4KBnVzZXJJ",
            "ZBgBIAEoAxINCgVwaG9uZRgCIAEoCSI3CgxCaW5kUGhvbmVSZXESCgoCaWQY",
            "ASABKAMSDQoFcGhvbmUYAiABKAkSDAoEY29kZRgDIAEoCSI2ChJQYXltZW50",
            "UGFzc3dvcmRSZXESDgoGdXNlcklkGAEgASgDEhAKCHBhc3N3b3JkGAIgASgJ",
            "IqYDCglVc2VyUmVwbHkSCgoCaWQYASABKAMSDQoFZW1haWwYAiABKAkSEwoL",
            "ZGlzcGxheU5hbWUYAyABKAkSEwoLcGhvbmVOdW1iZXIYBCABKAkSHQoEa2lu",
            "ZBgFIAEoDjIPLnByb3RvLlVzZXJLaW5kEiMKCWFjdGl2YXRlZBgGIAEoDjIQ",
            "LnByb3RvLkJvb2xWYWx1ZRITCgtjb3VudHJ5Q29kZRgHIAEoCRIQCghyZWFs",
            "TmFtZRgIIAEoCRIiCghkaXNhYmxlZBgJIAEoDjIQLnByb3RvLkJvb2xWYWx1",
            "ZRIpCgxpZGVudGl0eVR5cGUYCiABKA4yEy5wcm90by5JZGVudGl0eVR5cGUS",
            "EgoKaWRlbnRpdHlJZBgLIAEoCRISCgpwaG90b0Zyb250GAwgASgJEhEKCXBo",
            "b3RvQmFjaxgNIAEoCRIRCglwaG90b0hhbmQYDiABKAkSEgoKaW52aXRlQ29k",
            "ZRgPIAEoCRIQCghyZWdpc3RJcBgQIAEoCRIQCghkZXZpY2VJZBgRIAEoCRIU",
            "Cgxnb29nbGVJc0JpbmQYEiABKAUiPwoLRm9yZ2V0UmVwbHkSCgoCaWQYASAB",
            "KAMSEwoLaW5mb3JtYXRpb24YAiABKAkSDwoHc2VjcmVjdBgDIAEoCSItCg5V",
            "cGRhdGVQd2RSZXBseRIKCgJpZBgBIAEoAxIPCgdtZXNzYWdlGAIgASgJIjAK",
            "DVVzZXJMaXN0UmVwbHkSHwoFdXNlcnMYASADKAsyEC5wcm90by5Vc2VyUmVw",
            "bHkiUwoQSW52aXRlckluZm9SZXBseRIKCgJpZBgBIAEoAxIOCgZ1c2VySWQY",
            "AiABKAMSEQoJaW52aXRlcklkGAMgASgDEhAKCGNyZWF0ZUF0GAQgASgJIv0B",
            "Cg9Vc2VyU3RhdHVzUmVwbHkSJQoLaXNQaG9uZUJpbmQYASABKA4yEC5wcm90",
            "by5Cb29sVmFsdWUSJgoMaXNHb29nbGVCaW5kGAIgASgOMhAucHJvdG8uQm9v",
            "bFZhbHVlEiUKC2lzQWN0aXZhdGVkGAMgASgOMhAucHJvdG8uQm9vbFZhbHVl",
            "EiQKCmlzRGlzYWJsZWQYBCABKA4yEC5wcm90by5Cb29sVmFsdWUSJwoNaXNQ",
            "YXlQYXNzd29yZBgFIAEoDjIQLnByb3RvLkJvb2xWYWx1ZRIlCgtpc0t5Y1Bh",
            "c3NlZBgGIAEoDjIQLnByb3RvLkJvb2xWYWx1ZSKeAQoQTG9naW5SZWNvcmRS",
            "ZXBseRIKCgJpZBgBIAEoAxIOCgZ1c2VySWQYAiABKAMSDwoHbG9naW5JcBgD",
            "IAEoCRIQCghkZXZpY2VJZBgEIAEoCRIiCgZzdGF0dXMYBSABKA4yEi5wcm90",
            "by5Mb2dpblN0YXR1cxIUCgxsb2dpbkNvbW1lbnQYBiABKAkSEQoJbG9naW5U",
            "aW1lGAcgASgJIkMKFExvZ2luUmVjb3JkTGlzdFJlcGx5EisKCnJlY29yZExp",
            "c3QYASADKAsyFy5wcm90by5Mb2dpblJlY29yZFJlcGx5IiIKEU1lc3NhZ2VD",
            "b3VudFJlcGx5Eg0KBWNvdW50GAEgASgFIjMKEUdvb2dsZVFSQ29kZVJlbHB5",
            "EhAKCGltYWdlVXJsGAEgASgJEgwKBGNvZGUYAiABKAkqPAoLTG9naW5TdGF0",
            "dXMSCwoHTE5vdFNldBAAEg8KC0xvZ2luUGFzc2VkEAESDwoLTG9naW5GYWls",
            "ZWQQAio1Cg1Nc2dTZW5kU3RhdHVzEgsKB01Ob3RTZXQQABILCgdTdWNjZXNz",
            "EAESCgoGRmFpbGVkEAIywwwKC1VzZXJTZXJ2aWNlEjAKBlNpZ251cBISLnBy",
            "b3RvLlJlZ2lzdGVyUmVxGhAucHJvdG8uVXNlclJlcGx5IgASLAoGU2lnbmlu",
            "Eg4ucHJvdG8uQXV0aFJlcRoQLnByb3RvLlVzZXJSZXBseSIAEkIKD0NoZWNr",
            "VXNlclN0YXR1cxIVLnByb3RvLkZvcmdldEVtYWlsUmVxGhYucHJvdG8uVXNl",
            "clN0YXR1c1JlcGx5IgASNQoPVmVyaWZ5VXNlclRva2VuEg4ucHJvdG8uVXNl",
            "clJlcRoQLnByb3RvLlVzZXJSZXBseSIAEkoKEVF1ZXJ5TG9naW5SZWNvcmRz",
            "EhYucHJvdG8uUmVjb3JkRmlsdGVyUmVxGhsucHJvdG8uTG9naW5SZWNvcmRM",
            "aXN0UmVwbHkiABImCgZMb2dvdXQSDC5wcm90by5JZFJlcRoMLnByb3RvLkVt",
            "cHR5IgASPgoPQWN0aXZhdGVOZXdVc2VyEhUucHJvdG8uRm9yZ2V0RW1haWxS",
            "ZXEaEi5wcm90by5GYWN0b3JSZXBseSIAEjcKEUFjdGl2YXRlRW1haWxVc2Vy",
            "EhIucHJvdG8uQWN0aXZhdGVSZXEaDC5wcm90by5FbXB0eSIAEkUKFkZvcmdl",
            "dFBhc3N3b3JkVmlhRW1haWwSFS5wcm90by5Gb3JnZXRFbWFpbFJlcRoSLnBy",
            "b3RvLkZvcmdldFJlcGx5IgASRQoWRm9yZ2V0UGFzc3dvcmRWaWFQaG9uZRIV",
            "LnByb3RvLkZvcmdldFBob25lUmVxGhIucHJvdG8uRm9yZ2V0UmVwbHkiABI8",
            "ChFSZWNvcmRNZXNzYWdlSW5mbxIXLnByb3RvLlJlY29yZE1lc3NhZ2VSZXEa",
            "DC5wcm90by5FbXB0eSIAEkIKDU1lc3NhZ2VJbkhvdXISFS5wcm90by5Gb3Jn",
            "ZXRQaG9uZVJlcRoYLnByb3RvLk1lc3NhZ2VDb3VudFJlcGx5IgASOQoNUmVz",
            "ZXRQYXNzd29yZBIYLnByb3RvLk1vZGlmeVBhc3N3b3JkUmVxGgwucHJvdG8u",
            "RW1wdHkiABI6Cg5VcGRhdGVQYXNzd29yZBIYLnByb3RvLlVwZGF0ZVBhc3N3",
            "b3JkUmVxGgwucHJvdG8uRW1wdHkiABI2Cg5VcGRhdGVVc2VySW5mbxIULnBy",
            "b3RvLk1vZGlmeVVzZXJSZXEaDC5wcm90by5FbXB0eSIAEj4KD1NlbmRCaW5k",
            "TWVzc2FnZRIVLnByb3RvLlNlbmRNZXNzYWdlUmVxGhIucHJvdG8uRmFjdG9y",
            "UmVwbHkiABI0Cg1CaW5kVXNlclBob25lEhMucHJvdG8uQmluZFBob25lUmVx",
            "GgwucHJvdG8uRW1wdHkiABIxCg1RdWVyeVVzZXJCeUlkEgwucHJvdG8uSWRS",
            "ZXEaEC5wcm90by5Vc2VyUmVwbHkiABI5CgpRdWVyeVVzZXJzEhMucHJvdG8u",
            "UXVlcnlVc2VyUmVxGhQucHJvdG8uVXNlckxpc3RSZXBseSIAEkQKHFF1ZXJ5",
            "SW52aXRlZFVzZXJzQnlJbnZpdG9ySWQSDC5wcm90by5JZFJlcRoULnByb3Rv",
            "LlVzZXJMaXN0UmVwbHkiABI/ChRRdWVyeUludml0b3JJbmZvQnlJZBIMLnBy",
            "b3RvLklkUmVxGhcucHJvdG8uSW52aXRlckluZm9SZXBseSIAEkIKFVVwZGF0",
            "ZVBheW1lbnRQYXNzd29yZBIZLnByb3RvLlBheW1lbnRQYXNzd29yZFJlcRoM",
            "LnByb3RvLkVtcHR5IgASRgoVVmVyaWZ5UGF5bWVudFBhc3N3b3JkEhkucHJv",
            "dG8uUGF5bWVudFBhc3N3b3JkUmVxGhAucHJvdG8uQm9vbFJlcGx5IgASPAoY",
            "VmVyaWZ5RmluYW5jaWFsT3BlcmF0aW9uEgwucHJvdG8uSWRSZXEaEC5wcm90",
            "by5Cb29sUmVwbHkiABJAChRCaW5kVXNlckdvb2dsZUZhY3RvchIMLnByb3Rv",
            "LklkUmVxGhgucHJvdG8uR29vZ2xlUVJDb2RlUmVscHkiABI2ChZSZW1vdmVC",
            "aW5kR29vZ2xlRmFjdG9yEgwucHJvdG8uSWRSZXEaDC5wcm90by5FbXB0eSIA",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.CommonReflection.Descriptor, global::Proto.TwoFactorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.LoginStatus), typeof(global::Proto.MsgSendStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RegisterReq), global::Proto.RegisterReq.Parser, new[]{ "Email", "Password", "CountryCode", "DisplayName", "EnableCode", "InviteCode", "RegisterIp", "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.AuthReq), global::Proto.AuthReq.Parser, new[]{ "Email", "Password", "LoginIp", "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RecordFilterReq), global::Proto.RecordFilterReq.Parser, new[]{ "UserId", "Status", "LoginTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserReq), global::Proto.UserReq.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ActivateReq), global::Proto.ActivateReq.Parser, new[]{ "UserId", "Secret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ForgetEmailReq), global::Proto.ForgetEmailReq.Parser, new[]{ "Email" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ForgetPhoneReq), global::Proto.ForgetPhoneReq.Parser, new[]{ "Email", "Phone" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ModifyPasswordReq), global::Proto.ModifyPasswordReq.Parser, new[]{ "Code", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UpdatePasswordReq), global::Proto.UpdatePasswordReq.Parser, new[]{ "Id", "OldPassword", "NewPassword" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ModifyUserReq), global::Proto.ModifyUserReq.Parser, new[]{ "Id", "DisplayName", "CountryCode", "RealName", "IdentityId", "KycPhotos", "KycVedios", "KycStage" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.QueryUserReq), global::Proto.QueryUserReq.Parser, new[]{ "Id", "Email", "DisplayName", "PhoneNumber", "Kind", "Activated", "CountryCode", "RealName", "Disabled", "IdentityType", "IdentityId", "PhotoFront", "PhotoBack", "PhotoHand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.RecordMessageReq), global::Proto.RecordMessageReq.Parser, new[]{ "Destination", "Message", "SendStatus", "ReturnMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.SendMessageReq), global::Proto.SendMessageReq.Parser, new[]{ "UserId", "Phone" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.BindPhoneReq), global::Proto.BindPhoneReq.Parser, new[]{ "Id", "Phone", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PaymentPasswordReq), global::Proto.PaymentPasswordReq.Parser, new[]{ "UserId", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserReply), global::Proto.UserReply.Parser, new[]{ "Id", "Email", "DisplayName", "PhoneNumber", "Kind", "Activated", "CountryCode", "RealName", "Disabled", "IdentityType", "IdentityId", "PhotoFront", "PhotoBack", "PhotoHand", "InviteCode", "RegistIp", "DeviceId", "GoogleIsBind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ForgetReply), global::Proto.ForgetReply.Parser, new[]{ "Id", "Information", "Secrect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UpdatePwdReply), global::Proto.UpdatePwdReply.Parser, new[]{ "Id", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserListReply), global::Proto.UserListReply.Parser, new[]{ "Users" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.InviterInfoReply), global::Proto.InviterInfoReply.Parser, new[]{ "Id", "UserId", "InviterId", "CreateAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.UserStatusReply), global::Proto.UserStatusReply.Parser, new[]{ "IsPhoneBind", "IsGoogleBind", "IsActivated", "IsDisabled", "IsPayPassword", "IsKycPassed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.LoginRecordReply), global::Proto.LoginRecordReply.Parser, new[]{ "Id", "UserId", "LoginIp", "DeviceId", "Status", "LoginComment", "LoginTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.LoginRecordListReply), global::Proto.LoginRecordListReply.Parser, new[]{ "RecordList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MessageCountReply), global::Proto.MessageCountReply.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.GoogleQRCodeRelpy), global::Proto.GoogleQRCodeRelpy.Parser, new[]{ "ImageUrl", "Code" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// Login Status
  /// </summary>
  public enum LoginStatus {
    [pbr::OriginalName("LNotSet")] LnotSet = 0,
    /// <summary>
    ///登录成功
    /// </summary>
    [pbr::OriginalName("LoginPassed")] LoginPassed = 1,
    /// <summary>
    ///登录失败
    /// </summary>
    [pbr::OriginalName("LoginFailed")] LoginFailed = 2,
  }

  /// <summary>
  ///*
  /// Message Status
  /// </summary>
  public enum MsgSendStatus {
    [pbr::OriginalName("MNotSet")] MnotSet = 0,
    /// <summary>
    ///短信发送成功
    /// </summary>
    [pbr::OriginalName("Success")] Success = 1,
    /// <summary>
    ///短信发送失败
    /// </summary>
    [pbr::OriginalName("Failed")] Failed = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///Register
  /// </summary>
  public sealed partial class RegisterReq : pb::IMessage<RegisterReq> {
    private static readonly pb::MessageParser<RegisterReq> _parser = new pb::MessageParser<RegisterReq>(() => new RegisterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterReq(RegisterReq other) : this() {
      email_ = other.email_;
      password_ = other.password_;
      countryCode_ = other.countryCode_;
      displayName_ = other.displayName_;
      enableCode_ = other.enableCode_;
      inviteCode_ = other.inviteCode_;
      registerIp_ = other.registerIp_;
      deviceId_ = other.deviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterReq Clone() {
      return new RegisterReq(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    ///邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 3;
    private string countryCode_ = "";
    /// <summary>
    ///国家代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 4;
    private string displayName_ = "";
    /// <summary>
    ///显示名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enableCode" field.</summary>
    public const int EnableCodeFieldNumber = 5;
    private bool enableCode_;
    /// <summary>
    ///是否需要激活码注册
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableCode {
      get { return enableCode_; }
      set {
        enableCode_ = value;
      }
    }

    /// <summary>Field number for the "inviteCode" field.</summary>
    public const int InviteCodeFieldNumber = 6;
    private string inviteCode_ = "";
    /// <summary>
    ///邀请码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InviteCode {
      get { return inviteCode_; }
      set {
        inviteCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "registerIp" field.</summary>
    public const int RegisterIpFieldNumber = 7;
    private string registerIp_ = "";
    /// <summary>
    ///注册Ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegisterIp {
      get { return registerIp_; }
      set {
        registerIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 8;
    private string deviceId_ = "";
    /// <summary>
    ///注册设备Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (CountryCode != other.CountryCode) return false;
      if (DisplayName != other.DisplayName) return false;
      if (EnableCode != other.EnableCode) return false;
      if (InviteCode != other.InviteCode) return false;
      if (RegisterIp != other.RegisterIp) return false;
      if (DeviceId != other.DeviceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (EnableCode != false) hash ^= EnableCode.GetHashCode();
      if (InviteCode.Length != 0) hash ^= InviteCode.GetHashCode();
      if (RegisterIp.Length != 0) hash ^= RegisterIp.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CountryCode);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DisplayName);
      }
      if (EnableCode != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableCode);
      }
      if (InviteCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(InviteCode);
      }
      if (RegisterIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RegisterIp);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (EnableCode != false) {
        size += 1 + 1;
      }
      if (InviteCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InviteCode);
      }
      if (RegisterIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegisterIp);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterReq other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.EnableCode != false) {
        EnableCode = other.EnableCode;
      }
      if (other.InviteCode.Length != 0) {
        InviteCode = other.InviteCode;
      }
      if (other.RegisterIp.Length != 0) {
        RegisterIp = other.RegisterIp;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            CountryCode = input.ReadString();
            break;
          }
          case 34: {
            DisplayName = input.ReadString();
            break;
          }
          case 40: {
            EnableCode = input.ReadBool();
            break;
          }
          case 50: {
            InviteCode = input.ReadString();
            break;
          }
          case 58: {
            RegisterIp = input.ReadString();
            break;
          }
          case 66: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Login
  /// </summary>
  public sealed partial class AuthReq : pb::IMessage<AuthReq> {
    private static readonly pb::MessageParser<AuthReq> _parser = new pb::MessageParser<AuthReq>(() => new AuthReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq(AuthReq other) : this() {
      email_ = other.email_;
      password_ = other.password_;
      loginIp_ = other.loginIp_;
      deviceId_ = other.deviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq Clone() {
      return new AuthReq(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    ///邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginIp" field.</summary>
    public const int LoginIpFieldNumber = 3;
    private string loginIp_ = "";
    /// <summary>
    ///登录Ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginIp {
      get { return loginIp_; }
      set {
        loginIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 4;
    private string deviceId_ = "";
    /// <summary>
    ///登录设备Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (LoginIp != other.LoginIp) return false;
      if (DeviceId != other.DeviceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (LoginIp.Length != 0) hash ^= LoginIp.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (LoginIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LoginIp);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (LoginIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginIp);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthReq other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.LoginIp.Length != 0) {
        LoginIp = other.LoginIp;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            LoginIp = input.ReadString();
            break;
          }
          case 34: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Login record filter
  /// </summary>
  public sealed partial class RecordFilterReq : pb::IMessage<RecordFilterReq> {
    private static readonly pb::MessageParser<RecordFilterReq> _parser = new pb::MessageParser<RecordFilterReq>(() => new RecordFilterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordFilterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFilterReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFilterReq(RecordFilterReq other) : this() {
      userId_ = other.userId_;
      status_ = other.status_;
      loginTime_ = other.loginTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFilterReq Clone() {
      return new RecordFilterReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Proto.LoginStatus status_ = 0;
    /// <summary>
    ///登录状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.LoginStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "loginTime" field.</summary>
    public const int LoginTimeFieldNumber = 3;
    private string loginTime_ = "";
    /// <summary>
    ///登录时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginTime {
      get { return loginTime_; }
      set {
        loginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordFilterReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordFilterReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Status != other.Status) return false;
      if (LoginTime != other.LoginTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LoginTime.Length != 0) hash ^= LoginTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (LoginTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LoginTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (LoginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordFilterReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LoginTime.Length != 0) {
        LoginTime = other.LoginTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            status_ = (global::Proto.LoginStatus) input.ReadEnum();
            break;
          }
          case 26: {
            LoginTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Logout
  /// </summary>
  public sealed partial class UserReq : pb::IMessage<UserReq> {
    private static readonly pb::MessageParser<UserReq> _parser = new pb::MessageParser<UserReq>(() => new UserReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserReq(UserReq other) : this() {
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserReq Clone() {
      return new UserReq(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    ///Token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserReq other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Activate User
  /// </summary>
  public sealed partial class ActivateReq : pb::IMessage<ActivateReq> {
    private static readonly pb::MessageParser<ActivateReq> _parser = new pb::MessageParser<ActivateReq>(() => new ActivateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateReq(ActivateReq other) : this() {
      userId_ = other.userId_;
      secret_ = other.secret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateReq Clone() {
      return new ActivateReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 2;
    private string secret_ = "";
    /// <summary>
    ///验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Secret != other.Secret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Secret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Secret = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Forget Password via Email or Phone
  /// </summary>
  public sealed partial class ForgetEmailReq : pb::IMessage<ForgetEmailReq> {
    private static readonly pb::MessageParser<ForgetEmailReq> _parser = new pb::MessageParser<ForgetEmailReq>(() => new ForgetEmailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForgetEmailReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetEmailReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetEmailReq(ForgetEmailReq other) : this() {
      email_ = other.email_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetEmailReq Clone() {
      return new ForgetEmailReq(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    ///邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForgetEmailReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForgetEmailReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForgetEmailReq other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForgetPhoneReq : pb::IMessage<ForgetPhoneReq> {
    private static readonly pb::MessageParser<ForgetPhoneReq> _parser = new pb::MessageParser<ForgetPhoneReq>(() => new ForgetPhoneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForgetPhoneReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPhoneReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPhoneReq(ForgetPhoneReq other) : this() {
      email_ = other.email_;
      phone_ = other.phone_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetPhoneReq Clone() {
      return new ForgetPhoneReq(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    ///邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 2;
    private string phone_ = "";
    /// <summary>
    ///手机号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForgetPhoneReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForgetPhoneReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Phone != other.Phone) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Phone);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForgetPhoneReq other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Phone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Modify Password
  /// </summary>
  public sealed partial class ModifyPasswordReq : pb::IMessage<ModifyPasswordReq> {
    private static readonly pb::MessageParser<ModifyPasswordReq> _parser = new pb::MessageParser<ModifyPasswordReq>(() => new ModifyPasswordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyPasswordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyPasswordReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyPasswordReq(ModifyPasswordReq other) : this() {
      code_ = other.code_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyPasswordReq Clone() {
      return new ModifyPasswordReq(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    /// <summary>
    ///验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    /// <summary>
    ///新密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyPasswordReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyPasswordReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyPasswordReq other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Update Password
  /// </summary>
  public sealed partial class UpdatePasswordReq : pb::IMessage<UpdatePasswordReq> {
    private static readonly pb::MessageParser<UpdatePasswordReq> _parser = new pb::MessageParser<UpdatePasswordReq>(() => new UpdatePasswordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePasswordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePasswordReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePasswordReq(UpdatePasswordReq other) : this() {
      id_ = other.id_;
      oldPassword_ = other.oldPassword_;
      newPassword_ = other.newPassword_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePasswordReq Clone() {
      return new UpdatePasswordReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "oldPassword" field.</summary>
    public const int OldPasswordFieldNumber = 2;
    private string oldPassword_ = "";
    /// <summary>
    ///旧密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OldPassword {
      get { return oldPassword_; }
      set {
        oldPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newPassword" field.</summary>
    public const int NewPasswordFieldNumber = 3;
    private string newPassword_ = "";
    /// <summary>
    ///新密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewPassword {
      get { return newPassword_; }
      set {
        newPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePasswordReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePasswordReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OldPassword != other.OldPassword) return false;
      if (NewPassword != other.NewPassword) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (OldPassword.Length != 0) hash ^= OldPassword.GetHashCode();
      if (NewPassword.Length != 0) hash ^= NewPassword.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (OldPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OldPassword);
      }
      if (NewPassword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NewPassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (OldPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldPassword);
      }
      if (NewPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewPassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePasswordReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.OldPassword.Length != 0) {
        OldPassword = other.OldPassword;
      }
      if (other.NewPassword.Length != 0) {
        NewPassword = other.NewPassword;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            OldPassword = input.ReadString();
            break;
          }
          case 26: {
            NewPassword = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Update User info
  /// </summary>
  public sealed partial class ModifyUserReq : pb::IMessage<ModifyUserReq> {
    private static readonly pb::MessageParser<ModifyUserReq> _parser = new pb::MessageParser<ModifyUserReq>(() => new ModifyUserReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyUserReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyUserReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyUserReq(ModifyUserReq other) : this() {
      id_ = other.id_;
      displayName_ = other.displayName_;
      countryCode_ = other.countryCode_;
      realName_ = other.realName_;
      identityId_ = other.identityId_;
      kycPhotos_ = other.kycPhotos_.Clone();
      kycVedios_ = other.kycVedios_.Clone();
      kycStage_ = other.kycStage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyUserReq Clone() {
      return new ModifyUserReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    ///显示姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 3;
    private string countryCode_ = "";
    /// <summary>
    ///国家代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "realName" field.</summary>
    public const int RealNameFieldNumber = 4;
    private string realName_ = "";
    /// <summary>
    ///真实姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identityId" field.</summary>
    public const int IdentityIdFieldNumber = 5;
    private string identityId_ = "";
    /// <summary>
    ///身份证Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityId {
      get { return identityId_; }
      set {
        identityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kycPhotos" field.</summary>
    public const int KycPhotosFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_kycPhotos_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> kycPhotos_ = new pbc::MapField<string, string>();
    /// <summary>
    ///认证图片信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> KycPhotos {
      get { return kycPhotos_; }
    }

    /// <summary>Field number for the "kycVedios" field.</summary>
    public const int KycVediosFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_kycVedios_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> kycVedios_ = new pbc::MapField<string, string>();
    /// <summary>
    ///认证视频信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> KycVedios {
      get { return kycVedios_; }
    }

    /// <summary>Field number for the "kycStage" field.</summary>
    public const int KycStageFieldNumber = 8;
    private global::Proto.KycStage kycStage_ = 0;
    /// <summary>
    ///认证阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.KycStage KycStage {
      get { return kycStage_; }
      set {
        kycStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyUserReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyUserReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DisplayName != other.DisplayName) return false;
      if (CountryCode != other.CountryCode) return false;
      if (RealName != other.RealName) return false;
      if (IdentityId != other.IdentityId) return false;
      if (!KycPhotos.Equals(other.KycPhotos)) return false;
      if (!KycVedios.Equals(other.KycVedios)) return false;
      if (KycStage != other.KycStage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (IdentityId.Length != 0) hash ^= IdentityId.GetHashCode();
      hash ^= KycPhotos.GetHashCode();
      hash ^= KycVedios.GetHashCode();
      if (KycStage != 0) hash ^= KycStage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CountryCode);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RealName);
      }
      if (IdentityId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IdentityId);
      }
      kycPhotos_.WriteTo(output, _map_kycPhotos_codec);
      kycVedios_.WriteTo(output, _map_kycVedios_codec);
      if (KycStage != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) KycStage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (IdentityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityId);
      }
      size += kycPhotos_.CalculateSize(_map_kycPhotos_codec);
      size += kycVedios_.CalculateSize(_map_kycVedios_codec);
      if (KycStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KycStage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyUserReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.IdentityId.Length != 0) {
        IdentityId = other.IdentityId;
      }
      kycPhotos_.Add(other.kycPhotos_);
      kycVedios_.Add(other.kycVedios_);
      if (other.KycStage != 0) {
        KycStage = other.KycStage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            CountryCode = input.ReadString();
            break;
          }
          case 34: {
            RealName = input.ReadString();
            break;
          }
          case 42: {
            IdentityId = input.ReadString();
            break;
          }
          case 50: {
            kycPhotos_.AddEntriesFrom(input, _map_kycPhotos_codec);
            break;
          }
          case 58: {
            kycVedios_.AddEntriesFrom(input, _map_kycVedios_codec);
            break;
          }
          case 64: {
            kycStage_ = (global::Proto.KycStage) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Query User info
  /// </summary>
  public sealed partial class QueryUserReq : pb::IMessage<QueryUserReq> {
    private static readonly pb::MessageParser<QueryUserReq> _parser = new pb::MessageParser<QueryUserReq>(() => new QueryUserReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryUserReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserReq(QueryUserReq other) : this() {
      id_ = other.id_;
      email_ = other.email_;
      displayName_ = other.displayName_;
      phoneNumber_ = other.phoneNumber_;
      kind_ = other.kind_;
      activated_ = other.activated_;
      countryCode_ = other.countryCode_;
      realName_ = other.realName_;
      disabled_ = other.disabled_;
      identityType_ = other.identityType_;
      identityId_ = other.identityId_;
      photoFront_ = other.photoFront_;
      photoBack_ = other.photoBack_;
      photoHand_ = other.photoHand_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryUserReq Clone() {
      return new QueryUserReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    /// <summary>
    ///用户邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    /// <summary>
    ///显示姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phoneNumber" field.</summary>
    public const int PhoneNumberFieldNumber = 4;
    private string phoneNumber_ = "";
    /// <summary>
    ///手机号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNumber {
      get { return phoneNumber_; }
      set {
        phoneNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 5;
    private global::Proto.UserKind kind_ = 0;
    /// <summary>
    ///用户类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.UserKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "activated" field.</summary>
    public const int ActivatedFieldNumber = 6;
    private global::Proto.BoolValue activated_ = 0;
    /// <summary>
    ///是否激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Activated {
      get { return activated_; }
      set {
        activated_ = value;
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 7;
    private string countryCode_ = "";
    /// <summary>
    ///国家代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "realName" field.</summary>
    public const int RealNameFieldNumber = 8;
    private string realName_ = "";
    /// <summary>
    ///真实姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 9;
    private global::Proto.BoolValue disabled_ = 0;
    /// <summary>
    ///用户状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Disabled {
      get { return disabled_; }
      set {
        disabled_ = value;
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 10;
    private global::Proto.IdentityType identityType_ = 0;
    /// <summary>
    ///证件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.IdentityType IdentityType {
      get { return identityType_; }
      set {
        identityType_ = value;
      }
    }

    /// <summary>Field number for the "identityId" field.</summary>
    public const int IdentityIdFieldNumber = 11;
    private string identityId_ = "";
    /// <summary>
    ///省份证号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityId {
      get { return identityId_; }
      set {
        identityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoFront" field.</summary>
    public const int PhotoFrontFieldNumber = 12;
    private string photoFront_ = "";
    /// <summary>
    ///认证正面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoFront {
      get { return photoFront_; }
      set {
        photoFront_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoBack" field.</summary>
    public const int PhotoBackFieldNumber = 13;
    private string photoBack_ = "";
    /// <summary>
    ///认证背面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoBack {
      get { return photoBack_; }
      set {
        photoBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoHand" field.</summary>
    public const int PhotoHandFieldNumber = 14;
    private string photoHand_ = "";
    /// <summary>
    ///认证手持照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoHand {
      get { return photoHand_; }
      set {
        photoHand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryUserReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryUserReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Email != other.Email) return false;
      if (DisplayName != other.DisplayName) return false;
      if (PhoneNumber != other.PhoneNumber) return false;
      if (Kind != other.Kind) return false;
      if (Activated != other.Activated) return false;
      if (CountryCode != other.CountryCode) return false;
      if (RealName != other.RealName) return false;
      if (Disabled != other.Disabled) return false;
      if (IdentityType != other.IdentityType) return false;
      if (IdentityId != other.IdentityId) return false;
      if (PhotoFront != other.PhotoFront) return false;
      if (PhotoBack != other.PhotoBack) return false;
      if (PhotoHand != other.PhotoHand) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (PhoneNumber.Length != 0) hash ^= PhoneNumber.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Activated != 0) hash ^= Activated.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (Disabled != 0) hash ^= Disabled.GetHashCode();
      if (IdentityType != 0) hash ^= IdentityType.GetHashCode();
      if (IdentityId.Length != 0) hash ^= IdentityId.GetHashCode();
      if (PhotoFront.Length != 0) hash ^= PhotoFront.GetHashCode();
      if (PhotoBack.Length != 0) hash ^= PhotoBack.GetHashCode();
      if (PhotoHand.Length != 0) hash ^= PhotoHand.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (PhoneNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PhoneNumber);
      }
      if (Kind != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Kind);
      }
      if (Activated != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Activated);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryCode);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RealName);
      }
      if (Disabled != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Disabled);
      }
      if (IdentityType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PhotoHand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (PhoneNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNumber);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Activated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Activated);
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (Disabled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Disabled);
      }
      if (IdentityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoHand);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryUserReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.PhoneNumber.Length != 0) {
        PhoneNumber = other.PhoneNumber;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Activated != 0) {
        Activated = other.Activated;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.Disabled != 0) {
        Disabled = other.Disabled;
      }
      if (other.IdentityType != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.IdentityId.Length != 0) {
        IdentityId = other.IdentityId;
      }
      if (other.PhotoFront.Length != 0) {
        PhotoFront = other.PhotoFront;
      }
      if (other.PhotoBack.Length != 0) {
        PhotoBack = other.PhotoBack;
      }
      if (other.PhotoHand.Length != 0) {
        PhotoHand = other.PhotoHand;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            PhoneNumber = input.ReadString();
            break;
          }
          case 40: {
            kind_ = (global::Proto.UserKind) input.ReadEnum();
            break;
          }
          case 48: {
            activated_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 58: {
            CountryCode = input.ReadString();
            break;
          }
          case 66: {
            RealName = input.ReadString();
            break;
          }
          case 72: {
            disabled_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 80: {
            identityType_ = (global::Proto.IdentityType) input.ReadEnum();
            break;
          }
          case 90: {
            IdentityId = input.ReadString();
            break;
          }
          case 98: {
            PhotoFront = input.ReadString();
            break;
          }
          case 106: {
            PhotoBack = input.ReadString();
            break;
          }
          case 114: {
            PhotoHand = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Record Message Info
  /// </summary>
  public sealed partial class RecordMessageReq : pb::IMessage<RecordMessageReq> {
    private static readonly pb::MessageParser<RecordMessageReq> _parser = new pb::MessageParser<RecordMessageReq>(() => new RecordMessageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordMessageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMessageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMessageReq(RecordMessageReq other) : this() {
      destination_ = other.destination_;
      message_ = other.message_;
      sendStatus_ = other.sendStatus_;
      returnMessage_ = other.returnMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMessageReq Clone() {
      return new RecordMessageReq(this);
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 1;
    private string destination_ = "";
    /// <summary>
    ///发送目标用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    ///短信内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_status" field.</summary>
    public const int SendStatusFieldNumber = 3;
    private global::Proto.MsgSendStatus sendStatus_ = 0;
    /// <summary>
    ///发送状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MsgSendStatus SendStatus {
      get { return sendStatus_; }
      set {
        sendStatus_ = value;
      }
    }

    /// <summary>Field number for the "return_message" field.</summary>
    public const int ReturnMessageFieldNumber = 4;
    private string returnMessage_ = "";
    /// <summary>
    ///发送返回信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnMessage {
      get { return returnMessage_; }
      set {
        returnMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordMessageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordMessageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destination != other.Destination) return false;
      if (Message != other.Message) return false;
      if (SendStatus != other.SendStatus) return false;
      if (ReturnMessage != other.ReturnMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Destination.Length != 0) hash ^= Destination.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (SendStatus != 0) hash ^= SendStatus.GetHashCode();
      if (ReturnMessage.Length != 0) hash ^= ReturnMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Destination.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (SendStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SendStatus);
      }
      if (ReturnMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReturnMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Destination.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (SendStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SendStatus);
      }
      if (ReturnMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordMessageReq other) {
      if (other == null) {
        return;
      }
      if (other.Destination.Length != 0) {
        Destination = other.Destination;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.SendStatus != 0) {
        SendStatus = other.SendStatus;
      }
      if (other.ReturnMessage.Length != 0) {
        ReturnMessage = other.ReturnMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            sendStatus_ = (global::Proto.MsgSendStatus) input.ReadEnum();
            break;
          }
          case 34: {
            ReturnMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Send Phone message
  /// </summary>
  public sealed partial class SendMessageReq : pb::IMessage<SendMessageReq> {
    private static readonly pb::MessageParser<SendMessageReq> _parser = new pb::MessageParser<SendMessageReq>(() => new SendMessageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendMessageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageReq(SendMessageReq other) : this() {
      userId_ = other.userId_;
      phone_ = other.phone_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageReq Clone() {
      return new SendMessageReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 2;
    private string phone_ = "";
    /// <summary>
    ///电话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendMessageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendMessageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Phone != other.Phone) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Phone);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendMessageReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Phone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Bind Phone info
  /// </summary>
  public sealed partial class BindPhoneReq : pb::IMessage<BindPhoneReq> {
    private static readonly pb::MessageParser<BindPhoneReq> _parser = new pb::MessageParser<BindPhoneReq>(() => new BindPhoneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BindPhoneReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPhoneReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPhoneReq(BindPhoneReq other) : this() {
      id_ = other.id_;
      phone_ = other.phone_;
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPhoneReq Clone() {
      return new BindPhoneReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 2;
    private string phone_ = "";
    /// <summary>
    ///电话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    /// <summary>
    ///验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BindPhoneReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BindPhoneReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Phone != other.Phone) return false;
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Phone);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BindPhoneReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Phone = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Payment Password
  /// </summary>
  public sealed partial class PaymentPasswordReq : pb::IMessage<PaymentPasswordReq> {
    private static readonly pb::MessageParser<PaymentPasswordReq> _parser = new pb::MessageParser<PaymentPasswordReq>(() => new PaymentPasswordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentPasswordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentPasswordReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentPasswordReq(PaymentPasswordReq other) : this() {
      userId_ = other.userId_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentPasswordReq Clone() {
      return new PaymentPasswordReq(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentPasswordReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentPasswordReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentPasswordReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///3.Response
  /// </summary>
  public sealed partial class UserReply : pb::IMessage<UserReply> {
    private static readonly pb::MessageParser<UserReply> _parser = new pb::MessageParser<UserReply>(() => new UserReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserReply(UserReply other) : this() {
      id_ = other.id_;
      email_ = other.email_;
      displayName_ = other.displayName_;
      phoneNumber_ = other.phoneNumber_;
      kind_ = other.kind_;
      activated_ = other.activated_;
      countryCode_ = other.countryCode_;
      realName_ = other.realName_;
      disabled_ = other.disabled_;
      identityType_ = other.identityType_;
      identityId_ = other.identityId_;
      photoFront_ = other.photoFront_;
      photoBack_ = other.photoBack_;
      photoHand_ = other.photoHand_;
      inviteCode_ = other.inviteCode_;
      registIp_ = other.registIp_;
      deviceId_ = other.deviceId_;
      googleIsBind_ = other.googleIsBind_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserReply Clone() {
      return new UserReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    /// <summary>
    ///邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    /// <summary>
    ///显示姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phoneNumber" field.</summary>
    public const int PhoneNumberFieldNumber = 4;
    private string phoneNumber_ = "";
    /// <summary>
    ///手机号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNumber {
      get { return phoneNumber_; }
      set {
        phoneNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 5;
    private global::Proto.UserKind kind_ = 0;
    /// <summary>
    ///用户类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.UserKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "activated" field.</summary>
    public const int ActivatedFieldNumber = 6;
    private global::Proto.BoolValue activated_ = 0;
    /// <summary>
    ///是否被激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Activated {
      get { return activated_; }
      set {
        activated_ = value;
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 7;
    private string countryCode_ = "";
    /// <summary>
    ///国家代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "realName" field.</summary>
    public const int RealNameFieldNumber = 8;
    private string realName_ = "";
    /// <summary>
    ///真实姓名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 9;
    private global::Proto.BoolValue disabled_ = 0;
    /// <summary>
    ///是否被禁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue Disabled {
      get { return disabled_; }
      set {
        disabled_ = value;
      }
    }

    /// <summary>Field number for the "identityType" field.</summary>
    public const int IdentityTypeFieldNumber = 10;
    private global::Proto.IdentityType identityType_ = 0;
    /// <summary>
    ///证件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.IdentityType IdentityType {
      get { return identityType_; }
      set {
        identityType_ = value;
      }
    }

    /// <summary>Field number for the "identityId" field.</summary>
    public const int IdentityIdFieldNumber = 11;
    private string identityId_ = "";
    /// <summary>
    ///证件Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityId {
      get { return identityId_; }
      set {
        identityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoFront" field.</summary>
    public const int PhotoFrontFieldNumber = 12;
    private string photoFront_ = "";
    /// <summary>
    ///认证正面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoFront {
      get { return photoFront_; }
      set {
        photoFront_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoBack" field.</summary>
    public const int PhotoBackFieldNumber = 13;
    private string photoBack_ = "";
    /// <summary>
    ///认证背面照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoBack {
      get { return photoBack_; }
      set {
        photoBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photoHand" field.</summary>
    public const int PhotoHandFieldNumber = 14;
    private string photoHand_ = "";
    /// <summary>
    ///认证手持照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhotoHand {
      get { return photoHand_; }
      set {
        photoHand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inviteCode" field.</summary>
    public const int InviteCodeFieldNumber = 15;
    private string inviteCode_ = "";
    /// <summary>
    ///邀请码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InviteCode {
      get { return inviteCode_; }
      set {
        inviteCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "registIp" field.</summary>
    public const int RegistIpFieldNumber = 16;
    private string registIp_ = "";
    /// <summary>
    ///注册Ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistIp {
      get { return registIp_; }
      set {
        registIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 17;
    private string deviceId_ = "";
    /// <summary>
    ///注册设备Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "googleIsBind" field.</summary>
    public const int GoogleIsBindFieldNumber = 18;
    private int googleIsBind_;
    /// <summary>
    ///是否已经绑定Google验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoogleIsBind {
      get { return googleIsBind_; }
      set {
        googleIsBind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Email != other.Email) return false;
      if (DisplayName != other.DisplayName) return false;
      if (PhoneNumber != other.PhoneNumber) return false;
      if (Kind != other.Kind) return false;
      if (Activated != other.Activated) return false;
      if (CountryCode != other.CountryCode) return false;
      if (RealName != other.RealName) return false;
      if (Disabled != other.Disabled) return false;
      if (IdentityType != other.IdentityType) return false;
      if (IdentityId != other.IdentityId) return false;
      if (PhotoFront != other.PhotoFront) return false;
      if (PhotoBack != other.PhotoBack) return false;
      if (PhotoHand != other.PhotoHand) return false;
      if (InviteCode != other.InviteCode) return false;
      if (RegistIp != other.RegistIp) return false;
      if (DeviceId != other.DeviceId) return false;
      if (GoogleIsBind != other.GoogleIsBind) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (PhoneNumber.Length != 0) hash ^= PhoneNumber.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Activated != 0) hash ^= Activated.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (Disabled != 0) hash ^= Disabled.GetHashCode();
      if (IdentityType != 0) hash ^= IdentityType.GetHashCode();
      if (IdentityId.Length != 0) hash ^= IdentityId.GetHashCode();
      if (PhotoFront.Length != 0) hash ^= PhotoFront.GetHashCode();
      if (PhotoBack.Length != 0) hash ^= PhotoBack.GetHashCode();
      if (PhotoHand.Length != 0) hash ^= PhotoHand.GetHashCode();
      if (InviteCode.Length != 0) hash ^= InviteCode.GetHashCode();
      if (RegistIp.Length != 0) hash ^= RegistIp.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (GoogleIsBind != 0) hash ^= GoogleIsBind.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (PhoneNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PhoneNumber);
      }
      if (Kind != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Kind);
      }
      if (Activated != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Activated);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryCode);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RealName);
      }
      if (Disabled != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Disabled);
      }
      if (IdentityType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PhotoHand);
      }
      if (InviteCode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(InviteCode);
      }
      if (RegistIp.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(RegistIp);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(DeviceId);
      }
      if (GoogleIsBind != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(GoogleIsBind);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (PhoneNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNumber);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Activated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Activated);
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (Disabled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Disabled);
      }
      if (IdentityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdentityType);
      }
      if (IdentityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityId);
      }
      if (PhotoFront.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoFront);
      }
      if (PhotoBack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoBack);
      }
      if (PhotoHand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoHand);
      }
      if (InviteCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InviteCode);
      }
      if (RegistIp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RegistIp);
      }
      if (DeviceId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (GoogleIsBind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GoogleIsBind);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.PhoneNumber.Length != 0) {
        PhoneNumber = other.PhoneNumber;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Activated != 0) {
        Activated = other.Activated;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.Disabled != 0) {
        Disabled = other.Disabled;
      }
      if (other.IdentityType != 0) {
        IdentityType = other.IdentityType;
      }
      if (other.IdentityId.Length != 0) {
        IdentityId = other.IdentityId;
      }
      if (other.PhotoFront.Length != 0) {
        PhotoFront = other.PhotoFront;
      }
      if (other.PhotoBack.Length != 0) {
        PhotoBack = other.PhotoBack;
      }
      if (other.PhotoHand.Length != 0) {
        PhotoHand = other.PhotoHand;
      }
      if (other.InviteCode.Length != 0) {
        InviteCode = other.InviteCode;
      }
      if (other.RegistIp.Length != 0) {
        RegistIp = other.RegistIp;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.GoogleIsBind != 0) {
        GoogleIsBind = other.GoogleIsBind;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            PhoneNumber = input.ReadString();
            break;
          }
          case 40: {
            kind_ = (global::Proto.UserKind) input.ReadEnum();
            break;
          }
          case 48: {
            activated_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 58: {
            CountryCode = input.ReadString();
            break;
          }
          case 66: {
            RealName = input.ReadString();
            break;
          }
          case 72: {
            disabled_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 80: {
            identityType_ = (global::Proto.IdentityType) input.ReadEnum();
            break;
          }
          case 90: {
            IdentityId = input.ReadString();
            break;
          }
          case 98: {
            PhotoFront = input.ReadString();
            break;
          }
          case 106: {
            PhotoBack = input.ReadString();
            break;
          }
          case 114: {
            PhotoHand = input.ReadString();
            break;
          }
          case 122: {
            InviteCode = input.ReadString();
            break;
          }
          case 130: {
            RegistIp = input.ReadString();
            break;
          }
          case 138: {
            DeviceId = input.ReadString();
            break;
          }
          case 144: {
            GoogleIsBind = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Forget Password
  /// </summary>
  public sealed partial class ForgetReply : pb::IMessage<ForgetReply> {
    private static readonly pb::MessageParser<ForgetReply> _parser = new pb::MessageParser<ForgetReply>(() => new ForgetReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForgetReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetReply(ForgetReply other) : this() {
      id_ = other.id_;
      information_ = other.information_;
      secrect_ = other.secrect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetReply Clone() {
      return new ForgetReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "information" field.</summary>
    public const int InformationFieldNumber = 2;
    private string information_ = "";
    /// <summary>
    ///手机号码或邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Information {
      get { return information_; }
      set {
        information_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secrect" field.</summary>
    public const int SecrectFieldNumber = 3;
    private string secrect_ = "";
    /// <summary>
    ///验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Secrect {
      get { return secrect_; }
      set {
        secrect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForgetReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForgetReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Information != other.Information) return false;
      if (Secrect != other.Secrect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Information.Length != 0) hash ^= Information.GetHashCode();
      if (Secrect.Length != 0) hash ^= Secrect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Information.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Information);
      }
      if (Secrect.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Secrect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Information.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Information);
      }
      if (Secrect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secrect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForgetReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Information.Length != 0) {
        Information = other.Information;
      }
      if (other.Secrect.Length != 0) {
        Secrect = other.Secrect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Information = input.ReadString();
            break;
          }
          case 26: {
            Secrect = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Update Password
  /// </summary>
  public sealed partial class UpdatePwdReply : pb::IMessage<UpdatePwdReply> {
    private static readonly pb::MessageParser<UpdatePwdReply> _parser = new pb::MessageParser<UpdatePwdReply>(() => new UpdatePwdReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePwdReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePwdReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePwdReply(UpdatePwdReply other) : this() {
      id_ = other.id_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePwdReply Clone() {
      return new UpdatePwdReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePwdReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePwdReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePwdReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserListReply : pb::IMessage<UserListReply> {
    private static readonly pb::MessageParser<UserListReply> _parser = new pb::MessageParser<UserListReply>(() => new UserListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserListReply(UserListReply other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserListReply Clone() {
      return new UserListReply(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.UserReply> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.UserReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.UserReply> users_ = new pbc::RepeatedField<global::Proto.UserReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.UserReply> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserListReply other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InviterInfoReply : pb::IMessage<InviterInfoReply> {
    private static readonly pb::MessageParser<InviterInfoReply> _parser = new pb::MessageParser<InviterInfoReply>(() => new InviterInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviterInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviterInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviterInfoReply(InviterInfoReply other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      inviterId_ = other.inviterId_;
      createAt_ = other.createAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviterInfoReply Clone() {
      return new InviterInfoReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "inviterId" field.</summary>
    public const int InviterIdFieldNumber = 3;
    private long inviterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InviterId {
      get { return inviterId_; }
      set {
        inviterId_ = value;
      }
    }

    /// <summary>Field number for the "createAt" field.</summary>
    public const int CreateAtFieldNumber = 4;
    private string createAt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateAt {
      get { return createAt_; }
      set {
        createAt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InviterInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InviterInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (InviterId != other.InviterId) return false;
      if (CreateAt != other.CreateAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (InviterId != 0L) hash ^= InviterId.GetHashCode();
      if (CreateAt.Length != 0) hash ^= CreateAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (InviterId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InviterId);
      }
      if (CreateAt.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CreateAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (InviterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviterId);
      }
      if (CreateAt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InviterInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.InviterId != 0L) {
        InviterId = other.InviterId;
      }
      if (other.CreateAt.Length != 0) {
        CreateAt = other.CreateAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            InviterId = input.ReadInt64();
            break;
          }
          case 34: {
            CreateAt = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserStatusReply : pb::IMessage<UserStatusReply> {
    private static readonly pb::MessageParser<UserStatusReply> _parser = new pb::MessageParser<UserStatusReply>(() => new UserStatusReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserStatusReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStatusReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStatusReply(UserStatusReply other) : this() {
      isPhoneBind_ = other.isPhoneBind_;
      isGoogleBind_ = other.isGoogleBind_;
      isActivated_ = other.isActivated_;
      isDisabled_ = other.isDisabled_;
      isPayPassword_ = other.isPayPassword_;
      isKycPassed_ = other.isKycPassed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStatusReply Clone() {
      return new UserStatusReply(this);
    }

    /// <summary>Field number for the "isPhoneBind" field.</summary>
    public const int IsPhoneBindFieldNumber = 1;
    private global::Proto.BoolValue isPhoneBind_ = 0;
    /// <summary>
    ///是已以绑定手机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue IsPhoneBind {
      get { return isPhoneBind_; }
      set {
        isPhoneBind_ = value;
      }
    }

    /// <summary>Field number for the "isGoogleBind" field.</summary>
    public const int IsGoogleBindFieldNumber = 2;
    private global::Proto.BoolValue isGoogleBind_ = 0;
    /// <summary>
    ///是否已绑定Google二次验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue IsGoogleBind {
      get { return isGoogleBind_; }
      set {
        isGoogleBind_ = value;
      }
    }

    /// <summary>Field number for the "isActivated" field.</summary>
    public const int IsActivatedFieldNumber = 3;
    private global::Proto.BoolValue isActivated_ = 0;
    /// <summary>
    ///是否激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue IsActivated {
      get { return isActivated_; }
      set {
        isActivated_ = value;
      }
    }

    /// <summary>Field number for the "isDisabled" field.</summary>
    public const int IsDisabledFieldNumber = 4;
    private global::Proto.BoolValue isDisabled_ = 0;
    /// <summary>
    ///是否被禁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue IsDisabled {
      get { return isDisabled_; }
      set {
        isDisabled_ = value;
      }
    }

    /// <summary>Field number for the "isPayPassword" field.</summary>
    public const int IsPayPasswordFieldNumber = 5;
    private global::Proto.BoolValue isPayPassword_ = 0;
    /// <summary>
    ///资金密码是否已设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue IsPayPassword {
      get { return isPayPassword_; }
      set {
        isPayPassword_ = value;
      }
    }

    /// <summary>Field number for the "isKycPassed" field.</summary>
    public const int IsKycPassedFieldNumber = 6;
    private global::Proto.BoolValue isKycPassed_ = 0;
    /// <summary>
    ///Kyc认证是否通过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.BoolValue IsKycPassed {
      get { return isKycPassed_; }
      set {
        isKycPassed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserStatusReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserStatusReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPhoneBind != other.IsPhoneBind) return false;
      if (IsGoogleBind != other.IsGoogleBind) return false;
      if (IsActivated != other.IsActivated) return false;
      if (IsDisabled != other.IsDisabled) return false;
      if (IsPayPassword != other.IsPayPassword) return false;
      if (IsKycPassed != other.IsKycPassed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsPhoneBind != 0) hash ^= IsPhoneBind.GetHashCode();
      if (IsGoogleBind != 0) hash ^= IsGoogleBind.GetHashCode();
      if (IsActivated != 0) hash ^= IsActivated.GetHashCode();
      if (IsDisabled != 0) hash ^= IsDisabled.GetHashCode();
      if (IsPayPassword != 0) hash ^= IsPayPassword.GetHashCode();
      if (IsKycPassed != 0) hash ^= IsKycPassed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPhoneBind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IsPhoneBind);
      }
      if (IsGoogleBind != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) IsGoogleBind);
      }
      if (IsActivated != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) IsActivated);
      }
      if (IsDisabled != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) IsDisabled);
      }
      if (IsPayPassword != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) IsPayPassword);
      }
      if (IsKycPassed != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) IsKycPassed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsPhoneBind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsPhoneBind);
      }
      if (IsGoogleBind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsGoogleBind);
      }
      if (IsActivated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsActivated);
      }
      if (IsDisabled != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsDisabled);
      }
      if (IsPayPassword != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsPayPassword);
      }
      if (IsKycPassed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IsKycPassed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserStatusReply other) {
      if (other == null) {
        return;
      }
      if (other.IsPhoneBind != 0) {
        IsPhoneBind = other.IsPhoneBind;
      }
      if (other.IsGoogleBind != 0) {
        IsGoogleBind = other.IsGoogleBind;
      }
      if (other.IsActivated != 0) {
        IsActivated = other.IsActivated;
      }
      if (other.IsDisabled != 0) {
        IsDisabled = other.IsDisabled;
      }
      if (other.IsPayPassword != 0) {
        IsPayPassword = other.IsPayPassword;
      }
      if (other.IsKycPassed != 0) {
        IsKycPassed = other.IsKycPassed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            isPhoneBind_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 16: {
            isGoogleBind_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 24: {
            isActivated_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 32: {
            isDisabled_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 40: {
            isPayPassword_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
          case 48: {
            isKycPassed_ = (global::Proto.BoolValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRecordReply : pb::IMessage<LoginRecordReply> {
    private static readonly pb::MessageParser<LoginRecordReply> _parser = new pb::MessageParser<LoginRecordReply>(() => new LoginRecordReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRecordReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecordReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecordReply(LoginRecordReply other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      loginIp_ = other.loginIp_;
      deviceId_ = other.deviceId_;
      status_ = other.status_;
      loginComment_ = other.loginComment_;
      loginTime_ = other.loginTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecordReply Clone() {
      return new LoginRecordReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "loginIp" field.</summary>
    public const int LoginIpFieldNumber = 3;
    private string loginIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginIp {
      get { return loginIp_; }
      set {
        loginIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 4;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Proto.LoginStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.LoginStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "loginComment" field.</summary>
    public const int LoginCommentFieldNumber = 6;
    private string loginComment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginComment {
      get { return loginComment_; }
      set {
        loginComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginTime" field.</summary>
    public const int LoginTimeFieldNumber = 7;
    private string loginTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginTime {
      get { return loginTime_; }
      set {
        loginTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRecordReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRecordReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (LoginIp != other.LoginIp) return false;
      if (DeviceId != other.DeviceId) return false;
      if (Status != other.Status) return false;
      if (LoginComment != other.LoginComment) return false;
      if (LoginTime != other.LoginTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (LoginIp.Length != 0) hash ^= LoginIp.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LoginComment.Length != 0) hash ^= LoginComment.GetHashCode();
      if (LoginTime.Length != 0) hash ^= LoginTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (LoginIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LoginIp);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceId);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (LoginComment.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LoginComment);
      }
      if (LoginTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LoginTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (LoginIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginIp);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (LoginComment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginComment);
      }
      if (LoginTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRecordReply other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.LoginIp.Length != 0) {
        LoginIp = other.LoginIp;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LoginComment.Length != 0) {
        LoginComment = other.LoginComment;
      }
      if (other.LoginTime.Length != 0) {
        LoginTime = other.LoginTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 26: {
            LoginIp = input.ReadString();
            break;
          }
          case 34: {
            DeviceId = input.ReadString();
            break;
          }
          case 40: {
            status_ = (global::Proto.LoginStatus) input.ReadEnum();
            break;
          }
          case 50: {
            LoginComment = input.ReadString();
            break;
          }
          case 58: {
            LoginTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRecordListReply : pb::IMessage<LoginRecordListReply> {
    private static readonly pb::MessageParser<LoginRecordListReply> _parser = new pb::MessageParser<LoginRecordListReply>(() => new LoginRecordListReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRecordListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecordListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecordListReply(LoginRecordListReply other) : this() {
      recordList_ = other.recordList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRecordListReply Clone() {
      return new LoginRecordListReply(this);
    }

    /// <summary>Field number for the "recordList" field.</summary>
    public const int RecordListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.LoginRecordReply> _repeated_recordList_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.LoginRecordReply.Parser);
    private readonly pbc::RepeatedField<global::Proto.LoginRecordReply> recordList_ = new pbc::RepeatedField<global::Proto.LoginRecordReply>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.LoginRecordReply> RecordList {
      get { return recordList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRecordListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRecordListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordList_.Equals(other.recordList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recordList_.WriteTo(output, _repeated_recordList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRecordListReply other) {
      if (other == null) {
        return;
      }
      recordList_.Add(other.recordList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户一小时内发送短信条数信息
  /// </summary>
  public sealed partial class MessageCountReply : pb::IMessage<MessageCountReply> {
    private static readonly pb::MessageParser<MessageCountReply> _parser = new pb::MessageParser<MessageCountReply>(() => new MessageCountReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageCountReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageCountReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageCountReply(MessageCountReply other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageCountReply Clone() {
      return new MessageCountReply(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///数目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageCountReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageCountReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageCountReply other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Google绑定二维码验证
  /// </summary>
  public sealed partial class GoogleQRCodeRelpy : pb::IMessage<GoogleQRCodeRelpy> {
    private static readonly pb::MessageParser<GoogleQRCodeRelpy> _parser = new pb::MessageParser<GoogleQRCodeRelpy>(() => new GoogleQRCodeRelpy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoogleQRCodeRelpy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.UserReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleQRCodeRelpy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleQRCodeRelpy(GoogleQRCodeRelpy other) : this() {
      imageUrl_ = other.imageUrl_;
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleQRCodeRelpy Clone() {
      return new GoogleQRCodeRelpy(this);
    }

    /// <summary>Field number for the "imageUrl" field.</summary>
    public const int ImageUrlFieldNumber = 1;
    private string imageUrl_ = "";
    /// <summary>
    ///绑定用户Google验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    /// <summary>
    ///绑定用户code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoogleQRCodeRelpy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoogleQRCodeRelpy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageUrl != other.ImageUrl) return false;
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageUrl);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoogleQRCodeRelpy other) {
      if (other == null) {
        return;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ImageUrl = input.ReadString();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
